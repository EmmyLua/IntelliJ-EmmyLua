/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.tang.intellij.lua.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import com.tang.intellij.lua.lang.LuaLanguageLevel;

import java.io.Reader;

import static com.tang.intellij.lua.psi.LuaTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>lua.flex</tt>
 */
public class _LuaLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int xSHEBANG = 2;
  public static final int xDOUBLE_QUOTED_STRING = 4;
  public static final int xSINGLE_QUOTED_STRING = 6;
  public static final int xBLOCK_STRING = 8;
  public static final int xCOMMENT = 10;
  public static final int xBLOCK_COMMENT = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 6, 7]
   * Total runtime size is 2320 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>13]|((ch>>7)&0x3f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\6\200\200\300");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\137\2\100\5");

  /* The ZZ_CMAP_A table has 768 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\34\1\3\1\2\1\0\1\3\1\1\22\34\1\3\1\54\1\32\1\53\1\34\1\61\1\71\1\36\1"+
    "\63\1\64\1\60\1\10\1\65\1\15\1\14\1\62\1\12\11\5\1\67\1\66\1\56\1\30\1\55"+
    "\2\34\4\6\1\7\1\6\11\35\1\11\7\35\1\13\2\35\1\27\1\33\1\31\1\70\1\35\1\34"+
    "\1\37\1\40\1\46\1\25\1\17\1\44\1\20\1\51\1\21\1\35\1\41\1\42\1\35\1\23\1\22"+
    "\1\50\1\35\1\16\1\43\1\47\1\45\1\35\1\52\1\13\2\35\1\24\1\72\1\26\1\57\6\34"+
    "\1\0\32\34\1\0\136\34\201\35\1\4\177\35\13\4\35\35\2\4\5\35\1\4\57\35\1\4"+
    "\40\35\200\34");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\5\0\1\2\1\3\1\4\1\5\1\6"+
    "\1\5\1\7\1\10\6\4\1\11\1\4\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\7\4\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\2\37\1\2\1\0\2\40"+
    "\2\5\1\0\1\5\1\41\1\42\4\4\1\43\1\44"+
    "\1\45\2\4\1\46\1\47\1\0\1\50\12\4\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\37"+
    "\4\0\1\61\2\0\2\5\1\62\4\0\2\4\1\63"+
    "\2\4\1\64\1\65\1\66\2\4\1\67\6\4\1\0"+
    "\1\61\1\70\1\0\1\5\6\0\2\4\1\71\1\72"+
    "\5\4\1\73\1\74\1\4\1\75\2\0\1\76\1\5"+
    "\2\0\1\77\1\100\3\4\1\101\1\102\1\103\1\4"+
    "\1\104\1\105\1\0\1\5\2\0\1\106\1\107\1\110"+
    "\1\4\3\0\1\4\1\0\1\111\2\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[183];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\u0162\0\u019d"+
    "\0\u01d8\0\u0213\0\u024e\0\u019d\0\u0289\0\u02c4\0\u02ff\0\u033a"+
    "\0\u0375\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u019d\0\u049c\0\u019d"+
    "\0\u04d7\0\u0512\0\u019d\0\u019d\0\u019d\0\u054d\0\u0588\0\u05c3"+
    "\0\u05fe\0\u0639\0\u0674\0\u06af\0\u06ea\0\u0725\0\u0760\0\u079b"+
    "\0\u019d\0\u019d\0\u07d6\0\u019d\0\u019d\0\u019d\0\u019d\0\u0811"+
    "\0\u019d\0\u019d\0\u019d\0\u084c\0\u0887\0\u08c2\0\u08fd\0\u019d"+
    "\0\u0938\0\u0973\0\u09ae\0\u09e9\0\u0a24\0\u0a5f\0\u0a9a\0\u0ad5"+
    "\0\u0b10\0\u0b4b\0\u0b86\0\u0213\0\u0213\0\u0213\0\u0bc1\0\u0bfc"+
    "\0\u0213\0\u019d\0\u04d7\0\u019d\0\u0c37\0\u0c72\0\u0cad\0\u0ce8"+
    "\0\u0d23\0\u0d5e\0\u0d99\0\u0dd4\0\u0e0f\0\u0e4a\0\u019d\0\u019d"+
    "\0\u019d\0\u019d\0\u019d\0\u019d\0\u019d\0\u019d\0\u019d\0\u0e85"+
    "\0\u0ec0\0\u0efb\0\u08c2\0\u0f36\0\u0f71\0\u0a24\0\u0fac\0\u0fe7"+
    "\0\u019d\0\u1022\0\u105d\0\u1098\0\u10d3\0\u110e\0\u1149\0\u0213"+
    "\0\u1184\0\u11bf\0\u0213\0\u0213\0\u0213\0\u11fa\0\u1235\0\u0213"+
    "\0\u1270\0\u12ab\0\u12e6\0\u1321\0\u135c\0\u1397\0\u13d2\0\u140d"+
    "\0\u1448\0\u1483\0\u14be\0\u14f9\0\u1534\0\u156f\0\u15aa\0\u15e5"+
    "\0\u1620\0\u165b\0\u1696\0\u16d1\0\u0213\0\u170c\0\u1747\0\u1782"+
    "\0\u17bd\0\u17f8\0\u0213\0\u0213\0\u1833\0\u13d2\0\u186e\0\u18a9"+
    "\0\u18e4\0\u191f\0\u195a\0\u1995\0\u19d0\0\u1a0b\0\u1a46\0\u1a81"+
    "\0\u1abc\0\u0213\0\u0213\0\u0213\0\u1af7\0\u0213\0\u0213\0\u1b32"+
    "\0\u1b6d\0\u1ba8\0\u1be3\0\u0213\0\u0213\0\u0213\0\u1c1e\0\u1c59"+
    "\0\u1c94\0\u1ccf\0\u1d0a\0\u1d45\0\u0213\0\u1d80\0\u1dbb";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[183];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\3\11\1\12\1\13\2\12\1\14\1\12\1\15"+
    "\1\12\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\2\10\1\12\1\35\1\36\1\37\1\12\1\40\1\12"+
    "\1\41\1\42\1\12\1\43\2\12\1\44\1\45\1\10"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\2\2\0"+
    "\70\2\32\0\1\64\76\0\1\65\34\0\27\10\1\66"+
    "\43\10\15\0\1\67\55\0\15\70\1\71\55\70\74\0"+
    "\3\11\73\0\4\12\1\0\3\12\2\0\6\12\1\0"+
    "\1\12\7\0\1\12\1\0\14\12\25\0\1\13\1\0"+
    "\1\72\2\0\1\13\1\0\1\73\2\0\1\72\60\0"+
    "\1\13\1\0\1\72\2\0\1\13\1\74\1\73\2\0"+
    "\1\72\60\0\1\75\4\0\1\75\1\0\1\76\73\0"+
    "\1\77\61\0\4\12\1\0\3\12\2\0\1\12\1\100"+
    "\4\12\1\0\1\12\7\0\1\12\1\0\14\12\24\0"+
    "\4\12\1\0\3\12\2\0\5\12\1\101\1\0\1\12"+
    "\7\0\1\12\1\0\3\12\1\102\10\12\24\0\4\12"+
    "\1\0\3\12\2\0\4\12\1\103\1\12\1\0\1\12"+
    "\7\0\1\12\1\0\14\12\24\0\4\12\1\0\3\12"+
    "\2\0\5\12\1\104\1\0\1\12\7\0\1\12\1\0"+
    "\5\12\1\105\6\12\24\0\4\12\1\0\3\12\2\0"+
    "\1\106\5\12\1\0\1\12\7\0\1\12\1\0\14\12"+
    "\24\0\4\12\1\0\3\12\2\0\3\12\1\107\1\110"+
    "\1\12\1\0\1\12\7\0\1\12\1\0\14\12\24\0"+
    "\4\12\1\0\3\12\2\0\4\12\1\111\1\12\1\0"+
    "\1\12\7\0\1\12\1\0\14\12\47\0\1\112\1\113"+
    "\72\0\1\114\46\0\4\12\1\0\3\12\2\0\5\12"+
    "\1\115\1\0\1\12\7\0\1\12\1\0\14\12\24\0"+
    "\4\12\1\0\3\12\2\0\1\116\5\12\1\0\1\12"+
    "\7\0\1\12\1\0\14\12\24\0\4\12\1\0\3\12"+
    "\2\0\4\12\1\117\1\12\1\0\1\12\7\0\1\12"+
    "\1\0\14\12\24\0\4\12\1\0\3\12\2\0\4\12"+
    "\1\120\1\12\1\0\1\12\7\0\1\12\1\0\1\121"+
    "\5\12\1\122\5\12\24\0\4\12\1\0\3\12\2\0"+
    "\5\12\1\123\1\0\1\12\7\0\1\12\1\0\14\12"+
    "\24\0\4\12\1\0\3\12\2\0\1\124\5\12\1\0"+
    "\1\12\7\0\1\12\1\0\12\12\1\125\1\12\24\0"+
    "\4\12\1\0\3\12\2\0\6\12\1\0\1\12\7\0"+
    "\1\12\1\0\12\12\1\126\1\12\74\0\1\127\46\0"+
    "\1\130\24\0\1\131\45\0\1\132\25\0\1\133\44\0"+
    "\1\134\124\0\1\135\77\0\1\136\3\0\32\64\1\137"+
    "\1\140\37\64\33\65\1\141\2\65\1\137\34\65\27\0"+
    "\1\142\1\143\57\0\1\144\72\0\1\145\62\0\1\75"+
    "\2\0\1\146\1\0\1\75\2\0\1\146\62\0\1\147"+
    "\4\0\1\147\65\0\3\150\2\0\1\150\4\0\1\150"+
    "\5\0\1\150\11\0\2\150\3\0\1\150\1\0\1\150"+
    "\31\0\1\75\4\0\1\75\74\0\1\151\74\0\1\152"+
    "\1\153\4\0\1\154\1\0\1\155\50\0\4\12\1\0"+
    "\3\12\2\0\6\12\1\0\1\12\7\0\1\12\1\0"+
    "\10\12\1\156\1\157\2\12\24\0\4\12\1\0\3\12"+
    "\2\0\6\12\1\0\1\160\7\0\1\12\1\0\14\12"+
    "\24\0\4\12\1\0\3\12\2\0\6\12\1\0\1\12"+
    "\7\0\1\12\1\0\4\12\1\161\7\12\24\0\4\12"+
    "\1\0\3\12\2\0\6\12\1\0\1\12\7\0\1\12"+
    "\1\0\10\12\1\162\3\12\24\0\4\12\1\0\3\12"+
    "\2\0\6\12\1\0\1\12\7\0\1\12\1\0\3\12"+
    "\1\163\10\12\24\0\4\12\1\0\3\12\2\0\6\12"+
    "\1\0\1\12\7\0\1\12\1\0\10\12\1\164\3\12"+
    "\24\0\4\12\1\0\3\12\2\0\6\12\1\0\1\165"+
    "\7\0\1\12\1\0\14\12\24\0\4\12\1\0\3\12"+
    "\2\0\1\12\1\166\4\12\1\0\1\12\7\0\1\12"+
    "\1\0\14\12\24\0\4\12\1\0\3\12\2\0\6\12"+
    "\1\0\1\12\7\0\1\12\1\0\7\12\1\167\4\12"+
    "\24\0\4\12\1\0\3\12\2\0\1\170\5\12\1\0"+
    "\1\12\7\0\1\12\1\0\14\12\24\0\4\12\1\0"+
    "\3\12\2\0\6\12\1\0\1\12\7\0\1\12\1\0"+
    "\3\12\1\171\10\12\24\0\4\12\1\0\3\12\2\0"+
    "\5\12\1\172\1\0\1\12\7\0\1\12\1\0\14\12"+
    "\24\0\4\12\1\0\3\12\2\0\6\12\1\0\1\12"+
    "\7\0\1\12\1\0\10\12\1\173\3\12\24\0\4\12"+
    "\1\0\3\12\2\0\6\12\1\0\1\12\7\0\1\12"+
    "\1\0\6\12\1\174\5\12\24\0\4\12\1\0\3\12"+
    "\2\0\1\12\1\175\4\12\1\0\1\12\7\0\1\12"+
    "\1\0\14\12\24\0\4\12\1\0\3\12\2\0\3\12"+
    "\1\176\2\12\1\0\1\12\7\0\1\12\1\0\14\12"+
    "\21\0\2\64\2\0\66\64\1\0\2\65\2\0\66\65"+
    "\31\142\1\177\41\142\1\200\2\0\12\200\1\201\55\200"+
    "\27\0\1\202\50\0\1\147\1\0\1\72\2\0\1\147"+
    "\4\0\1\72\60\0\2\150\1\203\1\0\1\204\1\150"+
    "\1\0\1\205\2\0\1\203\5\0\1\150\11\0\2\150"+
    "\3\0\1\150\1\0\1\150\1\0\1\204\41\0\1\206"+
    "\76\0\1\207\73\0\1\210\74\0\1\211\50\0\4\12"+
    "\1\0\3\12\2\0\6\12\1\0\1\12\7\0\1\12"+
    "\1\0\6\12\1\212\5\12\24\0\4\12\1\0\3\12"+
    "\2\0\1\12\1\213\4\12\1\0\1\12\7\0\1\12"+
    "\1\0\14\12\24\0\4\12\1\0\3\12\2\0\1\12"+
    "\1\214\4\12\1\0\1\12\7\0\1\12\1\0\14\12"+
    "\24\0\4\12\1\0\3\12\2\0\4\12\1\215\1\12"+
    "\1\0\1\12\7\0\1\12\1\0\14\12\24\0\4\12"+
    "\1\0\3\12\2\0\6\12\1\0\1\12\7\0\1\12"+
    "\1\0\1\216\13\12\24\0\4\12\1\0\3\12\2\0"+
    "\6\12\1\0\1\12\7\0\1\12\1\0\1\217\13\12"+
    "\24\0\4\12\1\0\3\12\2\0\6\12\1\0\1\12"+
    "\7\0\1\12\1\0\4\12\1\220\7\12\24\0\4\12"+
    "\1\0\3\12\2\0\6\12\1\0\1\12\7\0\1\12"+
    "\1\0\7\12\1\221\4\12\24\0\4\12\1\0\3\12"+
    "\2\0\3\12\1\222\2\12\1\0\1\12\7\0\1\12"+
    "\1\0\14\12\24\0\4\12\1\0\3\12\2\0\1\12"+
    "\1\223\4\12\1\0\1\12\7\0\1\12\1\0\14\12"+
    "\24\0\4\12\1\0\3\12\2\0\5\12\1\224\1\0"+
    "\1\12\7\0\1\12\1\0\14\12\24\0\4\12\1\0"+
    "\3\12\2\0\6\12\1\0\1\12\7\0\1\12\1\0"+
    "\3\12\1\225\10\12\20\0\30\142\1\177\1\226\41\142"+
    "\1\200\2\0\70\200\1\201\1\227\1\230\70\201\27\0"+
    "\1\231\1\202\47\0\2\150\1\203\1\146\1\204\1\150"+
    "\1\0\1\205\1\146\1\0\1\203\5\0\1\150\11\0"+
    "\2\150\3\0\1\150\1\0\1\150\1\0\1\204\32\0"+
    "\1\146\4\0\1\146\62\0\3\232\2\0\1\232\4\0"+
    "\1\232\5\0\1\232\11\0\2\232\3\0\1\232\1\0"+
    "\1\232\44\0\1\233\77\0\1\234\71\0\1\235\74\0"+
    "\1\236\50\0\4\12\1\0\3\12\2\0\1\237\5\12"+
    "\1\0\1\12\7\0\1\12\1\0\14\12\24\0\4\12"+
    "\1\0\3\12\2\0\6\12\1\0\1\12\7\0\1\12"+
    "\1\0\1\240\13\12\24\0\4\12\1\0\3\12\2\0"+
    "\3\12\1\241\2\12\1\0\1\12\7\0\1\12\1\0"+
    "\14\12\24\0\4\12\1\0\3\12\2\0\6\12\1\0"+
    "\1\12\7\0\1\12\1\0\2\12\1\242\11\12\24\0"+
    "\4\12\1\0\3\12\2\0\6\12\1\0\1\12\7\0"+
    "\1\12\1\0\3\12\1\243\10\12\24\0\4\12\1\0"+
    "\3\12\2\0\1\12\1\244\4\12\1\0\1\12\7\0"+
    "\1\12\1\0\14\12\24\0\4\12\1\0\3\12\2\0"+
    "\6\12\1\0\1\12\7\0\1\12\1\0\10\12\1\245"+
    "\3\12\24\0\4\12\1\0\3\12\2\0\6\12\1\0"+
    "\1\12\7\0\1\12\1\0\3\12\1\246\10\12\24\0"+
    "\4\12\1\0\3\12\2\0\1\12\1\247\4\12\1\0"+
    "\1\12\7\0\1\12\1\0\14\12\22\0\1\230\73\0"+
    "\1\230\11\0\1\250\55\0\73\231\5\0\2\232\1\251"+
    "\1\0\1\204\1\232\4\0\1\251\5\0\1\232\11\0"+
    "\2\232\3\0\1\232\1\0\1\232\1\0\1\204\43\0"+
    "\1\252\67\0\1\253\54\0\1\235\2\0\70\235\1\236"+
    "\2\0\70\236\4\0\4\12\1\0\3\12\2\0\5\12"+
    "\1\254\1\0\1\12\7\0\1\12\1\0\14\12\24\0"+
    "\4\12\1\0\3\12\2\0\6\12\1\0\1\12\7\0"+
    "\1\12\1\0\10\12\1\255\3\12\24\0\4\12\1\0"+
    "\3\12\2\0\6\12\1\0\1\12\7\0\1\12\1\0"+
    "\5\12\1\256\6\12\24\0\4\12\1\0\3\12\2\0"+
    "\3\12\1\257\2\12\1\0\1\12\7\0\1\12\1\0"+
    "\14\12\35\0\1\260\62\0\2\232\1\251\1\146\1\204"+
    "\1\232\2\0\1\146\1\0\1\251\5\0\1\232\11\0"+
    "\2\232\3\0\1\232\1\0\1\232\1\0\1\204\44\0"+
    "\1\261\67\0\1\262\57\0\4\12\1\0\3\12\2\0"+
    "\4\12\1\263\1\12\1\0\1\12\7\0\1\12\1\0"+
    "\14\12\35\0\1\201\100\0\1\235\67\0\1\264\56\0"+
    "\4\12\1\0\3\12\2\0\5\12\1\265\1\0\1\12"+
    "\7\0\1\12\1\0\14\12\41\0\1\266\73\0\1\267"+
    "\73\0\1\236\47\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7670];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\5\0\1\11\3\1\1\11\11\1\1\11"+
    "\1\1\1\11\2\1\3\11\13\1\2\11\1\1\4\11"+
    "\1\1\3\11\3\1\1\0\1\11\3\1\1\0\15\1"+
    "\1\11\1\0\1\11\12\1\11\11\4\0\1\1\2\0"+
    "\2\1\1\11\4\0\21\1\1\0\2\1\1\0\1\1"+
    "\6\0\15\1\2\0\2\1\2\0\13\1\1\0\1\1"+
    "\2\0\4\1\3\0\1\1\1\0\1\1\2\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[183];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private LuaLanguageLevel level;
    public _LuaLexer(LuaLanguageLevel level) {
        this((Reader) null);
        this.level = level;
    }

    private int nBrackets = 0;
    private boolean checkAhead(char c, int offset) {
        return this.zzMarkedPos + offset < this.zzBuffer.length() && this.zzBuffer.charAt(this.zzMarkedPos + offset) == c;
    }

    private boolean checkBlock() {
        nBrackets = 0;
        if (checkAhead('[', 0)) {
            int n = 0;
            while (checkAhead('=', n + 1)) n++;
            if (checkAhead('[', n + 1)) {
                nBrackets = n;
                return true;
            }
        }
        return false;
    }

    private int checkBlockRedundant() {
        int redundant = -1;
        String cs = yytext().toString();
        StringBuilder s = new StringBuilder("]");
        for (int i = 0; i < nBrackets; i++) s.append('=');
        s.append(']');
        int index = cs.indexOf(s.toString());
        if (index > 0)
            redundant = yylength() - index - nBrackets - 2;
        return redundant;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _LuaLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(YYINITIAL); return SHEBANG_CONTENT;
            } 
            // fall through
          case 74: break;
          case 2: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 75: break;
          case 3: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 76: break;
          case 4: 
            { return ID;
            } 
            // fall through
          case 77: break;
          case 5: 
            { return NUMBER;
            } 
            // fall through
          case 78: break;
          case 6: 
            { return PLUS;
            } 
            // fall through
          case 79: break;
          case 7: 
            { return DOT;
            } 
            // fall through
          case 80: break;
          case 8: 
            { return MINUS;
            } 
            // fall through
          case 81: break;
          case 9: 
            { return LCURLY;
            } 
            // fall through
          case 82: break;
          case 10: 
            { return RCURLY;
            } 
            // fall through
          case 83: break;
          case 11: 
            { return LBRACK;
            } 
            // fall through
          case 84: break;
          case 12: 
            { return ASSIGN;
            } 
            // fall through
          case 85: break;
          case 13: 
            { return RBRACK;
            } 
            // fall through
          case 86: break;
          case 14: 
            { yybegin(xDOUBLE_QUOTED_STRING); yypushback(yylength());
            } 
            // fall through
          case 87: break;
          case 15: 
            { yybegin(xSINGLE_QUOTED_STRING); yypushback(yylength());
            } 
            // fall through
          case 88: break;
          case 16: 
            { return GETN;
            } 
            // fall through
          case 89: break;
          case 17: 
            { return GT;
            } 
            // fall through
          case 90: break;
          case 18: 
            { return LT;
            } 
            // fall through
          case 91: break;
          case 19: 
            { return BIT_TILDE;
            } 
            // fall through
          case 92: break;
          case 20: 
            { return MULT;
            } 
            // fall through
          case 93: break;
          case 21: 
            { return MOD;
            } 
            // fall through
          case 94: break;
          case 22: 
            { return DIV;
            } 
            // fall through
          case 95: break;
          case 23: 
            { return LPAREN;
            } 
            // fall through
          case 96: break;
          case 24: 
            { return RPAREN;
            } 
            // fall through
          case 97: break;
          case 25: 
            { return COMMA;
            } 
            // fall through
          case 98: break;
          case 26: 
            { return SEMI;
            } 
            // fall through
          case 99: break;
          case 27: 
            { return COLON;
            } 
            // fall through
          case 100: break;
          case 28: 
            { return EXP;
            } 
            // fall through
          case 101: break;
          case 29: 
            { return BIT_AND;
            } 
            // fall through
          case 102: break;
          case 30: 
            { return BIT_OR;
            } 
            // fall through
          case 103: break;
          case 31: 
            { yybegin(YYINITIAL); return STRING;
            } 
            // fall through
          case 104: break;
          case 32: 
            { yypushback(yylength()); yybegin(xCOMMENT);
            } 
            // fall through
          case 105: break;
          case 33: 
            { return CONCAT;
            } 
            // fall through
          case 106: break;
          case 34: 
            { boolean block = checkBlock();
        if (block) { yypushback(yylength()); yybegin(xBLOCK_COMMENT); }
        else { yypushback(yylength()); yybegin(xCOMMENT); }
            } 
            // fall through
          case 107: break;
          case 35: 
            { return IN;
            } 
            // fall through
          case 108: break;
          case 36: 
            { return IF;
            } 
            // fall through
          case 109: break;
          case 37: 
            { return OR;
            } 
            // fall through
          case 110: break;
          case 38: 
            { return DO;
            } 
            // fall through
          case 111: break;
          case 39: 
            { yybegin(xBLOCK_STRING); yypushback(yylength()); checkBlock();
            } 
            // fall through
          case 112: break;
          case 40: 
            { return EQ;
            } 
            // fall through
          case 113: break;
          case 41: 
            { yybegin(xSHEBANG); return SHEBANG;
            } 
            // fall through
          case 114: break;
          case 42: 
            { return GE;
            } 
            // fall through
          case 115: break;
          case 43: 
            { return BIT_RTRT;
            } 
            // fall through
          case 116: break;
          case 44: 
            { return LE;
            } 
            // fall through
          case 117: break;
          case 45: 
            { return BIT_LTLT;
            } 
            // fall through
          case 118: break;
          case 46: 
            { return NE;
            } 
            // fall through
          case 119: break;
          case 47: 
            { return DOUBLE_DIV;
            } 
            // fall through
          case 120: break;
          case 48: 
            { return DOUBLE_COLON;
            } 
            // fall through
          case 121: break;
          case 49: 
            { yybegin(YYINITIAL);return SHORT_COMMENT;
            } 
            // fall through
          case 122: break;
          case 50: 
            { return ELLIPSIS;
            } 
            // fall through
          case 123: break;
          case 51: 
            { return END;
            } 
            // fall through
          case 124: break;
          case 52: 
            { return NIL;
            } 
            // fall through
          case 125: break;
          case 53: 
            { return NOT;
            } 
            // fall through
          case 126: break;
          case 54: 
            { return AND;
            } 
            // fall through
          case 127: break;
          case 55: 
            { return FOR;
            } 
            // fall through
          case 128: break;
          case 56: 
            { yybegin(YYINITIAL);return DOC_COMMENT;
            } 
            // fall through
          case 129: break;
          case 57: 
            { return ELSE;
            } 
            // fall through
          case 130: break;
          case 58: 
            { if (level.getVersion() < LuaLanguageLevel.LUA52.getVersion()) return ID; else return GOTO;
            } 
            // fall through
          case 131: break;
          case 59: 
            { return TRUE;
            } 
            // fall through
          case 132: break;
          case 60: 
            { return THEN;
            } 
            // fall through
          case 133: break;
          case 61: 
            { int redundant = checkBlockRedundant();
        if (redundant != -1) {
            yypushback(redundant);
            yybegin(YYINITIAL); return STRING;
        } else {
            yybegin(YYINITIAL); return TokenType.BAD_CHARACTER;
        }
            } 
            // fall through
          case 134: break;
          case 62: 
            { int redundant = checkBlockRedundant();
        if (redundant != -1) {
            yypushback(redundant);
            yybegin(YYINITIAL);return BLOCK_COMMENT; }
        else { yybegin(YYINITIAL);return BLOCK_COMMENT; }
            } 
            // fall through
          case 135: break;
          case 63: 
            { return REGION;
            } 
            // fall through
          case 136: break;
          case 64: 
            { return ENDREGION;
            } 
            // fall through
          case 137: break;
          case 65: 
            { return BREAK;
            } 
            // fall through
          case 138: break;
          case 66: 
            { return LOCAL;
            } 
            // fall through
          case 139: break;
          case 67: 
            { return FALSE;
            } 
            // fall through
          case 140: break;
          case 68: 
            { return UNTIL;
            } 
            // fall through
          case 141: break;
          case 69: 
            { return WHILE;
            } 
            // fall through
          case 142: break;
          case 70: 
            { return RETURN;
            } 
            // fall through
          case 143: break;
          case 71: 
            { return REPEAT;
            } 
            // fall through
          case 144: break;
          case 72: 
            { return ELSEIF;
            } 
            // fall through
          case 145: break;
          case 73: 
            { return FUNCTION;
            } 
            // fall through
          case 146: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
