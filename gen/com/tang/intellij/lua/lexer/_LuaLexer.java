/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.tang.intellij.lua.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import com.tang.intellij.lua.lang.LuaLanguageLevel;

import java.io.Reader;

import static com.tang.intellij.lua.psi.LuaTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>lua.flex</tt>
 */
public class _LuaLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int xSHEBANG = 2;
  public static final int xDOUBLE_QUOTED_STRING = 4;
  public static final int xSINGLE_QUOTED_STRING = 6;
  public static final int xBLOCK_STRING = 8;
  public static final int xCOMMENT = 10;
  public static final int xBLOCK_COMMENT = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 14944 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\21\1\44\1\45\1\46\1"+
    "\21\1\47\2\21\1\50\4\21\1\25\1\51\1\52\5\21\2\25\1\53\31\21\1\25\1\54\1\21"+
    "\1\55\40\21\1\56\17\21\1\57\1\60\1\61\1\62\13\21\1\63\10\21\123\25\1\64\7"+
    "\25\1\65\1\66\37\21\1\25\1\66\u0582\21\1\67\u017f\21");

  /* The ZZ_CMAP_Y table has 3584 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1"+
    "\17\3\0\1\20\1\21\1\22\1\23\2\10\1\24\3\10\1\24\71\10\1\25\1\10\1\26\1\27"+
    "\1\30\1\31\2\27\16\0\1\32\1\33\1\34\1\35\2\10\1\36\11\10\1\37\21\10\1\40\1"+
    "\41\23\10\1\27\1\42\3\10\1\24\1\43\1\42\4\10\1\44\1\45\4\0\1\46\1\47\1\27"+
    "\3\10\2\50\1\27\1\51\1\52\1\0\1\53\5\10\1\54\3\0\1\55\1\56\13\10\1\57\1\46"+
    "\1\60\1\61\1\0\1\62\1\27\1\63\1\64\3\10\3\0\1\65\12\10\1\66\1\0\1\67\1\27"+
    "\1\0\1\70\3\10\1\54\1\71\1\23\2\10\1\66\1\72\1\73\1\74\2\27\3\10\1\75\10\27"+
    "\1\76\1\30\6\27\1\77\2\0\1\100\1\101\6\10\1\102\2\0\1\103\1\10\1\104\1\0\2"+
    "\42\1\105\1\106\1\107\2\10\1\76\1\110\1\111\1\112\1\113\1\63\1\114\1\104\1"+
    "\0\1\115\1\52\1\105\1\116\1\107\2\10\1\76\1\117\1\120\1\121\1\122\1\123\1"+
    "\124\1\125\1\0\1\126\1\27\1\105\1\37\1\36\2\10\1\76\1\127\1\111\1\46\1\130"+
    "\1\131\1\27\1\104\1\0\1\43\1\27\1\105\1\106\1\107\2\10\1\76\1\127\1\111\1"+
    "\112\1\122\1\125\1\114\1\104\1\0\1\43\1\27\1\132\1\133\1\134\1\135\1\136\1"+
    "\133\1\10\1\137\1\140\1\141\1\142\1\27\1\125\1\0\1\27\1\43\1\105\1\32\1\76"+
    "\2\10\1\76\1\143\1\144\1\145\1\141\1\146\1\26\1\104\1\0\2\27\1\147\1\32\1"+
    "\76\2\10\1\76\1\143\1\111\1\145\1\141\1\146\1\34\1\104\1\0\1\150\1\27\1\147"+
    "\1\32\1\76\4\10\1\151\1\145\1\152\1\63\1\27\1\104\1\0\1\27\1\41\1\147\1\10"+
    "\1\24\1\41\2\10\1\36\1\153\1\24\1\154\1\155\1\0\2\27\1\156\1\27\1\42\5\10"+
    "\1\157\1\160\1\161\1\100\1\0\1\162\4\27\1\163\1\164\1\165\1\42\1\166\1\167"+
    "\1\157\1\170\1\171\1\172\1\0\1\173\4\27\1\131\2\27\1\162\1\0\1\162\1\174\1"+
    "\175\1\10\1\42\3\10\1\30\1\45\1\0\1\145\1\176\1\0\1\45\3\0\1\51\1\177\7\27"+
    "\5\10\1\54\1\0\1\200\1\0\1\162\1\66\1\201\1\202\1\203\1\204\1\10\1\205\1\206"+
    "\1\0\1\172\4\10\1\37\1\22\5\10\1\207\51\10\1\134\1\24\1\134\5\10\1\134\4\10"+
    "\1\134\1\24\1\134\1\10\1\24\7\10\1\134\10\10\1\210\4\27\2\10\2\27\12\10\1"+
    "\30\1\27\1\42\114\10\1\106\2\10\1\211\2\10\1\50\11\10\1\133\1\131\1\27\1\10"+
    "\1\32\1\212\1\27\2\10\1\212\1\27\2\10\1\213\1\27\1\10\1\32\1\214\1\27\6\10"+
    "\1\215\3\0\1\216\1\217\1\0\1\162\3\27\1\220\1\0\1\162\13\10\1\27\5\10\1\221"+
    "\10\10\1\222\1\27\3\10\1\30\1\0\1\2\1\0\1\2\1\125\1\0\3\10\1\222\1\30\1\27"+
    "\5\10\1\115\2\0\1\56\1\162\1\0\1\162\4\27\2\10\1\161\1\2\6\10\1\176\1\100"+
    "\3\0\1\112\1\0\1\162\1\0\1\162\1\44\13\27\1\223\5\10\1\215\1\0\1\223\1\115"+
    "\1\0\1\162\1\27\1\224\1\2\1\27\1\225\3\10\1\103\1\203\1\0\1\70\4\10\1\66\1"+
    "\0\1\2\1\27\4\10\1\215\2\0\1\27\1\0\1\226\1\0\1\70\3\10\1\222\12\27\1\227"+
    "\2\0\1\230\1\231\1\27\30\10\4\0\1\100\2\27\1\77\42\10\2\222\4\10\2\222\1\10"+
    "\1\232\3\10\1\222\6\10\1\32\1\171\1\233\1\30\1\234\1\115\1\10\1\30\1\233\1"+
    "\30\1\235\1\236\3\27\1\237\1\27\1\44\1\131\1\27\1\240\1\241\1\51\1\242\1\43"+
    "\1\44\2\27\1\10\1\30\3\10\1\50\2\27\1\0\1\51\1\243\1\0\1\244\1\27\1\245\1"+
    "\41\1\153\1\246\1\31\1\247\1\10\1\250\1\251\1\252\2\27\5\10\1\131\116\27\5"+
    "\10\1\24\5\10\1\24\20\10\1\30\1\253\1\254\1\27\4\10\1\37\1\22\7\10\1\44\1"+
    "\27\1\63\2\10\1\24\1\27\10\24\4\0\5\27\1\44\72\27\1\255\3\27\1\42\1\205\1"+
    "\246\1\30\1\42\11\10\1\24\1\256\1\42\12\10\1\207\1\251\4\10\1\222\1\42\12"+
    "\10\1\24\2\27\3\10\1\50\6\27\170\10\1\222\11\27\71\10\1\30\6\27\21\10\1\30"+
    "\10\27\5\10\1\222\41\10\1\30\2\10\1\0\1\254\2\27\5\10\1\161\1\77\1\257\3\10"+
    "\1\63\12\10\1\162\3\27\1\44\1\10\1\41\14\10\1\260\1\115\1\27\1\10\1\50\11"+
    "\27\1\10\1\261\1\262\2\10\1\54\2\27\1\131\6\10\1\115\1\27\1\70\5\10\1\215"+
    "\1\0\1\51\1\27\1\0\1\162\2\0\1\70\1\52\1\0\1\70\2\10\1\66\1\172\2\10\1\161"+
    "\1\0\1\2\1\27\3\10\1\30\1\101\5\10\1\54\1\0\1\244\1\44\1\0\1\162\4\27\5\10"+
    "\1\103\1\100\1\27\1\262\1\263\1\0\1\162\2\10\1\24\1\264\6\10\1\202\1\265\1"+
    "\221\2\27\1\266\1\10\1\54\1\267\1\27\3\270\1\27\2\24\22\27\4\10\1\54\1\271"+
    "\1\0\1\162\64\10\1\115\1\27\2\10\1\24\1\272\5\10\1\115\40\27\55\10\1\222\15"+
    "\10\1\26\4\27\1\24\1\27\1\272\1\273\1\10\1\76\1\24\1\171\1\274\15\10\1\26"+
    "\3\27\1\272\54\10\1\222\2\27\10\10\1\41\6\10\5\27\1\10\1\30\2\0\2\27\1\100"+
    "\1\27\1\136\2\27\1\251\3\27\1\43\1\32\20\10\1\275\1\240\1\27\1\0\1\162\1\42"+
    "\2\10\1\116\1\42\2\10\1\50\1\276\12\10\1\24\3\41\1\277\1\300\2\27\1\301\1"+
    "\10\1\143\2\10\1\24\2\10\1\302\1\10\1\222\1\10\1\222\4\27\17\10\1\50\10\27"+
    "\6\10\1\30\20\27\1\303\20\27\3\10\1\30\6\10\1\131\5\27\3\10\1\24\2\27\3\10"+
    "\1\50\6\27\3\10\1\222\4\10\1\115\1\10\1\246\5\27\23\10\1\222\1\0\1\162\52"+
    "\27\1\222\1\76\4\10\1\37\1\304\2\10\1\222\25\27\2\10\1\222\1\27\3\10\1\26"+
    "\10\27\7\10\1\276\10\27\1\305\1\77\1\143\1\42\2\10\1\115\1\121\4\27\3\10\1"+
    "\30\20\27\6\10\1\222\1\27\2\10\1\222\1\27\2\10\1\50\21\27\11\10\1\131\66\27"+
    "\1\225\6\10\1\0\1\100\3\27\1\125\1\0\2\27\1\225\5\10\1\0\1\306\2\27\3\10\1"+
    "\131\1\0\1\162\1\225\3\10\1\161\1\0\1\145\1\0\10\27\1\225\5\10\1\54\1\0\1"+
    "\307\1\27\1\0\1\162\24\27\5\10\1\54\1\0\1\27\1\0\1\162\46\27\55\10\1\24\22"+
    "\27\14\10\1\50\63\27\5\10\1\24\72\27\7\10\1\131\130\27\10\10\1\30\1\27\1\103"+
    "\4\0\1\100\1\27\1\63\1\225\1\10\14\27\1\26\153\27\1\310\1\311\2\0\1\312\1"+
    "\2\3\27\1\313\22\27\1\314\67\27\12\10\1\32\10\10\1\32\1\315\1\316\1\10\1\317"+
    "\1\143\7\10\1\37\1\320\2\32\3\10\1\321\1\171\1\41\1\76\51\10\1\222\3\10\1"+
    "\76\2\10\1\207\3\10\1\207\2\10\1\32\3\10\1\32\2\10\1\24\3\10\1\24\3\10\1\76"+
    "\3\10\1\76\2\10\1\207\1\322\6\0\1\143\3\10\1\163\1\42\1\207\1\323\1\245\1"+
    "\324\1\163\1\232\1\163\2\207\1\124\1\10\1\36\1\10\1\115\1\325\1\36\1\10\1"+
    "\115\50\27\32\10\1\24\5\27\106\10\1\30\1\27\33\10\1\222\74\27\1\123\3\27\14"+
    "\0\20\27\36\0\2\27");

  /* The ZZ_CMAP_A table has 1712 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\36\1\3\1\2\1\0\1\3\1\1\6\36\4\35\1\3\1\55\1\33\1\54\1\4\1\62\1\72\1\37"+
    "\1\64\1\65\1\61\1\11\1\66\1\16\1\15\1\63\1\13\11\6\1\70\1\67\1\57\1\31\1\56"+
    "\2\35\4\7\1\10\1\7\11\4\1\12\7\4\1\14\2\4\1\30\1\34\1\32\1\71\1\4\1\35\1\40"+
    "\1\41\1\47\1\26\1\20\1\45\1\21\1\52\1\22\1\4\1\42\1\43\1\4\1\24\1\23\1\51"+
    "\1\4\1\17\1\44\1\50\1\46\1\4\1\53\1\14\2\4\1\25\1\73\1\27\1\60\6\36\1\5\2"+
    "\36\1\0\1\35\4\4\4\35\1\4\2\35\1\36\7\35\1\4\4\35\1\4\5\35\7\4\1\35\2\4\4"+
    "\35\4\4\16\35\5\4\7\35\1\4\1\35\1\4\1\35\5\4\1\35\2\4\2\35\4\4\10\35\1\4\1"+
    "\35\3\4\1\35\1\4\1\35\4\4\1\35\13\4\1\35\3\4\1\35\5\36\2\35\6\4\1\35\7\4\1"+
    "\35\1\4\15\35\1\4\1\35\15\36\1\35\1\36\1\35\2\36\1\35\2\36\1\35\1\36\3\4\5"+
    "\35\5\36\6\35\1\4\4\35\3\36\5\35\3\4\7\36\4\35\2\4\1\36\13\4\1\35\1\4\7\36"+
    "\2\4\2\36\1\35\4\36\2\4\2\36\3\4\2\35\1\4\7\35\1\36\1\4\1\36\6\4\3\36\2\35"+
    "\11\4\3\36\1\4\6\35\2\36\6\4\4\36\2\4\2\35\2\36\1\4\11\36\1\4\3\36\1\4\5\36"+
    "\2\35\1\4\3\36\4\35\1\4\1\35\6\4\4\35\13\36\1\35\4\36\6\4\3\36\1\4\2\36\1"+
    "\4\7\36\2\4\2\36\2\35\2\36\1\35\3\36\1\35\10\4\2\35\2\4\2\35\6\4\1\35\1\4"+
    "\3\35\4\4\2\35\1\36\1\4\7\36\2\35\2\36\2\35\3\36\1\4\5\35\2\4\1\35\5\4\4\35"+
    "\3\4\4\35\2\4\1\35\2\4\1\35\2\4\1\35\2\4\2\35\1\36\1\35\5\36\4\35\2\36\2\35"+
    "\3\36\3\35\1\36\7\35\4\4\1\35\1\4\7\35\4\36\3\4\1\36\2\35\1\4\1\35\2\4\1\35"+
    "\3\4\2\36\1\35\3\36\2\35\1\4\11\35\1\36\1\4\1\35\6\4\3\35\3\4\1\35\4\4\3\35"+
    "\2\4\1\35\1\4\1\35\2\4\3\35\2\4\3\35\2\4\4\35\5\36\3\35\3\36\1\35\4\36\2\35"+
    "\1\4\6\35\1\36\4\4\1\35\5\4\3\35\1\4\7\36\1\35\2\36\5\35\2\36\3\35\2\36\1"+
    "\35\3\4\1\35\2\4\5\35\3\4\2\35\1\4\3\36\1\35\4\36\1\4\1\35\4\4\1\35\1\4\4"+
    "\35\1\36\4\35\6\36\1\35\1\36\3\35\2\36\4\35\1\4\1\36\2\4\7\36\4\35\10\4\3"+
    "\36\7\35\2\4\1\35\1\4\2\35\2\4\1\35\1\4\2\35\1\4\6\35\4\4\1\35\3\4\1\35\1"+
    "\4\1\35\1\4\2\35\2\4\1\35\3\4\2\36\1\35\2\36\1\4\2\35\5\4\1\35\1\4\1\35\6"+
    "\36\2\35\2\36\2\35\4\4\5\35\1\36\1\35\1\36\1\35\1\36\4\35\2\36\5\4\3\36\6"+
    "\35\1\36\1\35\7\36\1\4\2\36\4\4\3\36\1\4\3\36\2\4\7\36\3\4\4\36\5\4\14\36"+
    "\1\4\1\36\3\4\1\35\7\4\2\35\3\36\1\0\11\4\3\36\3\35\2\4\2\36\4\35\1\4\1\35"+
    "\2\36\4\35\4\4\10\36\3\35\1\4\3\35\2\4\1\36\5\35\3\36\2\35\1\4\1\36\1\4\5"+
    "\35\6\4\2\35\5\36\3\4\3\35\10\36\5\4\2\36\3\35\3\4\3\36\1\35\5\36\4\4\1\36"+
    "\4\4\3\36\2\4\2\35\1\4\1\35\1\4\1\35\1\4\1\35\1\4\2\35\3\4\1\35\6\4\2\35\2"+
    "\4\13\0\5\36\2\0\5\36\1\0\4\35\1\4\12\35\1\0\2\35\6\36\1\35\1\36\3\35\4\36"+
    "\11\35\1\4\4\35\1\4\1\35\5\4\2\35\1\4\1\35\4\4\1\35\3\4\2\35\4\4\5\35\5\4"+
    "\4\35\1\4\4\35\4\4\3\36\2\4\4\35\1\0\4\35\3\4\1\35\2\36\2\35\3\4\6\36\1\35"+
    "\2\4\2\35\4\4\1\35\2\4\1\36\3\4\1\36\4\4\1\36\10\4\2\36\4\35\1\4\1\36\4\35"+
    "\1\36\5\4\2\36\3\35\3\4\4\35\3\4\2\36\2\35\6\4\1\35\3\36\1\35\2\36\5\35\5"+
    "\4\5\35\1\4\1\36\3\4\1\35\2\4\1\35\7\4\2\35\1\36\6\35\2\4\2\35\3\4\3\35\2"+
    "\4\3\35\2\4\2\35\3\36\4\35\3\4\1\35\2\4\1\35\1\4\5\35\1\36\2\35\1\4\3\35\1"+
    "\4\2\35\2\4\3\36\1\35\2\36\1\35\3\36\2\35\1\36\2\35\1\36\4\4\10\35\5\36\3"+
    "\35\6\36\2\35\3\36\2\35\4\36\4\35\3\36\5\35\1\4\2\35\2\4\2\35\4\4\1\35\4\4"+
    "\1\35\1\4\1\35\6\4\2\35\5\4\1\35\4\4\1\35\4\4\2\35\2\36\1\35\1\4\1\35\1\4"+
    "\5\35\1\4\1\35\1\4\1\35\3\4\1\35\3\4\1\35\3\4");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\5\0\1\2\1\3\1\4\1\5\1\6"+
    "\1\5\1\7\1\10\6\4\1\11\1\4\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\7\4\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\2\37\1\2\1\0\2\40"+
    "\2\5\1\0\1\5\1\41\1\42\4\4\1\43\1\44"+
    "\1\45\2\4\1\46\1\47\1\0\1\50\12\4\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\37"+
    "\4\0\1\61\2\0\2\5\1\62\4\0\2\4\1\63"+
    "\2\4\1\64\1\65\1\66\2\4\1\67\6\4\1\0"+
    "\1\61\1\70\1\0\1\5\6\0\2\4\1\71\1\72"+
    "\5\4\1\73\1\74\1\4\1\75\2\0\1\76\1\5"+
    "\2\0\1\77\1\100\3\4\1\101\1\102\1\103\1\4"+
    "\1\104\1\105\1\0\1\5\2\0\1\106\1\107\1\110"+
    "\1\4\3\0\1\4\1\0\1\111\2\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[183];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\u012c\0\u0168\0\u01a4"+
    "\0\u01e0\0\u021c\0\u0258\0\u01a4\0\u0294\0\u02d0\0\u030c\0\u0348"+
    "\0\u0384\0\u03c0\0\u03fc\0\u0438\0\u0474\0\u01a4\0\u04b0\0\u01a4"+
    "\0\u04ec\0\u0528\0\u01a4\0\u01a4\0\u01a4\0\u0564\0\u05a0\0\u05dc"+
    "\0\u0618\0\u0654\0\u0690\0\u06cc\0\u0708\0\u0744\0\u0780\0\u07bc"+
    "\0\u01a4\0\u01a4\0\u07f8\0\u01a4\0\u01a4\0\u01a4\0\u01a4\0\u0834"+
    "\0\u01a4\0\u01a4\0\u01a4\0\u0870\0\u08ac\0\u08e8\0\u0924\0\u01a4"+
    "\0\u0960\0\u099c\0\u09d8\0\u0a14\0\u0a50\0\u0a8c\0\u0ac8\0\u0b04"+
    "\0\u0b40\0\u0b7c\0\u0bb8\0\u021c\0\u021c\0\u021c\0\u0bf4\0\u0c30"+
    "\0\u021c\0\u01a4\0\u04ec\0\u01a4\0\u0c6c\0\u0ca8\0\u0ce4\0\u0d20"+
    "\0\u0d5c\0\u0d98\0\u0dd4\0\u0e10\0\u0e4c\0\u0e88\0\u01a4\0\u01a4"+
    "\0\u01a4\0\u01a4\0\u01a4\0\u01a4\0\u01a4\0\u01a4\0\u01a4\0\u0ec4"+
    "\0\u0f00\0\u0f3c\0\u08e8\0\u0f78\0\u0fb4\0\u0a50\0\u0ff0\0\u102c"+
    "\0\u01a4\0\u1068\0\u10a4\0\u10e0\0\u111c\0\u1158\0\u1194\0\u021c"+
    "\0\u11d0\0\u120c\0\u021c\0\u021c\0\u021c\0\u1248\0\u1284\0\u021c"+
    "\0\u12c0\0\u12fc\0\u1338\0\u1374\0\u13b0\0\u13ec\0\u1428\0\u1464"+
    "\0\u14a0\0\u14dc\0\u1518\0\u1554\0\u1590\0\u15cc\0\u1608\0\u1644"+
    "\0\u1680\0\u16bc\0\u16f8\0\u1734\0\u021c\0\u1770\0\u17ac\0\u17e8"+
    "\0\u1824\0\u1860\0\u021c\0\u021c\0\u189c\0\u1428\0\u18d8\0\u1914"+
    "\0\u1950\0\u198c\0\u19c8\0\u1a04\0\u1a40\0\u1a7c\0\u1ab8\0\u1af4"+
    "\0\u1b30\0\u021c\0\u021c\0\u021c\0\u1b6c\0\u021c\0\u021c\0\u1ba8"+
    "\0\u1be4\0\u1c20\0\u1c5c\0\u021c\0\u021c\0\u021c\0\u1c98\0\u1cd4"+
    "\0\u1d10\0\u1d4c\0\u1d88\0\u1dc4\0\u021c\0\u1e00\0\u1e3c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[183];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\3\11\1\12\1\10\1\13\2\12\1\14\1\12"+
    "\1\15\1\12\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\3\10\1\35\1\36\1\37\1\12\1\40\1\12"+
    "\1\41\1\42\1\12\1\43\2\12\1\44\1\45\1\10"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\2\2\0"+
    "\71\2\33\0\1\64\77\0\1\65\34\0\30\10\1\66"+
    "\43\10\16\0\1\67\55\0\16\70\1\71\55\70\75\0"+
    "\3\11\74\0\5\12\1\0\3\12\2\0\6\12\1\0"+
    "\1\12\7\0\1\12\1\0\14\12\26\0\1\13\1\0"+
    "\1\72\2\0\1\13\1\0\1\73\2\0\1\72\61\0"+
    "\1\13\1\0\1\72\2\0\1\13\1\74\1\73\2\0"+
    "\1\72\61\0\1\75\4\0\1\75\1\0\1\76\74\0"+
    "\1\77\61\0\5\12\1\0\3\12\2\0\1\12\1\100"+
    "\4\12\1\0\1\12\7\0\1\12\1\0\14\12\24\0"+
    "\5\12\1\0\3\12\2\0\5\12\1\101\1\0\1\12"+
    "\7\0\1\12\1\0\3\12\1\102\10\12\24\0\5\12"+
    "\1\0\3\12\2\0\4\12\1\103\1\12\1\0\1\12"+
    "\7\0\1\12\1\0\14\12\24\0\5\12\1\0\3\12"+
    "\2\0\5\12\1\104\1\0\1\12\7\0\1\12\1\0"+
    "\5\12\1\105\6\12\24\0\5\12\1\0\3\12\2\0"+
    "\1\106\5\12\1\0\1\12\7\0\1\12\1\0\14\12"+
    "\24\0\5\12\1\0\3\12\2\0\3\12\1\107\1\110"+
    "\1\12\1\0\1\12\7\0\1\12\1\0\14\12\24\0"+
    "\5\12\1\0\3\12\2\0\4\12\1\111\1\12\1\0"+
    "\1\12\7\0\1\12\1\0\14\12\50\0\1\112\1\113"+
    "\73\0\1\114\46\0\5\12\1\0\3\12\2\0\5\12"+
    "\1\115\1\0\1\12\7\0\1\12\1\0\14\12\24\0"+
    "\5\12\1\0\3\12\2\0\1\116\5\12\1\0\1\12"+
    "\7\0\1\12\1\0\14\12\24\0\5\12\1\0\3\12"+
    "\2\0\4\12\1\117\1\12\1\0\1\12\7\0\1\12"+
    "\1\0\14\12\24\0\5\12\1\0\3\12\2\0\4\12"+
    "\1\120\1\12\1\0\1\12\7\0\1\12\1\0\1\121"+
    "\5\12\1\122\5\12\24\0\5\12\1\0\3\12\2\0"+
    "\5\12\1\123\1\0\1\12\7\0\1\12\1\0\14\12"+
    "\24\0\5\12\1\0\3\12\2\0\1\124\5\12\1\0"+
    "\1\12\7\0\1\12\1\0\12\12\1\125\1\12\24\0"+
    "\5\12\1\0\3\12\2\0\6\12\1\0\1\12\7\0"+
    "\1\12\1\0\12\12\1\126\1\12\75\0\1\127\47\0"+
    "\1\130\24\0\1\131\46\0\1\132\25\0\1\133\45\0"+
    "\1\134\125\0\1\135\100\0\1\136\3\0\33\64\1\137"+
    "\1\140\37\64\34\65\1\141\2\65\1\137\34\65\30\0"+
    "\1\142\1\143\60\0\1\144\73\0\1\145\63\0\1\75"+
    "\2\0\1\146\1\0\1\75\2\0\1\146\63\0\1\147"+
    "\4\0\1\147\66\0\3\150\2\0\1\150\4\0\1\150"+
    "\5\0\1\150\11\0\2\150\3\0\1\150\1\0\1\150"+
    "\32\0\1\75\4\0\1\75\75\0\1\151\75\0\1\152"+
    "\1\153\4\0\1\154\1\0\1\155\50\0\5\12\1\0"+
    "\3\12\2\0\6\12\1\0\1\12\7\0\1\12\1\0"+
    "\10\12\1\156\1\157\2\12\24\0\5\12\1\0\3\12"+
    "\2\0\6\12\1\0\1\160\7\0\1\12\1\0\14\12"+
    "\24\0\5\12\1\0\3\12\2\0\6\12\1\0\1\12"+
    "\7\0\1\12\1\0\4\12\1\161\7\12\24\0\5\12"+
    "\1\0\3\12\2\0\6\12\1\0\1\12\7\0\1\12"+
    "\1\0\10\12\1\162\3\12\24\0\5\12\1\0\3\12"+
    "\2\0\6\12\1\0\1\12\7\0\1\12\1\0\3\12"+
    "\1\163\10\12\24\0\5\12\1\0\3\12\2\0\6\12"+
    "\1\0\1\12\7\0\1\12\1\0\10\12\1\164\3\12"+
    "\24\0\5\12\1\0\3\12\2\0\6\12\1\0\1\165"+
    "\7\0\1\12\1\0\14\12\24\0\5\12\1\0\3\12"+
    "\2\0\1\12\1\166\4\12\1\0\1\12\7\0\1\12"+
    "\1\0\14\12\24\0\5\12\1\0\3\12\2\0\6\12"+
    "\1\0\1\12\7\0\1\12\1\0\7\12\1\167\4\12"+
    "\24\0\5\12\1\0\3\12\2\0\1\170\5\12\1\0"+
    "\1\12\7\0\1\12\1\0\14\12\24\0\5\12\1\0"+
    "\3\12\2\0\6\12\1\0\1\12\7\0\1\12\1\0"+
    "\3\12\1\171\10\12\24\0\5\12\1\0\3\12\2\0"+
    "\5\12\1\172\1\0\1\12\7\0\1\12\1\0\14\12"+
    "\24\0\5\12\1\0\3\12\2\0\6\12\1\0\1\12"+
    "\7\0\1\12\1\0\10\12\1\173\3\12\24\0\5\12"+
    "\1\0\3\12\2\0\6\12\1\0\1\12\7\0\1\12"+
    "\1\0\6\12\1\174\5\12\24\0\5\12\1\0\3\12"+
    "\2\0\1\12\1\175\4\12\1\0\1\12\7\0\1\12"+
    "\1\0\14\12\24\0\5\12\1\0\3\12\2\0\3\12"+
    "\1\176\2\12\1\0\1\12\7\0\1\12\1\0\14\12"+
    "\21\0\2\64\1\0\1\64\1\0\66\64\1\0\2\65"+
    "\1\0\1\65\1\0\66\65\32\142\1\177\41\142\1\200"+
    "\2\0\13\200\1\201\55\200\30\0\1\202\51\0\1\147"+
    "\1\0\1\72\2\0\1\147\4\0\1\72\61\0\2\150"+
    "\1\203\1\0\1\204\1\150\1\0\1\205\2\0\1\203"+
    "\5\0\1\150\11\0\2\150\3\0\1\150\1\0\1\150"+
    "\1\0\1\204\42\0\1\206\77\0\1\207\74\0\1\210"+
    "\75\0\1\211\50\0\5\12\1\0\3\12\2\0\6\12"+
    "\1\0\1\12\7\0\1\12\1\0\6\12\1\212\5\12"+
    "\24\0\5\12\1\0\3\12\2\0\1\12\1\213\4\12"+
    "\1\0\1\12\7\0\1\12\1\0\14\12\24\0\5\12"+
    "\1\0\3\12\2\0\1\12\1\214\4\12\1\0\1\12"+
    "\7\0\1\12\1\0\14\12\24\0\5\12\1\0\3\12"+
    "\2\0\4\12\1\215\1\12\1\0\1\12\7\0\1\12"+
    "\1\0\14\12\24\0\5\12\1\0\3\12\2\0\6\12"+
    "\1\0\1\12\7\0\1\12\1\0\1\216\13\12\24\0"+
    "\5\12\1\0\3\12\2\0\6\12\1\0\1\12\7\0"+
    "\1\12\1\0\1\217\13\12\24\0\5\12\1\0\3\12"+
    "\2\0\6\12\1\0\1\12\7\0\1\12\1\0\4\12"+
    "\1\220\7\12\24\0\5\12\1\0\3\12\2\0\6\12"+
    "\1\0\1\12\7\0\1\12\1\0\7\12\1\221\4\12"+
    "\24\0\5\12\1\0\3\12\2\0\3\12\1\222\2\12"+
    "\1\0\1\12\7\0\1\12\1\0\14\12\24\0\5\12"+
    "\1\0\3\12\2\0\1\12\1\223\4\12\1\0\1\12"+
    "\7\0\1\12\1\0\14\12\24\0\5\12\1\0\3\12"+
    "\2\0\5\12\1\224\1\0\1\12\7\0\1\12\1\0"+
    "\14\12\24\0\5\12\1\0\3\12\2\0\6\12\1\0"+
    "\1\12\7\0\1\12\1\0\3\12\1\225\10\12\20\0"+
    "\31\142\1\177\1\226\41\142\1\200\2\0\71\200\1\201"+
    "\1\227\1\230\71\201\30\0\1\231\1\202\50\0\2\150"+
    "\1\203\1\146\1\204\1\150\1\0\1\205\1\146\1\0"+
    "\1\203\5\0\1\150\11\0\2\150\3\0\1\150\1\0"+
    "\1\150\1\0\1\204\33\0\1\146\4\0\1\146\63\0"+
    "\3\232\2\0\1\232\4\0\1\232\5\0\1\232\11\0"+
    "\2\232\3\0\1\232\1\0\1\232\45\0\1\233\100\0"+
    "\1\234\72\0\1\235\75\0\1\236\50\0\5\12\1\0"+
    "\3\12\2\0\1\237\5\12\1\0\1\12\7\0\1\12"+
    "\1\0\14\12\24\0\5\12\1\0\3\12\2\0\6\12"+
    "\1\0\1\12\7\0\1\12\1\0\1\240\13\12\24\0"+
    "\5\12\1\0\3\12\2\0\3\12\1\241\2\12\1\0"+
    "\1\12\7\0\1\12\1\0\14\12\24\0\5\12\1\0"+
    "\3\12\2\0\6\12\1\0\1\12\7\0\1\12\1\0"+
    "\2\12\1\242\11\12\24\0\5\12\1\0\3\12\2\0"+
    "\6\12\1\0\1\12\7\0\1\12\1\0\3\12\1\243"+
    "\10\12\24\0\5\12\1\0\3\12\2\0\1\12\1\244"+
    "\4\12\1\0\1\12\7\0\1\12\1\0\14\12\24\0"+
    "\5\12\1\0\3\12\2\0\6\12\1\0\1\12\7\0"+
    "\1\12\1\0\10\12\1\245\3\12\24\0\5\12\1\0"+
    "\3\12\2\0\6\12\1\0\1\12\7\0\1\12\1\0"+
    "\3\12\1\246\10\12\24\0\5\12\1\0\3\12\2\0"+
    "\1\12\1\247\4\12\1\0\1\12\7\0\1\12\1\0"+
    "\14\12\22\0\1\230\74\0\1\230\12\0\1\250\55\0"+
    "\74\231\6\0\2\232\1\251\1\0\1\204\1\232\4\0"+
    "\1\251\5\0\1\232\11\0\2\232\3\0\1\232\1\0"+
    "\1\232\1\0\1\204\44\0\1\252\70\0\1\253\54\0"+
    "\1\235\2\0\71\235\1\236\2\0\71\236\4\0\5\12"+
    "\1\0\3\12\2\0\5\12\1\254\1\0\1\12\7\0"+
    "\1\12\1\0\14\12\24\0\5\12\1\0\3\12\2\0"+
    "\6\12\1\0\1\12\7\0\1\12\1\0\10\12\1\255"+
    "\3\12\24\0\5\12\1\0\3\12\2\0\6\12\1\0"+
    "\1\12\7\0\1\12\1\0\5\12\1\256\6\12\24\0"+
    "\5\12\1\0\3\12\2\0\3\12\1\257\2\12\1\0"+
    "\1\12\7\0\1\12\1\0\14\12\36\0\1\260\63\0"+
    "\2\232\1\251\1\146\1\204\1\232\2\0\1\146\1\0"+
    "\1\251\5\0\1\232\11\0\2\232\3\0\1\232\1\0"+
    "\1\232\1\0\1\204\45\0\1\261\70\0\1\262\57\0"+
    "\5\12\1\0\3\12\2\0\4\12\1\263\1\12\1\0"+
    "\1\12\7\0\1\12\1\0\14\12\36\0\1\201\101\0"+
    "\1\235\70\0\1\264\56\0\5\12\1\0\3\12\2\0"+
    "\5\12\1\265\1\0\1\12\7\0\1\12\1\0\14\12"+
    "\42\0\1\266\74\0\1\267\74\0\1\236\47\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7800];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\5\0\1\11\3\1\1\11\11\1\1\11"+
    "\1\1\1\11\2\1\3\11\13\1\2\11\1\1\4\11"+
    "\1\1\3\11\3\1\1\0\1\11\3\1\1\0\15\1"+
    "\1\11\1\0\1\11\12\1\11\11\4\0\1\1\2\0"+
    "\2\1\1\11\4\0\21\1\1\0\2\1\1\0\1\1"+
    "\6\0\15\1\2\0\2\1\2\0\13\1\1\0\1\1"+
    "\2\0\4\1\3\0\1\1\1\0\1\1\2\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[183];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private LuaLanguageLevel level;
    public _LuaLexer(LuaLanguageLevel level) {
        this((Reader) null);
        this.level = level;
    }

    private int nBrackets = 0;
    private boolean checkAhead(char c, int offset) {
        return this.zzMarkedPos + offset >= this.zzBuffer.length() ? false : this.zzBuffer.charAt(this.zzMarkedPos + offset) == c;
    }

    private boolean checkBlock() {
        nBrackets = 0;
        if (checkAhead('[', 0)) {
            int n = 0;
            while (checkAhead('=', n + 1)) n++;
            if (checkAhead('[', n + 1)) {
                nBrackets = n;
                return true;
            }
        }
        return false;
    }

    private int checkBlockRedundant() {
        int redundant = -1;
        String cs = yytext().toString();
        StringBuilder s = new StringBuilder("]");
        for (int i = 0; i < nBrackets; i++) s.append('=');
        s.append(']');
        int index = cs.indexOf(s.toString());
        if (index > 0)
            redundant = yylength() - index - nBrackets - 2;
        return redundant;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _LuaLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(YYINITIAL); return SHEBANG_CONTENT;
            } 
            // fall through
          case 74: break;
          case 2: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 75: break;
          case 3: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 76: break;
          case 4: 
            { return ID;
            } 
            // fall through
          case 77: break;
          case 5: 
            { return NUMBER;
            } 
            // fall through
          case 78: break;
          case 6: 
            { return PLUS;
            } 
            // fall through
          case 79: break;
          case 7: 
            { return DOT;
            } 
            // fall through
          case 80: break;
          case 8: 
            { return MINUS;
            } 
            // fall through
          case 81: break;
          case 9: 
            { return LCURLY;
            } 
            // fall through
          case 82: break;
          case 10: 
            { return RCURLY;
            } 
            // fall through
          case 83: break;
          case 11: 
            { return LBRACK;
            } 
            // fall through
          case 84: break;
          case 12: 
            { return ASSIGN;
            } 
            // fall through
          case 85: break;
          case 13: 
            { return RBRACK;
            } 
            // fall through
          case 86: break;
          case 14: 
            { yybegin(xDOUBLE_QUOTED_STRING); yypushback(yylength());
            } 
            // fall through
          case 87: break;
          case 15: 
            { yybegin(xSINGLE_QUOTED_STRING); yypushback(yylength());
            } 
            // fall through
          case 88: break;
          case 16: 
            { return GETN;
            } 
            // fall through
          case 89: break;
          case 17: 
            { return GT;
            } 
            // fall through
          case 90: break;
          case 18: 
            { return LT;
            } 
            // fall through
          case 91: break;
          case 19: 
            { return BIT_TILDE;
            } 
            // fall through
          case 92: break;
          case 20: 
            { return MULT;
            } 
            // fall through
          case 93: break;
          case 21: 
            { return MOD;
            } 
            // fall through
          case 94: break;
          case 22: 
            { return DIV;
            } 
            // fall through
          case 95: break;
          case 23: 
            { return LPAREN;
            } 
            // fall through
          case 96: break;
          case 24: 
            { return RPAREN;
            } 
            // fall through
          case 97: break;
          case 25: 
            { return COMMA;
            } 
            // fall through
          case 98: break;
          case 26: 
            { return SEMI;
            } 
            // fall through
          case 99: break;
          case 27: 
            { return COLON;
            } 
            // fall through
          case 100: break;
          case 28: 
            { return EXP;
            } 
            // fall through
          case 101: break;
          case 29: 
            { return BIT_AND;
            } 
            // fall through
          case 102: break;
          case 30: 
            { return BIT_OR;
            } 
            // fall through
          case 103: break;
          case 31: 
            { yybegin(YYINITIAL); return STRING;
            } 
            // fall through
          case 104: break;
          case 32: 
            { yypushback(yylength()); yybegin(xCOMMENT);
            } 
            // fall through
          case 105: break;
          case 33: 
            { return CONCAT;
            } 
            // fall through
          case 106: break;
          case 34: 
            { boolean block = checkBlock();
        if (block) { yypushback(yylength()); yybegin(xBLOCK_COMMENT); }
        else { yypushback(yylength()); yybegin(xCOMMENT); }
            } 
            // fall through
          case 107: break;
          case 35: 
            { return IN;
            } 
            // fall through
          case 108: break;
          case 36: 
            { return IF;
            } 
            // fall through
          case 109: break;
          case 37: 
            { return OR;
            } 
            // fall through
          case 110: break;
          case 38: 
            { return DO;
            } 
            // fall through
          case 111: break;
          case 39: 
            { yybegin(xBLOCK_STRING); yypushback(yylength()); checkBlock();
            } 
            // fall through
          case 112: break;
          case 40: 
            { return EQ;
            } 
            // fall through
          case 113: break;
          case 41: 
            { yybegin(xSHEBANG); return SHEBANG;
            } 
            // fall through
          case 114: break;
          case 42: 
            { return GE;
            } 
            // fall through
          case 115: break;
          case 43: 
            { return BIT_RTRT;
            } 
            // fall through
          case 116: break;
          case 44: 
            { return LE;
            } 
            // fall through
          case 117: break;
          case 45: 
            { return BIT_LTLT;
            } 
            // fall through
          case 118: break;
          case 46: 
            { return NE;
            } 
            // fall through
          case 119: break;
          case 47: 
            { return DOUBLE_DIV;
            } 
            // fall through
          case 120: break;
          case 48: 
            { return DOUBLE_COLON;
            } 
            // fall through
          case 121: break;
          case 49: 
            { yybegin(YYINITIAL);return SHORT_COMMENT;
            } 
            // fall through
          case 122: break;
          case 50: 
            { return ELLIPSIS;
            } 
            // fall through
          case 123: break;
          case 51: 
            { return END;
            } 
            // fall through
          case 124: break;
          case 52: 
            { return NIL;
            } 
            // fall through
          case 125: break;
          case 53: 
            { return NOT;
            } 
            // fall through
          case 126: break;
          case 54: 
            { return AND;
            } 
            // fall through
          case 127: break;
          case 55: 
            { return FOR;
            } 
            // fall through
          case 128: break;
          case 56: 
            { yybegin(YYINITIAL);return DOC_COMMENT;
            } 
            // fall through
          case 129: break;
          case 57: 
            { return ELSE;
            } 
            // fall through
          case 130: break;
          case 58: 
            { if (level.getVersion() < LuaLanguageLevel.LUA52.getVersion()) return ID; else return GOTO;
            } 
            // fall through
          case 131: break;
          case 59: 
            { return TRUE;
            } 
            // fall through
          case 132: break;
          case 60: 
            { return THEN;
            } 
            // fall through
          case 133: break;
          case 61: 
            { int redundant = checkBlockRedundant();
        if (redundant != -1) {
            yypushback(redundant);
            yybegin(YYINITIAL); return STRING;
        } else {
            yybegin(YYINITIAL); return TokenType.BAD_CHARACTER;
        }
            } 
            // fall through
          case 134: break;
          case 62: 
            { int redundant = checkBlockRedundant();
        if (redundant != -1) {
            yypushback(redundant);
            yybegin(YYINITIAL);return BLOCK_COMMENT; }
        else { yybegin(YYINITIAL);return BLOCK_COMMENT; }
            } 
            // fall through
          case 135: break;
          case 63: 
            { return REGION;
            } 
            // fall through
          case 136: break;
          case 64: 
            { return ENDREGION;
            } 
            // fall through
          case 137: break;
          case 65: 
            { return BREAK;
            } 
            // fall through
          case 138: break;
          case 66: 
            { return LOCAL;
            } 
            // fall through
          case 139: break;
          case 67: 
            { return FALSE;
            } 
            // fall through
          case 140: break;
          case 68: 
            { return UNTIL;
            } 
            // fall through
          case 141: break;
          case 69: 
            { return WHILE;
            } 
            // fall through
          case 142: break;
          case 70: 
            { return RETURN;
            } 
            // fall through
          case 143: break;
          case 71: 
            { return REPEAT;
            } 
            // fall through
          case 144: break;
          case 72: 
            { return ELSEIF;
            } 
            // fall through
          case 145: break;
          case 73: 
            { return FUNCTION;
            } 
            // fall through
          case 146: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
