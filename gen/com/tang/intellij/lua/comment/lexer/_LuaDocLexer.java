/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.tang.intellij.lua.comment.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.tang.intellij.lua.comment.psi.LuaDocTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>doc.flex</tt>
 */
public class _LuaDocLexer implements FlexLexer, LuaDocTypes {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int xBODY = 2;
  public static final int xTAG = 4;
  public static final int xTAG_WITH_ID = 6;
  public static final int xTAG_NAME = 8;
  public static final int xCOMMENT_STRING = 10;
  public static final int xPARAM = 12;
  public static final int xTYPE_REF = 14;
  public static final int xCLASS = 16;
  public static final int xCLASS_PARAMS = 18;
  public static final int xCLASS_PARAM_LIST = 20;
  public static final int xCLASS_EXTEND = 22;
  public static final int xFIELD = 24;
  public static final int xFIELD_ID = 26;
  public static final int xFIELD_VALUE = 28;
  public static final int xGENERIC = 30;
  public static final int xALIAS = 32;
  public static final int xALIAS_PARAMS = 34;
  public static final int xALIAS_PARAM_LIST = 36;
  public static final int xSUPPRESS = 38;
  public static final int xDOUBLE_QUOTED_STRING = 40;
  public static final int xSINGLE_QUOTED_STRING = 42;
  public static final int xBACKTICK_QUOTED_STRING = 44;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 17504 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1"+
    "\21\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\21\1\25\1\57\1\60\5\21\2\25\1\61"+
    "\7\21\1\25\1\62\20\21\1\25\1\63\1\21\1\64\13\25\1\65\1\25\1\66\22\21\1\67"+
    "\1\70\4\21\1\71\11\21\1\72\1\73\1\74\1\75\1\21\1\76\2\21\1\77\3\21\1\100\2"+
    "\21\1\101\10\21\123\25\1\102\7\25\1\103\1\104\12\25\1\105\15\25\1\106\6\21"+
    "\1\25\1\107\u0582\21\1\110\u017f\21");

  /* The ZZ_CMAP_Y table has 4672 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1"+
    "\17\3\0\1\20\1\21\1\22\1\23\2\24\1\25\3\24\1\25\71\24\1\26\1\24\1\27\1\30"+
    "\1\31\1\32\2\30\16\0\1\33\1\34\1\35\1\36\2\24\1\37\11\24\1\40\21\24\1\41\1"+
    "\42\24\24\1\43\3\24\1\25\1\44\1\43\4\24\1\45\1\46\4\0\1\47\1\50\1\30\3\24"+
    "\2\51\1\30\1\52\1\53\1\0\1\54\5\24\1\55\3\0\1\56\1\57\13\24\1\60\1\47\1\61"+
    "\1\62\1\0\1\63\1\30\1\64\1\65\3\24\3\0\1\66\12\24\1\67\1\0\1\70\1\30\1\0\1"+
    "\71\3\24\1\55\1\72\1\23\2\24\1\67\1\73\1\74\1\75\2\30\3\24\1\76\1\24\1\51"+
    "\6\30\2\24\1\33\1\77\2\30\1\100\5\0\1\101\6\24\1\102\2\0\1\103\1\24\1\104"+
    "\1\0\1\43\1\24\1\105\1\106\1\107\2\24\1\110\1\111\1\112\1\113\1\114\1\64\1"+
    "\115\1\104\1\0\1\116\1\117\1\120\1\121\1\107\2\24\1\110\1\122\1\123\1\124"+
    "\1\125\1\126\1\127\1\130\1\0\1\131\1\30\1\120\1\40\1\37\2\24\1\110\1\132\1"+
    "\112\1\47\1\133\1\134\1\30\1\104\1\0\1\44\1\135\1\120\1\106\1\107\2\24\1\110"+
    "\1\132\1\112\1\113\1\125\1\130\1\115\1\104\1\0\1\44\1\30\1\136\1\137\1\140"+
    "\1\141\1\117\1\137\1\24\1\142\1\143\1\144\1\145\1\30\1\130\1\0\1\30\1\44\1"+
    "\146\1\33\1\110\2\24\1\110\1\24\1\147\1\150\1\144\1\151\1\51\1\104\1\0\2\30"+
    "\1\105\1\33\1\110\2\24\1\110\1\152\1\112\1\150\1\144\1\151\1\35\1\104\1\0"+
    "\1\153\1\30\1\146\1\33\1\110\4\24\1\154\1\150\1\155\1\156\1\45\1\104\1\0\1"+
    "\30\1\42\1\157\1\24\1\25\1\42\2\24\1\37\1\160\1\25\1\161\1\162\1\0\1\130\1"+
    "\0\1\163\1\30\1\43\5\24\1\164\1\165\1\166\1\167\1\0\1\170\4\30\1\171\1\172"+
    "\1\173\1\43\1\174\1\175\1\164\1\176\1\177\1\52\1\0\1\200\4\30\1\134\2\30\1"+
    "\170\1\0\1\170\1\201\1\202\1\24\1\43\3\24\1\31\1\46\1\0\1\150\1\203\1\0\1"+
    "\46\3\0\1\204\1\205\7\30\5\24\1\55\1\0\1\206\1\0\1\170\1\67\1\207\1\210\1"+
    "\211\1\212\1\24\1\213\1\214\1\0\1\52\4\24\1\40\1\22\5\24\1\215\51\24\1\140"+
    "\1\25\1\140\5\24\1\140\4\24\1\140\1\25\1\140\1\24\1\25\7\24\1\140\10\24\1"+
    "\216\4\30\2\24\2\30\12\24\2\77\1\43\114\24\1\106\2\24\1\217\2\24\1\51\11\24"+
    "\1\137\1\24\1\134\1\24\1\33\1\220\1\30\2\24\1\220\1\30\2\24\1\221\1\30\1\24"+
    "\1\33\1\222\1\30\6\24\1\223\3\0\1\224\1\225\1\0\1\170\3\30\1\226\1\0\1\170"+
    "\13\24\1\30\1\227\4\24\1\230\10\24\1\77\1\30\3\24\1\25\1\0\1\2\1\0\1\2\1\130"+
    "\1\0\3\24\1\77\1\31\1\30\5\24\1\116\3\24\1\27\1\0\1\170\4\30\2\24\1\166\1"+
    "\2\6\24\1\203\1\167\3\0\1\113\1\0\1\170\1\0\1\170\1\45\1\30\1\0\1\52\10\30"+
    "\1\231\5\24\1\223\1\0\1\231\1\116\1\0\1\170\1\30\1\232\1\2\1\30\1\233\3\24"+
    "\1\103\1\211\1\0\1\71\4\24\1\67\1\0\1\2\1\30\4\24\1\223\2\0\1\30\1\0\1\234"+
    "\1\0\1\71\3\24\1\77\1\24\1\134\10\30\1\235\2\0\1\236\1\237\1\170\30\24\7\0"+
    "\1\240\42\24\2\77\4\24\2\77\1\24\1\241\3\24\1\77\6\24\1\33\1\177\1\242\1\31"+
    "\1\243\1\116\1\24\1\31\1\242\1\31\1\244\1\245\3\30\1\246\1\30\1\45\1\134\1"+
    "\30\1\247\1\250\1\150\1\0\1\44\1\45\2\30\1\24\1\31\4\24\2\30\1\0\1\204\1\251"+
    "\1\0\1\252\1\30\1\253\1\42\1\160\1\254\1\32\1\255\1\24\1\256\1\257\1\260\2"+
    "\30\5\24\1\134\116\30\5\24\1\25\5\24\1\25\20\24\1\31\1\261\1\262\1\30\4\24"+
    "\1\40\1\22\7\24\1\45\1\30\1\64\2\24\1\25\1\30\10\25\4\0\5\30\1\45\72\30\1"+
    "\263\3\30\1\43\1\213\1\254\1\31\1\43\11\24\1\25\1\264\1\43\12\24\1\215\1\257"+
    "\4\24\1\25\1\43\12\24\1\25\2\30\3\24\1\51\6\30\170\24\1\77\11\30\75\24\1\51"+
    "\2\30\21\24\1\31\10\30\5\24\1\77\41\24\1\31\2\24\1\0\1\262\2\30\5\24\1\166"+
    "\1\100\1\265\3\24\1\67\12\24\1\170\3\30\1\45\1\24\1\42\14\24\1\107\3\24\1"+
    "\25\1\24\7\30\1\45\1\24\1\266\1\267\2\24\1\55\2\30\1\134\6\24\1\116\1\30\1"+
    "\71\5\24\1\223\1\0\1\52\1\30\1\0\1\170\2\0\1\71\1\270\1\0\1\71\2\24\1\67\1"+
    "\52\2\24\1\166\1\0\1\2\1\30\3\24\1\31\1\101\5\24\1\55\1\0\1\252\1\45\1\0\1"+
    "\170\1\271\1\24\1\0\1\272\5\24\1\103\1\167\1\30\1\267\1\273\1\0\1\170\2\24"+
    "\1\25\1\274\6\24\1\210\1\275\1\230\2\30\1\276\1\24\1\55\1\277\1\30\3\300\1"+
    "\30\2\25\5\24\1\215\1\77\1\30\16\24\1\55\1\301\1\0\1\170\64\24\1\116\1\30"+
    "\2\24\1\25\1\302\5\24\1\116\40\30\55\24\1\77\15\24\1\27\4\30\1\25\1\30\1\302"+
    "\1\303\1\24\1\110\1\25\1\177\1\304\15\24\1\27\3\30\1\302\54\24\1\77\2\30\10"+
    "\24\1\42\6\24\5\30\1\24\1\31\2\0\2\30\2\0\1\117\2\30\1\257\3\30\1\44\1\33"+
    "\20\24\1\305\1\247\1\30\1\0\1\170\1\43\2\24\1\121\1\43\2\24\1\51\1\306\12"+
    "\24\1\25\3\42\1\307\1\310\2\30\1\311\1\24\1\152\2\24\1\25\2\24\1\312\1\24"+
    "\1\77\1\24\1\77\4\30\17\24\1\51\10\30\6\24\1\31\20\30\1\313\20\30\3\24\1\31"+
    "\6\24\1\134\1\30\1\252\3\30\4\24\1\30\1\257\3\24\1\51\4\24\1\67\1\314\3\24"+
    "\1\77\4\24\1\116\1\24\1\254\5\30\23\24\1\77\1\0\1\170\4\24\1\116\4\24\1\116"+
    "\5\24\1\30\6\24\1\116\23\30\46\24\1\25\1\30\2\24\1\77\1\30\1\24\23\30\1\77"+
    "\1\110\4\24\1\40\1\315\2\24\1\77\1\30\2\24\1\25\1\30\3\24\1\25\10\30\2\24"+
    "\1\316\1\30\2\24\1\77\1\30\3\24\1\27\10\30\7\24\1\306\10\30\1\317\1\100\1"+
    "\152\1\43\2\24\1\116\1\124\4\30\3\24\1\31\3\24\1\31\4\30\1\24\1\43\2\24\1"+
    "\320\3\30\6\24\1\77\1\30\2\24\1\77\1\30\2\24\1\51\1\30\2\24\1\27\15\30\11"+
    "\24\1\134\6\30\6\24\1\51\1\30\6\24\1\51\41\30\1\233\6\24\1\0\1\167\3\30\1"+
    "\130\1\0\1\30\1\64\1\233\5\24\1\0\1\321\2\30\3\24\1\134\1\0\1\170\1\233\3"+
    "\24\1\166\1\0\1\150\1\0\2\30\4\24\1\322\1\30\1\233\5\24\1\55\1\0\1\323\1\324"+
    "\1\0\1\325\4\30\2\24\1\37\2\24\1\223\1\0\1\205\10\30\1\25\1\255\1\24\1\40"+
    "\1\24\1\134\5\24\1\166\1\0\1\314\1\0\1\170\1\146\1\106\1\107\2\24\1\110\1"+
    "\132\1\112\1\113\1\125\1\145\1\257\1\104\2\204\21\30\6\24\1\203\1\0\1\206"+
    "\1\51\1\0\1\170\4\30\6\24\2\0\1\326\1\30\1\0\1\170\24\30\5\24\1\166\1\52\1"+
    "\0\1\252\2\30\1\273\4\30\6\24\2\0\1\327\1\30\1\0\1\170\4\30\5\24\1\55\1\0"+
    "\1\30\1\0\1\170\6\30\3\24\1\330\1\0\1\2\1\0\1\170\54\30\10\24\1\0\1\170\1"+
    "\30\1\45\40\30\1\103\1\233\4\24\1\55\1\331\1\64\1\30\1\103\1\101\4\24\1\243"+
    "\1\213\1\0\1\170\4\30\7\24\1\134\40\30\1\24\1\110\3\24\1\166\1\167\1\0\1\134"+
    "\1\30\1\0\1\170\2\30\1\42\3\24\1\332\2\0\1\46\1\167\11\30\1\25\1\37\4\24\1"+
    "\333\1\334\1\214\1\30\1\0\1\170\24\30\63\24\1\27\14\30\15\24\1\25\2\30\30"+
    "\24\1\116\27\30\5\24\1\25\72\30\10\24\1\25\67\30\7\24\1\134\3\24\1\25\1\0"+
    "\1\170\14\30\3\24\1\77\1\204\1\30\6\24\1\167\1\30\1\116\1\30\1\0\1\170\1\302"+
    "\2\24\1\257\2\24\56\30\10\24\1\31\1\30\1\103\4\0\1\167\1\30\1\64\1\233\1\24"+
    "\10\30\1\27\3\30\75\24\1\31\2\30\36\24\1\51\41\30\43\24\1\25\12\30\61\24\1"+
    "\116\40\30\15\24\1\51\1\24\1\31\1\24\1\134\1\24\1\335\1\2\127\30\1\336\1\337"+
    "\2\0\1\340\1\2\3\30\1\341\22\30\1\324\67\30\12\24\1\33\10\24\1\33\1\342\1"+
    "\343\1\24\1\344\1\152\7\24\1\40\1\345\2\33\3\24\1\346\1\177\1\42\1\110\51"+
    "\24\1\77\3\24\1\110\2\24\1\215\3\24\1\215\2\24\1\33\3\24\1\33\2\24\1\25\3"+
    "\24\1\25\3\24\1\110\3\24\1\110\2\24\1\215\1\347\14\0\1\167\1\232\5\0\1\204"+
    "\1\313\1\30\1\350\2\30\1\232\1\46\1\0\52\30\1\167\2\0\1\351\1\352\1\314\72"+
    "\30\30\24\1\31\1\30\1\167\5\30\10\24\1\223\1\314\1\0\1\170\24\30\1\152\3\24"+
    "\1\171\1\43\1\215\1\353\1\253\1\354\1\171\1\241\1\171\2\215\1\127\1\24\1\37"+
    "\1\24\1\116\1\355\1\37\1\24\1\116\50\30\32\24\1\25\5\30\106\24\1\31\1\30\33"+
    "\24\1\77\120\24\1\27\1\30\146\24\1\134\3\30\3\24\1\77\74\30\1\126\3\30\14"+
    "\0\20\30\36\0\2\30");

  /* The ZZ_CMAP_A table has 1904 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\17\1\5\1\2\1\43\1\44\1\1\6\17\4\16\1\3\1\16\1\14\1\73\1\6\2\16\1\20\1"+
    "\67\1\70\1\16\1\25\1\62\1\11\1\10\1\16\1\27\11\22\1\64\1\16\1\63\1\13\1\65"+
    "\1\16\1\45\4\23\1\24\1\23\5\6\1\32\3\6\1\26\4\6\1\31\2\6\1\30\2\6\1\12\1\15"+
    "\1\4\1\16\1\6\1\21\1\40\1\61\1\54\1\47\1\36\1\37\1\53\1\55\1\46\2\6\1\41\1"+
    "\51\1\57\1\56\1\50\1\6\1\34\1\42\1\33\1\35\1\52\1\6\1\30\1\60\1\6\1\71\1\66"+
    "\1\72\1\16\6\17\1\7\2\17\1\0\1\16\4\6\4\16\1\6\2\16\1\17\7\16\1\6\4\16\1\6"+
    "\5\16\17\6\1\16\2\6\4\16\4\6\16\16\5\6\7\16\1\6\1\16\1\6\1\16\5\6\1\16\2\6"+
    "\2\16\4\6\1\16\1\6\6\16\1\6\1\16\3\6\1\16\1\6\1\16\4\6\1\16\13\6\1\16\3\6"+
    "\1\16\5\17\2\16\6\6\1\16\7\6\1\16\1\6\15\16\1\6\1\16\15\17\1\16\1\17\1\16"+
    "\2\17\1\16\2\17\1\16\1\17\3\6\5\16\6\17\5\16\1\6\4\16\3\17\1\16\1\17\3\16"+
    "\3\6\7\17\4\16\2\6\1\17\13\6\1\16\1\6\7\17\2\6\2\17\1\16\4\17\2\6\2\17\3\6"+
    "\2\16\1\6\7\16\1\17\1\6\1\17\6\6\3\17\2\16\11\6\3\17\1\6\6\16\2\17\6\6\4\17"+
    "\2\6\2\16\2\17\1\6\11\17\1\6\3\17\1\6\5\17\2\16\1\6\3\17\4\16\6\6\6\16\10"+
    "\17\6\6\3\17\1\6\2\17\1\6\7\17\2\6\2\17\2\16\2\17\1\6\3\17\1\16\10\6\2\16"+
    "\2\6\2\16\6\6\1\16\7\6\1\16\1\6\3\16\4\6\2\16\1\17\1\6\7\17\2\16\2\17\2\16"+
    "\3\17\1\6\5\16\2\6\1\16\5\6\7\16\2\6\4\16\3\17\1\16\6\6\4\16\2\6\1\16\2\6"+
    "\1\16\2\6\1\16\2\6\2\16\1\17\1\16\5\17\4\16\2\17\2\16\3\17\3\16\1\17\7\16"+
    "\4\6\1\16\1\6\7\16\4\17\3\6\1\17\2\16\1\6\1\16\2\6\1\16\3\6\2\17\1\16\3\17"+
    "\2\16\1\6\10\16\1\6\6\17\2\16\1\17\1\6\1\16\6\6\3\16\3\6\1\16\4\6\3\16\2\6"+
    "\1\16\1\6\1\16\4\6\4\16\5\17\3\16\3\17\1\16\4\17\2\16\1\6\6\16\5\17\1\16\5"+
    "\6\3\16\1\6\7\17\1\16\2\17\5\16\2\17\1\16\4\6\1\16\3\6\1\16\2\6\5\16\3\6\2"+
    "\17\1\6\3\17\1\16\4\17\1\6\5\16\3\6\1\17\2\16\2\17\1\16\7\6\1\16\1\6\4\16"+
    "\1\17\4\16\6\17\1\16\1\17\3\16\2\17\4\16\1\6\1\17\2\6\7\17\4\16\10\6\10\17"+
    "\1\16\2\17\7\16\2\6\1\16\1\6\2\16\2\6\1\16\1\6\2\16\1\6\6\16\4\6\1\16\3\6"+
    "\1\16\1\6\1\16\1\6\2\16\2\6\1\16\3\6\2\17\1\16\2\17\1\6\2\16\5\6\1\16\1\6"+
    "\1\16\2\17\2\16\4\6\5\16\1\17\1\16\1\17\1\16\1\17\4\16\2\17\5\6\10\17\11\16"+
    "\1\17\1\16\7\17\1\6\2\17\4\6\3\17\1\6\3\17\2\6\7\17\3\6\4\17\5\6\14\17\1\6"+
    "\1\17\3\6\1\16\7\6\2\16\3\17\1\0\11\6\3\17\3\16\2\6\2\17\4\16\1\6\1\16\2\17"+
    "\4\16\4\6\10\17\3\16\1\6\3\16\2\6\1\17\5\16\4\17\1\16\5\6\2\17\2\6\1\17\1"+
    "\6\5\16\5\17\3\6\3\16\10\17\5\6\2\17\3\16\3\6\3\17\1\16\5\17\4\6\1\17\4\6"+
    "\3\17\2\6\3\17\1\16\5\17\1\16\1\6\1\16\1\6\1\16\1\6\1\16\1\6\2\16\3\6\1\16"+
    "\6\6\2\16\2\6\13\0\5\17\2\43\5\17\1\0\4\16\1\6\12\16\1\0\1\16\1\17\3\16\4"+
    "\17\11\16\1\6\4\16\1\6\1\16\5\6\2\16\1\6\1\16\4\6\1\16\3\6\2\16\4\6\5\16\5"+
    "\6\4\16\1\6\4\16\4\6\3\17\2\6\4\16\1\0\4\16\3\6\1\16\2\17\2\16\3\6\6\17\1"+
    "\16\3\6\1\17\3\6\1\17\4\6\1\17\4\6\3\16\1\6\1\16\1\6\2\16\5\6\1\17\2\6\2\17"+
    "\5\6\1\16\4\6\2\17\4\16\1\6\3\17\2\6\1\17\5\6\2\17\3\16\3\6\4\16\3\6\2\17"+
    "\2\16\6\6\1\16\3\17\1\16\2\17\5\16\5\6\5\16\1\6\1\17\3\6\1\16\2\6\1\16\7\6"+
    "\2\16\1\17\6\16\2\6\2\16\3\6\3\16\2\6\3\16\2\6\2\16\3\17\4\16\3\6\1\16\2\6"+
    "\1\16\1\6\5\16\1\17\2\16\3\17\5\16\1\6\3\16\1\6\2\16\4\6\1\16\2\6\2\16\1\6"+
    "\3\17\1\16\2\17\1\16\5\6\2\17\1\16\3\17\2\16\1\17\2\16\3\6\1\17\2\16\1\6\1"+
    "\16\1\17\4\6\5\16\3\17\3\16\2\17\1\6\1\16\1\6\3\16\4\17\2\6\1\16\1\6\1\17"+
    "\3\16\1\6\3\16\2\6\3\16\5\17\1\6\4\17\3\16\6\17\1\6\6\17\3\16\1\17\1\16\2"+
    "\17\1\16\1\17\2\6\3\16\2\17\6\16\5\17\3\16\6\17\2\16\3\17\2\16\4\17\4\16\1"+
    "\6\2\16\2\6\2\16\4\6\1\16\4\6\1\16\1\6\1\16\6\6\2\16\5\6\1\16\4\6\1\16\4\6"+
    "\2\16\2\17\4\16\1\17\3\16\1\17\2\16\7\17\1\16\2\17\1\16\2\17\1\16\1\6\1\16"+
    "\1\6\5\16\1\6\1\16\1\6\1\16\3\6\1\16\3\6\1\16\3\6");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\21\0\1\2\1\3\1\2\1\4\2\5"+
    "\1\6\2\4\1\7\2\3\1\10\1\11\1\12\1\13"+
    "\15\14\1\1\1\6\1\15\1\3\1\16\1\17\1\3"+
    "\1\20\1\21\1\22\1\23\2\24\3\17\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\15"+
    "\3\46\2\2\1\47\1\50\1\51\1\52\1\53\2\3"+
    "\1\54\1\3\1\55\1\0\1\56\1\0\1\57\20\14"+
    "\2\0\3\24\3\0\4\17\2\15\1\0\1\60\5\0"+
    "\6\14\1\61\12\14\1\62\1\63\1\24\1\0\2\24"+
    "\1\17\1\64\2\17\3\15\1\0\1\65\17\14\1\0"+
    "\1\24\1\0\1\66\1\17\3\15\1\0\1\14\1\67"+
    "\1\70\2\14\1\71\3\14\1\72\3\14\1\73\1\14"+
    "\1\24\1\17\3\15\1\0\1\74\4\14\1\75\1\76"+
    "\1\77\2\14\1\24\1\100\2\15\1\101\1\102\2\14"+
    "\1\103\1\14\1\104\1\14\1\105\1\15\1\106\1\107"+
    "\1\14\1\110\1\15\1\111\1\112";

  private static int [] zzUnpackAction() {
    int [] result = new int[250];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\u012c\0\u0168\0\u01a4"+
    "\0\u01e0\0\u021c\0\u0258\0\u0294\0\u02d0\0\u030c\0\u0348\0\u0384"+
    "\0\u03c0\0\u03fc\0\u0438\0\u0474\0\u04b0\0\u04ec\0\u0528\0\u0564"+
    "\0\u0564\0\u05a0\0\u0564\0\u05dc\0\u0564\0\u0618\0\u0654\0\u0690"+
    "\0\u0564\0\u05dc\0\u0654\0\u06cc\0\u0564\0\u0564\0\u0708\0\u0744"+
    "\0\u0780\0\u07bc\0\u07f8\0\u0834\0\u0870\0\u08ac\0\u08e8\0\u0924"+
    "\0\u0960\0\u099c\0\u09d8\0\u0a14\0\u0a50\0\u0a8c\0\u0ac8\0\u0b04"+
    "\0\u0654\0\u0b40\0\u0b7c\0\u0564\0\u0564\0\u0564\0\u0564\0\u0bb8"+
    "\0\u0bf4\0\u0c30\0\u0c6c\0\u0ca8\0\u0564\0\u0564\0\u0564\0\u0564"+
    "\0\u0564\0\u0564\0\u0564\0\u0564\0\u0564\0\u0ce4\0\u0564\0\u0564"+
    "\0\u0564\0\u0564\0\u0564\0\u0564\0\u0564\0\u0d20\0\u0564\0\u05dc"+
    "\0\u0654\0\u05dc\0\u0654\0\u0d5c\0\u0564\0\u0564\0\u0564\0\u0d98"+
    "\0\u0dd4\0\u0e10\0\u0e4c\0\u0e88\0\u0564\0\u0ec4\0\u0564\0\u0654"+
    "\0\u0690\0\u0f00\0\u0f3c\0\u0f78\0\u0fb4\0\u0ff0\0\u102c\0\u1068"+
    "\0\u10a4\0\u10e0\0\u111c\0\u1158\0\u1194\0\u11d0\0\u120c\0\u1248"+
    "\0\u1284\0\u12c0\0\u12fc\0\u1338\0\u1374\0\u13b0\0\u13ec\0\u1428"+
    "\0\u1464\0\u14a0\0\u14dc\0\u1518\0\u1554\0\u1590\0\u15cc\0\u0dd4"+
    "\0\u0564\0\u1608\0\u0e10\0\u1644\0\u0e88\0\u1680\0\u16bc\0\u16f8"+
    "\0\u1734\0\u1770\0\u17ac\0\u17e8\0\u0744\0\u1824\0\u1860\0\u189c"+
    "\0\u18d8\0\u1914\0\u1950\0\u198c\0\u19c8\0\u1a04\0\u1a40\0\u0564"+
    "\0\u0564\0\u1a7c\0\u1338\0\u0564\0\u1ab8\0\u1af4\0\u0b40\0\u1b30"+
    "\0\u1b6c\0\u1ba8\0\u1be4\0\u1c20\0\u1c5c\0\u0744\0\u1c98\0\u1cd4"+
    "\0\u1d10\0\u1d4c\0\u1d88\0\u1dc4\0\u1e00\0\u1e3c\0\u1e78\0\u1eb4"+
    "\0\u1ef0\0\u1f2c\0\u1f68\0\u1fa4\0\u1fe0\0\u201c\0\u2058\0\u2094"+
    "\0\u0b40\0\u20d0\0\u210c\0\u2148\0\u2184\0\u21c0\0\u21fc\0\u0744"+
    "\0\u0744\0\u2238\0\u2274\0\u0744\0\u22b0\0\u22ec\0\u2328\0\u0744"+
    "\0\u2364\0\u23a0\0\u23dc\0\u0744\0\u2418\0\u2454\0\u2490\0\u24cc"+
    "\0\u2508\0\u2544\0\u2580\0\u0744\0\u25bc\0\u25f8\0\u2634\0\u2670"+
    "\0\u0744\0\u0744\0\u0744\0\u26ac\0\u26e8\0\u2724\0\u0b40\0\u2760"+
    "\0\u279c\0\u0ac8\0\u2580\0\u27d8\0\u2814\0\u0744\0\u2850\0\u0744"+
    "\0\u288c\0\u0ac8\0\u28c8\0\u0744\0\u0744\0\u2904\0\u0744\0\u2940"+
    "\0\u0744\0\u0ac8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[250];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\30\2\31\4\30\1\31\1\30\1\32\31\30\2\31"+
    "\27\30\1\33\1\34\1\35\1\36\1\37\1\36\1\33"+
    "\1\31\1\33\1\40\31\33\1\31\1\36\1\41\26\33"+
    "\1\31\1\42\1\31\1\36\1\43\1\36\1\44\14\31"+
    "\2\44\1\31\1\44\1\31\13\44\1\31\1\36\1\45"+
    "\14\44\11\31\1\46\1\31\1\34\1\35\1\36\1\43"+
    "\1\36\1\47\14\31\2\47\1\31\1\47\1\31\13\47"+
    "\1\31\1\36\1\31\14\47\13\31\1\42\1\31\1\36"+
    "\1\43\1\36\1\50\14\31\2\50\1\31\1\50\1\31"+
    "\3\50\1\51\1\52\2\50\1\53\1\54\1\55\1\56"+
    "\1\31\1\36\1\31\2\50\1\57\1\60\1\61\1\62"+
    "\1\63\1\50\1\64\3\50\12\31\1\65\1\34\1\35"+
    "\1\66\1\43\1\36\36\65\1\36\27\65\1\31\1\34"+
    "\1\35\1\36\1\43\1\36\1\67\1\31\1\70\12\31"+
    "\2\67\1\31\1\67\1\31\13\67\1\31\1\36\1\31"+
    "\14\67\13\31\1\34\1\35\1\36\1\71\1\36\1\72"+
    "\1\31\1\73\1\31\1\74\1\31\1\75\3\31\1\76"+
    "\1\77\1\100\2\72\1\31\1\72\1\101\3\72\1\102"+
    "\3\72\1\103\3\72\1\31\1\36\1\45\4\72\1\104"+
    "\7\72\1\105\1\106\1\107\1\110\1\111\1\112\1\113"+
    "\1\114\1\115\2\31\1\34\1\35\1\36\1\43\1\36"+
    "\1\116\14\31\2\116\1\31\1\116\1\31\13\116\1\31"+
    "\1\36\1\31\14\116\12\31\63\117\1\120\10\117\3\31"+
    "\1\36\1\43\1\36\1\44\14\31\2\44\1\31\1\44"+
    "\1\31\13\44\1\31\1\36\1\31\14\44\1\121\1\31"+
    "\1\122\1\123\7\31\1\34\1\35\1\36\1\43\1\36"+
    "\36\31\1\36\17\31\1\124\10\31\1\34\1\35\1\36"+
    "\1\43\1\36\1\67\3\31\1\125\10\31\2\67\1\31"+
    "\1\67\1\31\13\67\1\31\1\36\1\31\2\67\1\126"+
    "\11\67\13\31\1\34\1\35\1\36\1\43\1\36\1\67"+
    "\3\31\1\125\10\31\2\67\1\31\1\67\1\31\13\67"+
    "\1\31\1\36\1\31\14\67\12\31\1\127\1\130\1\127"+
    "\1\36\1\131\1\36\36\127\1\36\27\127\1\30\1\132"+
    "\1\30\1\36\1\133\1\36\1\44\14\30\2\44\1\30"+
    "\1\44\1\30\13\44\1\30\1\36\1\30\14\44\1\121"+
    "\1\30\1\124\7\30\1\31\1\34\1\35\1\36\1\43"+
    "\1\36\1\134\14\31\2\134\1\31\1\134\1\31\13\134"+
    "\1\31\1\36\1\31\14\134\12\31\63\127\1\135\10\127"+
    "\3\31\1\36\1\43\1\36\1\44\14\31\2\44\1\31"+
    "\1\44\1\31\13\44\1\31\1\36\1\31\14\44\1\121"+
    "\1\31\1\136\1\137\6\31\1\30\1\132\1\30\1\36"+
    "\1\133\1\36\1\140\14\30\2\140\1\30\1\140\1\30"+
    "\13\140\1\30\1\36\1\30\14\140\1\121\11\30\14\31"+
    "\1\141\77\31\1\142\53\31\15\143\1\144\3\143\1\145"+
    "\52\143\105\0\1\146\64\0\1\35\74\0\1\36\1\0"+
    "\1\36\36\0\1\36\33\0\1\147\6\0\1\150\71\0"+
    "\1\151\70\0\2\44\7\0\1\44\2\0\3\44\1\0"+
    "\15\44\3\0\14\44\20\0\3\47\6\0\1\47\2\0"+
    "\3\47\1\0\15\47\3\0\14\47\20\0\2\50\7\0"+
    "\1\50\2\0\3\50\1\0\15\50\3\0\14\50\20\0"+
    "\2\50\7\0\1\50\2\0\3\50\1\0\15\50\3\0"+
    "\12\50\1\152\1\50\20\0\2\50\7\0\1\50\2\0"+
    "\3\50\1\0\10\50\1\153\4\50\3\0\14\50\20\0"+
    "\2\50\7\0\1\50\2\0\3\50\1\0\15\50\3\0"+
    "\1\154\13\50\20\0\2\50\7\0\1\50\2\0\3\50"+
    "\1\0\13\50\1\155\1\50\3\0\14\50\20\0\2\50"+
    "\7\0\1\50\2\0\3\50\1\0\12\50\1\156\2\50"+
    "\3\0\14\50\20\0\2\50\7\0\1\50\2\0\3\50"+
    "\1\0\7\50\1\157\1\160\4\50\3\0\7\50\1\161"+
    "\4\50\20\0\2\50\7\0\1\50\2\0\3\50\1\0"+
    "\6\50\1\162\1\163\2\50\1\164\2\50\3\0\14\50"+
    "\20\0\2\50\7\0\1\50\2\0\3\50\1\0\15\50"+
    "\3\0\10\50\1\165\3\50\20\0\2\50\7\0\1\50"+
    "\2\0\3\50\1\0\12\50\1\166\2\50\3\0\14\50"+
    "\20\0\2\50\7\0\1\50\2\0\3\50\1\0\10\50"+
    "\1\167\4\50\3\0\14\50\20\0\2\50\7\0\1\50"+
    "\2\0\3\50\1\0\13\50\1\170\1\50\3\0\14\50"+
    "\20\0\2\50\7\0\1\50\2\0\3\50\1\0\15\50"+
    "\3\0\4\50\1\171\7\50\12\0\1\65\2\0\1\65"+
    "\2\0\36\65\1\0\30\65\2\0\1\66\1\0\1\36"+
    "\36\65\1\36\27\65\6\0\2\67\7\0\1\67\2\0"+
    "\3\67\1\0\15\67\3\0\14\67\22\0\1\172\71\0"+
    "\2\72\7\0\1\72\2\0\3\72\1\0\15\72\3\0"+
    "\14\72\22\0\1\173\11\0\1\174\4\0\1\174\54\0"+
    "\1\175\11\0\1\100\1\0\1\176\2\0\1\100\1\0"+
    "\1\177\1\200\3\0\1\176\45\0\1\175\11\0\1\100"+
    "\1\0\1\176\2\0\1\100\1\201\1\177\1\200\3\0"+
    "\1\176\43\0\2\72\7\0\1\72\2\0\3\72\1\0"+
    "\6\72\1\202\6\72\3\0\14\72\20\0\2\72\7\0"+
    "\1\72\2\0\3\72\1\0\7\72\1\203\2\72\1\204"+
    "\2\72\3\0\14\72\20\0\2\72\7\0\1\72\2\0"+
    "\3\72\1\0\12\72\1\205\2\72\3\0\14\72\20\0"+
    "\2\116\7\0\1\116\2\0\3\116\1\0\15\116\3\0"+
    "\14\116\20\0\2\67\7\0\1\67\2\0\3\67\1\0"+
    "\6\67\1\206\1\207\5\67\3\0\14\67\20\0\2\134"+
    "\7\0\1\134\2\0\3\134\1\0\15\134\3\0\14\134"+
    "\20\0\3\140\6\0\1\140\2\0\3\140\1\0\15\140"+
    "\3\0\14\140\12\0\14\210\1\211\1\212\56\210\15\213"+
    "\1\214\2\213\1\211\53\213\15\143\1\215\3\143\1\0"+
    "\52\143\1\0\2\143\1\0\1\143\1\0\1\143\1\0"+
    "\33\143\2\0\27\143\12\0\1\216\67\0\2\50\7\0"+
    "\1\50\2\0\3\50\1\0\15\50\3\0\2\50\1\217"+
    "\11\50\20\0\2\50\7\0\1\50\2\0\3\50\1\0"+
    "\5\50\1\220\7\50\3\0\14\50\20\0\2\50\7\0"+
    "\1\50\2\0\3\50\1\0\10\50\1\221\4\50\3\0"+
    "\14\50\20\0\2\50\7\0\1\50\2\0\3\50\1\0"+
    "\15\50\3\0\1\222\13\50\20\0\2\50\7\0\1\50"+
    "\2\0\3\50\1\0\15\50\3\0\11\50\1\223\2\50"+
    "\20\0\2\50\7\0\1\50\2\0\3\50\1\0\15\50"+
    "\3\0\2\50\1\224\11\50\20\0\2\50\7\0\1\50"+
    "\2\0\3\50\1\0\10\50\1\225\4\50\3\0\14\50"+
    "\20\0\2\50\7\0\1\50\2\0\3\50\1\0\12\50"+
    "\1\226\2\50\3\0\14\50\20\0\2\50\7\0\1\50"+
    "\2\0\3\50\1\0\15\50\3\0\1\227\7\50\1\230"+
    "\3\50\20\0\2\50\7\0\1\50\2\0\3\50\1\0"+
    "\15\50\3\0\13\50\1\231\20\0\2\50\7\0\1\50"+
    "\2\0\3\50\1\0\6\50\1\232\6\50\3\0\14\50"+
    "\20\0\2\50\7\0\1\50\2\0\3\50\1\0\15\50"+
    "\3\0\1\50\1\233\12\50\20\0\2\50\7\0\1\50"+
    "\2\0\3\50\1\0\6\50\1\234\6\50\3\0\14\50"+
    "\20\0\2\50\7\0\1\50\2\0\3\50\1\0\15\50"+
    "\3\0\11\50\1\235\2\50\20\0\2\50\7\0\1\50"+
    "\2\0\3\50\1\0\12\50\1\236\2\50\3\0\14\50"+
    "\20\0\2\50\7\0\1\50\2\0\3\50\1\0\10\50"+
    "\1\237\4\50\3\0\14\50\22\0\1\240\73\0\1\241"+
    "\105\0\1\174\4\0\1\174\66\0\1\242\4\0\1\242"+
    "\55\0\1\243\10\0\1\174\2\0\1\243\1\0\1\174"+
    "\76\0\1\200\73\0\1\244\63\0\3\245\2\0\1\245"+
    "\6\0\3\245\6\0\1\245\4\0\1\245\4\0\1\245"+
    "\20\0\2\72\7\0\1\72\2\0\3\72\1\0\7\72"+
    "\1\246\5\72\3\0\14\72\20\0\2\72\7\0\1\72"+
    "\2\0\3\72\1\0\15\72\3\0\11\72\1\247\2\72"+
    "\20\0\2\72\7\0\1\72\2\0\3\72\1\0\13\72"+
    "\1\250\1\72\3\0\14\72\20\0\2\72\7\0\1\72"+
    "\2\0\3\72\1\0\6\72\1\251\6\72\3\0\14\72"+
    "\20\0\2\67\7\0\1\67\2\0\3\67\1\0\15\67"+
    "\3\0\1\252\7\67\1\253\3\67\20\0\2\67\7\0"+
    "\1\67\2\0\3\67\1\0\15\67\3\0\13\67\1\254"+
    "\13\0\2\210\1\0\1\210\1\0\1\210\1\0\33\210"+
    "\2\0\27\210\1\0\2\213\1\0\1\213\1\0\1\213"+
    "\1\0\33\213\2\0\27\213\12\0\1\255\1\216\66\0"+
    "\2\50\7\0\1\50\2\0\3\50\1\0\10\50\1\256"+
    "\4\50\3\0\14\50\20\0\2\50\7\0\1\50\2\0"+
    "\3\50\1\0\7\50\1\257\5\50\3\0\14\50\20\0"+
    "\2\50\7\0\1\50\2\0\3\50\1\0\13\50\1\260"+
    "\1\50\3\0\14\50\20\0\2\50\7\0\1\50\2\0"+
    "\3\50\1\0\12\50\1\261\2\50\3\0\14\50\20\0"+
    "\2\50\7\0\1\50\2\0\3\50\1\0\15\50\3\0"+
    "\5\50\1\262\6\50\20\0\2\50\7\0\1\50\2\0"+
    "\3\50\1\0\15\50\3\0\2\50\1\263\11\50\20\0"+
    "\2\50\7\0\1\50\2\0\3\50\1\0\15\50\3\0"+
    "\2\50\1\264\11\50\20\0\2\50\7\0\1\50\2\0"+
    "\3\50\1\0\15\50\3\0\4\50\1\265\7\50\20\0"+
    "\2\50\7\0\1\50\2\0\3\50\1\0\5\50\1\266"+
    "\7\50\3\0\14\50\20\0\2\50\7\0\1\50\2\0"+
    "\3\50\1\0\13\50\1\267\1\50\3\0\14\50\20\0"+
    "\2\50\7\0\1\50\2\0\3\50\1\0\12\50\1\270"+
    "\2\50\3\0\14\50\20\0\2\50\7\0\1\50\2\0"+
    "\3\50\1\0\7\50\1\271\5\50\3\0\14\50\20\0"+
    "\2\50\7\0\1\50\2\0\3\50\1\0\12\50\1\272"+
    "\2\50\3\0\14\50\20\0\2\50\7\0\1\50\2\0"+
    "\3\50\1\0\10\50\1\273\4\50\3\0\14\50\20\0"+
    "\2\50\7\0\1\50\2\0\3\50\1\0\14\50\1\274"+
    "\3\0\14\50\20\0\2\50\7\0\1\50\2\0\3\50"+
    "\1\0\6\50\1\275\6\50\3\0\14\50\34\0\1\242"+
    "\1\0\1\176\2\0\1\242\6\0\1\176\45\0\1\276"+
    "\11\0\2\245\1\277\1\0\1\300\1\245\1\0\1\177"+
    "\1\200\3\0\1\277\2\245\6\0\1\245\1\300\3\0"+
    "\1\245\4\0\1\245\20\0\2\72\7\0\1\72\2\0"+
    "\3\72\1\0\10\72\1\301\4\72\3\0\14\72\20\0"+
    "\2\72\7\0\1\72\2\0\3\72\1\0\14\72\1\246"+
    "\3\0\14\72\20\0\2\72\7\0\1\72\2\0\3\72"+
    "\1\0\12\72\1\302\2\72\3\0\14\72\20\0\2\67"+
    "\7\0\1\67\2\0\3\67\1\0\15\67\3\0\4\67"+
    "\1\303\7\67\20\0\2\67\7\0\1\67\2\0\3\67"+
    "\1\0\5\67\1\304\7\67\3\0\14\67\20\0\2\67"+
    "\7\0\1\67\2\0\3\67\1\0\13\67\1\305\1\67"+
    "\3\0\14\67\23\0\1\306\70\0\2\50\7\0\1\50"+
    "\2\0\3\50\1\0\6\50\1\307\6\50\3\0\14\50"+
    "\20\0\2\50\7\0\1\50\2\0\3\50\1\0\15\50"+
    "\3\0\1\50\1\310\12\50\20\0\2\50\7\0\1\50"+
    "\2\0\3\50\1\0\14\50\1\311\3\0\14\50\20\0"+
    "\2\50\7\0\1\50\2\0\3\50\1\0\7\50\1\312"+
    "\5\50\3\0\14\50\20\0\2\50\7\0\1\50\2\0"+
    "\3\50\1\0\6\50\1\313\6\50\3\0\14\50\20\0"+
    "\2\50\7\0\1\50\2\0\3\50\1\0\10\50\1\314"+
    "\4\50\3\0\14\50\20\0\2\50\7\0\1\50\2\0"+
    "\3\50\1\0\12\50\1\315\2\50\3\0\14\50\20\0"+
    "\2\50\7\0\1\50\2\0\3\50\1\0\10\50\1\316"+
    "\4\50\3\0\14\50\20\0\2\50\7\0\1\50\2\0"+
    "\3\50\1\0\15\50\3\0\1\317\13\50\20\0\2\50"+
    "\7\0\1\50\2\0\3\50\1\0\15\50\3\0\3\50"+
    "\1\320\10\50\20\0\2\50\7\0\1\50\2\0\3\50"+
    "\1\0\13\50\1\321\1\50\3\0\14\50\20\0\2\50"+
    "\7\0\1\50\2\0\3\50\1\0\6\50\1\322\6\50"+
    "\3\0\14\50\20\0\2\50\7\0\1\50\2\0\3\50"+
    "\1\0\6\50\1\323\6\50\3\0\14\50\20\0\2\50"+
    "\7\0\1\50\2\0\3\50\1\0\14\50\1\324\3\0"+
    "\14\50\20\0\2\50\7\0\1\50\2\0\3\50\1\0"+
    "\13\50\1\325\1\50\3\0\14\50\34\0\3\326\2\0"+
    "\1\326\6\0\3\326\6\0\1\326\4\0\1\326\4\0"+
    "\1\326\22\0\1\276\1\243\10\0\2\245\1\277\1\243"+
    "\1\300\1\245\1\0\1\177\1\200\3\0\1\277\2\245"+
    "\6\0\1\245\1\300\3\0\1\245\4\0\1\245\23\0"+
    "\1\243\13\0\1\243\54\0\2\72\7\0\1\72\2\0"+
    "\3\72\1\0\6\72\1\327\6\72\3\0\14\72\20\0"+
    "\2\67\7\0\1\67\2\0\3\67\1\0\12\67\1\330"+
    "\2\67\3\0\14\67\20\0\2\67\7\0\1\67\2\0"+
    "\3\67\1\0\10\67\1\331\4\67\3\0\14\67\20\0"+
    "\2\67\7\0\1\67\2\0\3\67\1\0\15\67\3\0"+
    "\1\332\13\67\23\0\1\333\70\0\2\50\7\0\1\50"+
    "\2\0\3\50\1\0\15\50\3\0\11\50\1\334\2\50"+
    "\20\0\2\50\7\0\1\50\2\0\3\50\1\0\12\50"+
    "\1\335\2\50\3\0\14\50\20\0\2\50\7\0\1\50"+
    "\2\0\3\50\1\0\10\50\1\336\4\50\3\0\14\50"+
    "\20\0\2\50\7\0\1\50\2\0\3\50\1\0\5\50"+
    "\1\337\7\50\3\0\14\50\20\0\2\50\7\0\1\50"+
    "\2\0\3\50\1\0\15\50\3\0\6\50\1\340\5\50"+
    "\20\0\2\50\7\0\1\50\2\0\3\50\1\0\15\50"+
    "\3\0\6\50\1\341\5\50\20\0\2\50\7\0\1\50"+
    "\2\0\3\50\1\0\10\50\1\342\4\50\3\0\14\50"+
    "\20\0\2\50\7\0\1\50\2\0\3\50\1\0\15\50"+
    "\3\0\5\50\1\343\6\50\20\0\2\50\7\0\1\50"+
    "\2\0\3\50\1\0\15\50\3\0\1\344\13\50\20\0"+
    "\2\50\7\0\1\50\2\0\3\50\1\0\15\50\3\0"+
    "\10\50\1\345\3\50\34\0\2\326\1\346\1\0\1\300"+
    "\1\326\6\0\1\346\2\326\6\0\1\326\1\300\3\0"+
    "\1\326\4\0\1\326\20\0\2\72\7\0\1\72\2\0"+
    "\3\72\1\0\15\72\3\0\5\72\1\347\6\72\20\0"+
    "\2\67\7\0\1\67\2\0\3\67\1\0\5\67\1\350"+
    "\7\67\3\0\14\67\20\0\2\67\7\0\1\67\2\0"+
    "\3\67\1\0\15\67\3\0\6\67\1\351\5\67\20\0"+
    "\2\67\7\0\1\67\2\0\3\67\1\0\15\67\3\0"+
    "\6\67\1\352\5\67\23\0\1\353\70\0\2\50\7\0"+
    "\1\50\2\0\3\50\1\0\15\50\3\0\5\50\1\354"+
    "\6\50\20\0\2\50\7\0\1\50\2\0\3\50\1\0"+
    "\14\50\1\355\3\0\14\50\20\0\2\50\7\0\1\50"+
    "\2\0\3\50\1\0\10\50\1\356\4\50\3\0\14\50"+
    "\20\0\2\50\7\0\1\50\2\0\3\50\1\0\5\50"+
    "\1\357\7\50\3\0\14\50\20\0\2\50\7\0\1\50"+
    "\2\0\3\50\1\0\15\50\3\0\6\50\1\360\5\50"+
    "\20\0\2\50\7\0\1\50\2\0\3\50\1\0\12\50"+
    "\1\361\2\50\3\0\14\50\23\0\1\243\10\0\2\326"+
    "\1\346\1\243\1\300\1\326\6\0\1\346\2\326\6\0"+
    "\1\326\1\300\3\0\1\326\4\0\1\326\20\0\2\67"+
    "\7\0\1\67\2\0\3\67\1\0\10\67\1\362\4\67"+
    "\3\0\14\67\20\0\2\67\7\0\1\67\2\0\3\67"+
    "\1\0\5\67\1\363\7\67\3\0\14\67\20\0\2\50"+
    "\7\0\1\50\2\0\3\50\1\0\10\50\1\364\4\50"+
    "\3\0\14\50\20\0\2\50\7\0\1\50\2\0\3\50"+
    "\1\0\14\50\1\365\3\0\14\50\20\0\2\50\7\0"+
    "\1\50\2\0\3\50\1\0\10\50\1\366\4\50\3\0"+
    "\14\50\20\0\2\50\7\0\1\50\2\0\3\50\1\0"+
    "\15\50\3\0\1\50\1\367\12\50\20\0\2\67\7\0"+
    "\1\67\2\0\3\67\1\0\10\67\1\370\4\67\3\0"+
    "\14\67\20\0\2\50\7\0\1\50\2\0\3\50\1\0"+
    "\15\50\3\0\1\50\1\371\12\50\20\0\2\67\7\0"+
    "\1\67\2\0\3\67\1\0\15\67\3\0\1\67\1\372"+
    "\12\67\12\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10620];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\1\21\0\2\11\1\1\1\11\1\1\1\11"+
    "\3\1\1\11\3\1\2\11\25\1\4\11\5\1\11\11"+
    "\1\1\7\11\1\1\1\11\5\1\3\11\5\1\1\11"+
    "\1\0\1\11\1\0\21\1\2\0\3\1\3\0\6\1"+
    "\1\0\1\11\5\0\21\1\2\11\1\1\1\0\1\11"+
    "\10\1\1\0\20\1\1\0\1\1\1\0\5\1\1\0"+
    "\24\1\1\0\37\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[250];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private int _typeLevel = 0;
    private boolean _typeReq = false;
    private int _nextState;

    public _LuaDocLexer() {
        this((java.io.Reader) null);
    }

    private void beginType(int nextState) {
        yybegin(xTYPE_REF);
        _typeLevel = 0;
        _typeReq = true;
        _nextState = nextState;
    }

    private void beginType() {
        beginType(xBODY);
    }

    private int nBrackets = -1;

    private boolean checkAhead(char c, int offset) {
        return this.zzMarkedPos + offset < this.zzBuffer.length() && this.zzBuffer.charAt(this.zzMarkedPos + offset) == c;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _LuaDocLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(xBODY); return STRING;
            } 
            // fall through
          case 75: break;
          case 2: 
            { yybegin(xBODY); yypushback(yylength());
            } 
            // fall through
          case 76: break;
          case 3: 
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 77: break;
          case 4: 
            { yybegin(xCOMMENT_STRING); yypushback(yylength());
            } 
            // fall through
          case 78: break;
          case 5: 
            { yybegin(xBODY); return EOL;
            } 
            // fall through
          case 79: break;
          case 6: 
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            } 
            // fall through
          case 80: break;
          case 7: 
            { yybegin(xTAG_NAME); return AT;
            } 
            // fall through
          case 81: break;
          case 8: 
            { return ID;
            } 
            // fall through
          case 82: break;
          case 9: 
            { yybegin(xCOMMENT_STRING); return STRING_BEGIN;
            } 
            // fall through
          case 83: break;
          case 10: 
            { return SHARP;
            } 
            // fall through
          case 84: break;
          case 11: 
            { yybegin(xCOMMENT_STRING); return PROPERTY;
            } 
            // fall through
          case 85: break;
          case 12: 
            { yybegin(xCOMMENT_STRING); return TAG_NAME;
            } 
            // fall through
          case 86: break;
          case 13: 
            { beginType(); return ID;
            } 
            // fall through
          case 87: break;
          case 14: 
            { _typeLevel--; _typeReq = false; return RBRACK;
            } 
            // fall through
          case 88: break;
          case 15: 
            { if (_typeReq || _typeLevel > 0) { _typeReq = false; return ID; } else { yybegin(_nextState); yypushback(yylength()); }
            } 
            // fall through
          case 89: break;
          case 16: 
            { if (checkAhead(']', 0)) {
            _typeReq = false;
            zzMarkedPos += 1;
            return ARR;
        } else {
            _typeLevel++;
            return LBRACK;
        }
            } 
            // fall through
          case 90: break;
          case 17: 
            { yybegin(xDOUBLE_QUOTED_STRING); yypushback(yylength());
            } 
            // fall through
          case 91: break;
          case 18: 
            { yybegin(xSINGLE_QUOTED_STRING); yypushback(yylength());
            } 
            // fall through
          case 92: break;
          case 19: 
            { yybegin(xBACKTICK_QUOTED_STRING); return BACKTICK;
            } 
            // fall through
          case 93: break;
          case 20: 
            { return NUMBER_LITERAL;
            } 
            // fall through
          case 94: break;
          case 21: 
            { _typeReq = true; return COMMA;
            } 
            // fall through
          case 95: break;
          case 22: 
            { _typeLevel++; return LT;
            } 
            // fall through
          case 96: break;
          case 23: 
            { _typeReq = true; return EXTENDS;
            } 
            // fall through
          case 97: break;
          case 24: 
            { _typeLevel--; _typeReq = false; return GT;
            } 
            // fall through
          case 98: break;
          case 25: 
            { _typeReq = true; return OR;
            } 
            // fall through
          case 99: break;
          case 26: 
            { _typeLevel++; return LPAREN;
            } 
            // fall through
          case 100: break;
          case 27: 
            { _typeLevel--; _typeReq = false; return RPAREN;
            } 
            // fall through
          case 101: break;
          case 28: 
            { _typeLevel++; return LCURLY;
            } 
            // fall through
          case 102: break;
          case 29: 
            { _typeLevel--; _typeReq = false; return RCURLY;
            } 
            // fall through
          case 103: break;
          case 30: 
            { yybegin(xCLASS_PARAMS); return ID;
            } 
            // fall through
          case 104: break;
          case 31: 
            { yybegin(xCLASS_EXTEND); yypushback(yylength());
            } 
            // fall through
          case 105: break;
          case 32: 
            { yybegin(xCLASS_PARAM_LIST); return LT;
            } 
            // fall through
          case 106: break;
          case 33: 
            { return COMMA;
            } 
            // fall through
          case 107: break;
          case 34: 
            { beginType(xCLASS_PARAM_LIST); return EXTENDS;
            } 
            // fall through
          case 108: break;
          case 35: 
            { yybegin(xCLASS_EXTEND); return GT;
            } 
            // fall through
          case 109: break;
          case 36: 
            { beginType(); return EXTENDS;
            } 
            // fall through
          case 110: break;
          case 37: 
            { beginType(xFIELD_VALUE); yypushback(yylength());
            } 
            // fall through
          case 111: break;
          case 38: 
            { beginType(); yypushback(yylength());
            } 
            // fall through
          case 112: break;
          case 39: 
            { yybegin(xALIAS_PARAMS); return ID;
            } 
            // fall through
          case 113: break;
          case 40: 
            { yybegin(xALIAS_PARAM_LIST); return LT;
            } 
            // fall through
          case 114: break;
          case 41: 
            { beginType(xALIAS_PARAM_LIST); return EXTENDS;
            } 
            // fall through
          case 115: break;
          case 42: 
            { beginType(); return GT;
            } 
            // fall through
          case 116: break;
          case 43: 
            { return PROPERTY;
            } 
            // fall through
          case 117: break;
          case 44: 
            { return SNIPPET;
            } 
            // fall through
          case 118: break;
          case 45: 
            { yybegin(xTYPE_REF); return BACKTICK;
            } 
            // fall through
          case 119: break;
          case 46: 
            { if (yylength() - 2 == nBrackets) {
            nBrackets = -1;
            return BLOCK_END;
        }
            } 
            // fall through
          case 120: break;
          case 47: 
            { if (nBrackets == -1) return DASHES;
            } 
            // fall through
          case 121: break;
          case 48: 
            { yybegin(xTYPE_REF); return STRING_LITERAL;
            } 
            // fall through
          case 122: break;
          case 49: 
            { yybegin(xTAG); return TAG_NAME_SEE;
            } 
            // fall through
          case 123: break;
          case 50: 
            { beginType(); return ELLIPSIS;
            } 
            // fall through
          case 124: break;
          case 51: 
            { return ELLIPSIS;
            } 
            // fall through
          case 125: break;
          case 52: 
            { return FUN;
            } 
            // fall through
          case 126: break;
          case 53: 
            { beginType(); return TAG_NAME_TYPE;
            } 
            // fall through
          case 127: break;
          case 54: 
            { return BOOLEAN_LITERAL;
            } 
            // fall through
          case 128: break;
          case 55: 
            { yybegin(xFIELD); return TAG_NAME_FIELD;
            } 
            // fall through
          case 129: break;
          case 56: 
            { yybegin(xALIAS); return TAG_NAME_ALIAS;
            } 
            // fall through
          case 130: break;
          case 57: 
            { yybegin(xCLASS); return TAG_NAME_SHAPE;
            } 
            // fall through
          case 131: break;
          case 58: 
            { yybegin(xPARAM); return TAG_NAME_PARAM;
            } 
            // fall through
          case 132: break;
          case 59: 
            { yybegin(xCLASS); return TAG_NAME_CLASS;
            } 
            // fall through
          case 133: break;
          case 60: 
            { beginType(); return TAG_NAME_RETURN;
            } 
            // fall through
          case 134: break;
          case 61: 
            { return TAG_NAME_PUBLIC;
            } 
            // fall through
          case 135: break;
          case 62: 
            { yybegin(xCLASS); return TAG_NAME_MODULE;
            } 
            // fall through
          case 136: break;
          case 63: 
            { yybegin(xPARAM); return TAG_NAME_VARARG;
            } 
            // fall through
          case 137: break;
          case 64: 
            { _typeReq = true; return VARARG;
            } 
            // fall through
          case 138: break;
          case 65: 
            { yybegin(xFIELD_ID); return PUBLIC;
            } 
            // fall through
          case 139: break;
          case 66: 
            { nBrackets = yylength() - 7; yybegin(xBODY); return BLOCK_BEGIN;
            } 
            // fall through
          case 140: break;
          case 67: 
            { return TAG_NAME_PRIVATE;
            } 
            // fall through
          case 141: break;
          case 68: 
            { yybegin(xGENERIC); return TAG_NAME_GENERIC;
            } 
            // fall through
          case 142: break;
          case 69: 
            { yybegin(xFIELD_ID); return PRIVATE;
            } 
            // fall through
          case 143: break;
          case 70: 
            { yybegin(xTAG_WITH_ID); return TAG_NAME_LANGUAGE;
            } 
            // fall through
          case 144: break;
          case 71: 
            { yybegin(xSUPPRESS); return TAG_NAME_SUPPRESS;
            } 
            // fall through
          case 145: break;
          case 72: 
            { beginType(); return TAG_NAME_OVERLOAD;
            } 
            // fall through
          case 146: break;
          case 73: 
            { return TAG_NAME_PROTECTED;
            } 
            // fall through
          case 147: break;
          case 74: 
            { yybegin(xFIELD_ID); return PROTECTED;
            } 
            // fall through
          case 148: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
