/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.tang.intellij.lua.comment.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.tang.intellij.lua.comment.psi.LuaDocTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>doc.flex</tt>
 */
public class _LuaDocLexer implements FlexLexer, LuaDocTypes {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int xBODY = 2;
  public static final int xTAG = 4;
  public static final int xTAG_WITH_ID = 6;
  public static final int xTAG_NAME = 8;
  public static final int xCOMMENT_STRING = 10;
  public static final int xPARAM = 12;
  public static final int xTYPE_REF = 14;
  public static final int xCLASS = 16;
  public static final int xCLASS_PARAMS = 18;
  public static final int xCLASS_PARAM_LIST = 20;
  public static final int xCLASS_EXTEND = 22;
  public static final int xFIELD = 24;
  public static final int xFIELD_ID = 26;
  public static final int xFIELD_VALUE = 28;
  public static final int xGENERIC = 30;
  public static final int xALIAS = 32;
  public static final int xALIAS_PARAMS = 34;
  public static final int xALIAS_PARAM_LIST = 36;
  public static final int xSUPPRESS = 38;
  public static final int xDOUBLE_QUOTED_STRING = 40;
  public static final int xSINGLE_QUOTED_STRING = 42;
  public static final int xBACKTICK_QUOTED_STRING = 44;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 17504 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1"+
    "\21\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\21\1\25\1\57\1\60\5\21\2\25\1\61"+
    "\7\21\1\25\1\62\20\21\1\25\1\63\1\21\1\64\13\25\1\65\1\25\1\66\22\21\1\67"+
    "\1\70\4\21\1\71\11\21\1\72\1\73\1\74\1\75\1\21\1\76\2\21\1\77\3\21\1\100\2"+
    "\21\1\101\10\21\123\25\1\102\7\25\1\103\1\104\12\25\1\105\15\25\1\106\6\21"+
    "\1\25\1\107\u0582\21\1\110\u017f\21");

  /* The ZZ_CMAP_Y table has 4672 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1"+
    "\17\3\0\1\20\1\21\1\22\1\23\2\24\1\25\3\24\1\25\71\24\1\26\1\24\1\27\1\30"+
    "\1\31\1\32\2\30\16\0\1\33\1\34\1\35\1\36\2\24\1\37\11\24\1\40\21\24\1\41\1"+
    "\42\24\24\1\43\3\24\1\25\1\44\1\43\4\24\1\45\1\46\4\0\1\47\1\50\1\30\3\24"+
    "\2\51\1\30\1\52\1\53\1\0\1\54\5\24\1\55\3\0\1\56\1\57\13\24\1\60\1\47\1\61"+
    "\1\62\1\0\1\63\1\30\1\64\1\65\3\24\3\0\1\66\12\24\1\67\1\0\1\70\1\30\1\0\1"+
    "\71\3\24\1\55\1\72\1\23\2\24\1\67\1\73\1\74\1\75\2\30\3\24\1\76\1\24\1\51"+
    "\6\30\2\24\1\33\1\77\2\30\1\100\5\0\1\101\6\24\1\102\2\0\1\103\1\24\1\104"+
    "\1\0\1\43\1\24\1\105\1\106\1\107\2\24\1\110\1\111\1\112\1\113\1\114\1\64\1"+
    "\115\1\104\1\0\1\116\1\117\1\120\1\121\1\107\2\24\1\110\1\122\1\123\1\124"+
    "\1\125\1\126\1\127\1\130\1\0\1\131\1\30\1\120\1\40\1\37\2\24\1\110\1\132\1"+
    "\112\1\47\1\133\1\134\1\30\1\104\1\0\1\44\1\135\1\120\1\106\1\107\2\24\1\110"+
    "\1\132\1\112\1\113\1\125\1\130\1\115\1\104\1\0\1\44\1\30\1\136\1\137\1\140"+
    "\1\141\1\117\1\137\1\24\1\142\1\143\1\144\1\145\1\30\1\130\1\0\1\30\1\44\1"+
    "\146\1\33\1\110\2\24\1\110\1\24\1\147\1\150\1\144\1\151\1\51\1\104\1\0\2\30"+
    "\1\105\1\33\1\110\2\24\1\110\1\152\1\112\1\150\1\144\1\151\1\35\1\104\1\0"+
    "\1\153\1\30\1\146\1\33\1\110\4\24\1\154\1\150\1\155\1\156\1\45\1\104\1\0\1"+
    "\30\1\42\1\157\1\24\1\25\1\42\2\24\1\37\1\160\1\25\1\161\1\162\1\0\1\130\1"+
    "\0\1\163\1\30\1\43\5\24\1\164\1\165\1\166\1\167\1\0\1\170\4\30\1\171\1\172"+
    "\1\173\1\43\1\174\1\175\1\164\1\176\1\177\1\52\1\0\1\200\4\30\1\134\2\30\1"+
    "\170\1\0\1\170\1\201\1\202\1\24\1\43\3\24\1\31\1\46\1\0\1\150\1\203\1\0\1"+
    "\46\3\0\1\204\1\205\7\30\5\24\1\55\1\0\1\206\1\0\1\170\1\67\1\207\1\210\1"+
    "\211\1\212\1\24\1\213\1\214\1\0\1\52\4\24\1\40\1\22\5\24\1\215\51\24\1\140"+
    "\1\25\1\140\5\24\1\140\4\24\1\140\1\25\1\140\1\24\1\25\7\24\1\140\10\24\1"+
    "\216\4\30\2\24\2\30\12\24\2\77\1\43\114\24\1\106\2\24\1\217\2\24\1\51\11\24"+
    "\1\137\1\24\1\134\1\24\1\33\1\220\1\30\2\24\1\220\1\30\2\24\1\221\1\30\1\24"+
    "\1\33\1\222\1\30\6\24\1\223\3\0\1\224\1\225\1\0\1\170\3\30\1\226\1\0\1\170"+
    "\13\24\1\30\1\227\4\24\1\230\10\24\1\77\1\30\3\24\1\25\1\0\1\2\1\0\1\2\1\130"+
    "\1\0\3\24\1\77\1\31\1\30\5\24\1\116\3\24\1\27\1\0\1\170\4\30\2\24\1\166\1"+
    "\2\6\24\1\203\1\167\3\0\1\113\1\0\1\170\1\0\1\170\1\45\1\30\1\0\1\52\10\30"+
    "\1\231\5\24\1\223\1\0\1\231\1\116\1\0\1\170\1\30\1\232\1\2\1\30\1\233\3\24"+
    "\1\103\1\211\1\0\1\71\4\24\1\67\1\0\1\2\1\30\4\24\1\223\2\0\1\30\1\0\1\234"+
    "\1\0\1\71\3\24\1\77\1\24\1\134\10\30\1\235\2\0\1\236\1\237\1\170\30\24\7\0"+
    "\1\240\42\24\2\77\4\24\2\77\1\24\1\241\3\24\1\77\6\24\1\33\1\177\1\242\1\31"+
    "\1\243\1\116\1\24\1\31\1\242\1\31\1\244\1\245\3\30\1\246\1\30\1\45\1\134\1"+
    "\30\1\247\1\250\1\150\1\0\1\44\1\45\2\30\1\24\1\31\4\24\2\30\1\0\1\204\1\251"+
    "\1\0\1\252\1\30\1\253\1\42\1\160\1\254\1\32\1\255\1\24\1\256\1\257\1\260\2"+
    "\30\5\24\1\134\116\30\5\24\1\25\5\24\1\25\20\24\1\31\1\261\1\262\1\30\4\24"+
    "\1\40\1\22\7\24\1\45\1\30\1\64\2\24\1\25\1\30\10\25\4\0\5\30\1\45\72\30\1"+
    "\263\3\30\1\43\1\213\1\254\1\31\1\43\11\24\1\25\1\264\1\43\12\24\1\215\1\257"+
    "\4\24\1\25\1\43\12\24\1\25\2\30\3\24\1\51\6\30\170\24\1\77\11\30\75\24\1\51"+
    "\2\30\21\24\1\31\10\30\5\24\1\77\41\24\1\31\2\24\1\0\1\262\2\30\5\24\1\166"+
    "\1\100\1\265\3\24\1\67\12\24\1\170\3\30\1\45\1\24\1\42\14\24\1\107\3\24\1"+
    "\25\1\24\7\30\1\45\1\24\1\266\1\267\2\24\1\55\2\30\1\134\6\24\1\116\1\30\1"+
    "\71\5\24\1\223\1\0\1\52\1\30\1\0\1\170\2\0\1\71\1\270\1\0\1\71\2\24\1\67\1"+
    "\52\2\24\1\166\1\0\1\2\1\30\3\24\1\31\1\101\5\24\1\55\1\0\1\252\1\45\1\0\1"+
    "\170\1\271\1\24\1\0\1\272\5\24\1\103\1\167\1\30\1\267\1\273\1\0\1\170\2\24"+
    "\1\25\1\274\6\24\1\210\1\275\1\230\2\30\1\276\1\24\1\55\1\277\1\30\3\300\1"+
    "\30\2\25\5\24\1\215\1\77\1\30\16\24\1\55\1\301\1\0\1\170\64\24\1\116\1\30"+
    "\2\24\1\25\1\302\5\24\1\116\40\30\55\24\1\77\15\24\1\27\4\30\1\25\1\30\1\302"+
    "\1\303\1\24\1\110\1\25\1\177\1\304\15\24\1\27\3\30\1\302\54\24\1\77\2\30\10"+
    "\24\1\42\6\24\5\30\1\24\1\31\2\0\2\30\2\0\1\117\2\30\1\257\3\30\1\44\1\33"+
    "\20\24\1\305\1\247\1\30\1\0\1\170\1\43\2\24\1\121\1\43\2\24\1\51\1\306\12"+
    "\24\1\25\3\42\1\307\1\310\2\30\1\311\1\24\1\152\2\24\1\25\2\24\1\312\1\24"+
    "\1\77\1\24\1\77\4\30\17\24\1\51\10\30\6\24\1\31\20\30\1\313\20\30\3\24\1\31"+
    "\6\24\1\134\1\30\1\252\3\30\4\24\1\30\1\257\3\24\1\51\4\24\1\67\1\314\3\24"+
    "\1\77\4\24\1\116\1\24\1\254\5\30\23\24\1\77\1\0\1\170\4\24\1\116\4\24\1\116"+
    "\5\24\1\30\6\24\1\116\23\30\46\24\1\25\1\30\2\24\1\77\1\30\1\24\23\30\1\77"+
    "\1\110\4\24\1\40\1\315\2\24\1\77\1\30\2\24\1\25\1\30\3\24\1\25\10\30\2\24"+
    "\1\316\1\30\2\24\1\77\1\30\3\24\1\27\10\30\7\24\1\306\10\30\1\317\1\100\1"+
    "\152\1\43\2\24\1\116\1\124\4\30\3\24\1\31\3\24\1\31\4\30\1\24\1\43\2\24\1"+
    "\320\3\30\6\24\1\77\1\30\2\24\1\77\1\30\2\24\1\51\1\30\2\24\1\27\15\30\11"+
    "\24\1\134\6\30\6\24\1\51\1\30\6\24\1\51\41\30\1\233\6\24\1\0\1\167\3\30\1"+
    "\130\1\0\1\30\1\64\1\233\5\24\1\0\1\321\2\30\3\24\1\134\1\0\1\170\1\233\3"+
    "\24\1\166\1\0\1\150\1\0\2\30\4\24\1\322\1\30\1\233\5\24\1\55\1\0\1\323\1\324"+
    "\1\0\1\325\4\30\2\24\1\37\2\24\1\223\1\0\1\205\10\30\1\25\1\255\1\24\1\40"+
    "\1\24\1\134\5\24\1\166\1\0\1\314\1\0\1\170\1\146\1\106\1\107\2\24\1\110\1"+
    "\132\1\112\1\113\1\125\1\145\1\257\1\104\2\204\21\30\6\24\1\203\1\0\1\206"+
    "\1\51\1\0\1\170\4\30\6\24\2\0\1\326\1\30\1\0\1\170\24\30\5\24\1\166\1\52\1"+
    "\0\1\252\2\30\1\273\4\30\6\24\2\0\1\327\1\30\1\0\1\170\4\30\5\24\1\55\1\0"+
    "\1\30\1\0\1\170\6\30\3\24\1\330\1\0\1\2\1\0\1\170\54\30\10\24\1\0\1\170\1"+
    "\30\1\45\40\30\1\103\1\233\4\24\1\55\1\331\1\64\1\30\1\103\1\101\4\24\1\243"+
    "\1\213\1\0\1\170\4\30\7\24\1\134\40\30\1\24\1\110\3\24\1\166\1\167\1\0\1\134"+
    "\1\30\1\0\1\170\2\30\1\42\3\24\1\332\2\0\1\46\1\167\11\30\1\25\1\37\4\24\1"+
    "\333\1\334\1\214\1\30\1\0\1\170\24\30\63\24\1\27\14\30\15\24\1\25\2\30\30"+
    "\24\1\116\27\30\5\24\1\25\72\30\10\24\1\25\67\30\7\24\1\134\3\24\1\25\1\0"+
    "\1\170\14\30\3\24\1\77\1\204\1\30\6\24\1\167\1\30\1\116\1\30\1\0\1\170\1\302"+
    "\2\24\1\257\2\24\56\30\10\24\1\31\1\30\1\103\4\0\1\167\1\30\1\64\1\233\1\24"+
    "\10\30\1\27\3\30\75\24\1\31\2\30\36\24\1\51\41\30\43\24\1\25\12\30\61\24\1"+
    "\116\40\30\15\24\1\51\1\24\1\31\1\24\1\134\1\24\1\335\1\2\127\30\1\336\1\337"+
    "\2\0\1\340\1\2\3\30\1\341\22\30\1\324\67\30\12\24\1\33\10\24\1\33\1\342\1"+
    "\343\1\24\1\344\1\152\7\24\1\40\1\345\2\33\3\24\1\346\1\177\1\42\1\110\51"+
    "\24\1\77\3\24\1\110\2\24\1\215\3\24\1\215\2\24\1\33\3\24\1\33\2\24\1\25\3"+
    "\24\1\25\3\24\1\110\3\24\1\110\2\24\1\215\1\347\14\0\1\167\1\232\5\0\1\204"+
    "\1\313\1\30\1\350\2\30\1\232\1\46\1\0\52\30\1\167\2\0\1\351\1\352\1\314\72"+
    "\30\30\24\1\31\1\30\1\167\5\30\10\24\1\223\1\314\1\0\1\170\24\30\1\152\3\24"+
    "\1\171\1\43\1\215\1\353\1\253\1\354\1\171\1\241\1\171\2\215\1\127\1\24\1\37"+
    "\1\24\1\116\1\355\1\37\1\24\1\116\50\30\32\24\1\25\5\30\106\24\1\31\1\30\33"+
    "\24\1\77\120\24\1\27\1\30\146\24\1\134\3\30\3\24\1\77\74\30\1\126\3\30\14"+
    "\0\20\30\36\0\2\30");

  /* The ZZ_CMAP_A table has 1904 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\16\1\3\1\2\1\42\1\43\1\1\6\16\4\15\1\3\1\15\1\13\1\72\1\4\2\15\1\17\1"+
    "\66\1\67\1\15\1\24\1\61\1\7\1\6\1\15\1\26\11\21\1\63\1\15\1\62\1\11\1\64\1"+
    "\15\1\44\4\22\1\23\1\22\5\4\1\31\3\4\1\25\4\4\1\30\2\4\1\27\2\4\1\10\1\14"+
    "\1\12\1\15\1\4\1\20\1\37\1\60\1\53\1\46\1\35\1\36\1\52\1\54\1\45\2\4\1\40"+
    "\1\50\1\56\1\55\1\47\1\4\1\33\1\41\1\32\1\34\1\51\1\4\1\27\1\57\1\4\1\70\1"+
    "\65\1\71\1\15\6\16\1\5\2\16\1\0\1\15\4\4\4\15\1\4\2\15\1\16\7\15\1\4\4\15"+
    "\1\4\5\15\17\4\1\15\2\4\4\15\4\4\16\15\5\4\7\15\1\4\1\15\1\4\1\15\5\4\1\15"+
    "\2\4\2\15\4\4\1\15\1\4\6\15\1\4\1\15\3\4\1\15\1\4\1\15\4\4\1\15\13\4\1\15"+
    "\3\4\1\15\5\16\2\15\6\4\1\15\7\4\1\15\1\4\15\15\1\4\1\15\15\16\1\15\1\16\1"+
    "\15\2\16\1\15\2\16\1\15\1\16\3\4\5\15\6\16\5\15\1\4\4\15\3\16\1\15\1\16\3"+
    "\15\3\4\7\16\4\15\2\4\1\16\13\4\1\15\1\4\7\16\2\4\2\16\1\15\4\16\2\4\2\16"+
    "\3\4\2\15\1\4\7\15\1\16\1\4\1\16\6\4\3\16\2\15\11\4\3\16\1\4\6\15\2\16\6\4"+
    "\4\16\2\4\2\15\2\16\1\4\11\16\1\4\3\16\1\4\5\16\2\15\1\4\3\16\4\15\6\4\6\15"+
    "\10\16\6\4\3\16\1\4\2\16\1\4\7\16\2\4\2\16\2\15\2\16\1\4\3\16\1\15\10\4\2"+
    "\15\2\4\2\15\6\4\1\15\7\4\1\15\1\4\3\15\4\4\2\15\1\16\1\4\7\16\2\15\2\16\2"+
    "\15\3\16\1\4\5\15\2\4\1\15\5\4\7\15\2\4\4\15\3\16\1\15\6\4\4\15\2\4\1\15\2"+
    "\4\1\15\2\4\1\15\2\4\2\15\1\16\1\15\5\16\4\15\2\16\2\15\3\16\3\15\1\16\7\15"+
    "\4\4\1\15\1\4\7\15\4\16\3\4\1\16\2\15\1\4\1\15\2\4\1\15\3\4\2\16\1\15\3\16"+
    "\2\15\1\4\10\15\1\4\6\16\2\15\1\16\1\4\1\15\6\4\3\15\3\4\1\15\4\4\3\15\2\4"+
    "\1\15\1\4\1\15\4\4\4\15\5\16\3\15\3\16\1\15\4\16\2\15\1\4\6\15\5\16\1\15\5"+
    "\4\3\15\1\4\7\16\1\15\2\16\5\15\2\16\1\15\4\4\1\15\3\4\1\15\2\4\5\15\3\4\2"+
    "\16\1\4\3\16\1\15\4\16\1\4\5\15\3\4\1\16\2\15\2\16\1\15\7\4\1\15\1\4\4\15"+
    "\1\16\4\15\6\16\1\15\1\16\3\15\2\16\4\15\1\4\1\16\2\4\7\16\4\15\10\4\10\16"+
    "\1\15\2\16\7\15\2\4\1\15\1\4\2\15\2\4\1\15\1\4\2\15\1\4\6\15\4\4\1\15\3\4"+
    "\1\15\1\4\1\15\1\4\2\15\2\4\1\15\3\4\2\16\1\15\2\16\1\4\2\15\5\4\1\15\1\4"+
    "\1\15\2\16\2\15\4\4\5\15\1\16\1\15\1\16\1\15\1\16\4\15\2\16\5\4\10\16\11\15"+
    "\1\16\1\15\7\16\1\4\2\16\4\4\3\16\1\4\3\16\2\4\7\16\3\4\4\16\5\4\14\16\1\4"+
    "\1\16\3\4\1\15\7\4\2\15\3\16\1\0\11\4\3\16\3\15\2\4\2\16\4\15\1\4\1\15\2\16"+
    "\4\15\4\4\10\16\3\15\1\4\3\15\2\4\1\16\5\15\4\16\1\15\5\4\2\16\2\4\1\16\1"+
    "\4\5\15\5\16\3\4\3\15\10\16\5\4\2\16\3\15\3\4\3\16\1\15\5\16\4\4\1\16\4\4"+
    "\3\16\2\4\3\16\1\15\5\16\1\15\1\4\1\15\1\4\1\15\1\4\1\15\1\4\2\15\3\4\1\15"+
    "\6\4\2\15\2\4\13\0\5\16\2\42\5\16\1\0\4\15\1\4\12\15\1\0\1\15\1\16\3\15\4"+
    "\16\11\15\1\4\4\15\1\4\1\15\5\4\2\15\1\4\1\15\4\4\1\15\3\4\2\15\4\4\5\15\5"+
    "\4\4\15\1\4\4\15\4\4\3\16\2\4\4\15\1\0\4\15\3\4\1\15\2\16\2\15\3\4\6\16\1"+
    "\15\3\4\1\16\3\4\1\16\4\4\1\16\4\4\3\15\1\4\1\15\1\4\2\15\5\4\1\16\2\4\2\16"+
    "\5\4\1\15\4\4\2\16\4\15\1\4\3\16\2\4\1\16\5\4\2\16\3\15\3\4\4\15\3\4\2\16"+
    "\2\15\6\4\1\15\3\16\1\15\2\16\5\15\5\4\5\15\1\4\1\16\3\4\1\15\2\4\1\15\7\4"+
    "\2\15\1\16\6\15\2\4\2\15\3\4\3\15\2\4\3\15\2\4\2\15\3\16\4\15\3\4\1\15\2\4"+
    "\1\15\1\4\5\15\1\16\2\15\3\16\5\15\1\4\3\15\1\4\2\15\4\4\1\15\2\4\2\15\1\4"+
    "\3\16\1\15\2\16\1\15\5\4\2\16\1\15\3\16\2\15\1\16\2\15\3\4\1\16\2\15\1\4\1"+
    "\15\1\16\4\4\5\15\3\16\3\15\2\16\1\4\1\15\1\4\3\15\4\16\2\4\1\15\1\4\1\16"+
    "\3\15\1\4\3\15\2\4\3\15\5\16\1\4\4\16\3\15\6\16\1\4\6\16\3\15\1\16\1\15\2"+
    "\16\1\15\1\16\2\4\3\15\2\16\6\15\5\16\3\15\6\16\2\15\3\16\2\15\4\16\4\15\1"+
    "\4\2\15\2\4\2\15\4\4\1\15\4\4\1\15\1\4\1\15\6\4\2\15\5\4\1\15\4\4\1\15\4\4"+
    "\2\15\2\16\4\15\1\16\3\15\1\16\2\15\7\16\1\15\2\16\1\15\2\16\1\15\1\4\1\15"+
    "\1\4\5\15\1\4\1\15\1\4\1\15\3\4\1\15\3\4\1\15\3\4");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\21\0\1\2\1\3\1\2\1\4\2\5"+
    "\1\6\2\4\1\7\1\3\1\10\1\3\1\11\1\12"+
    "\1\13\15\14\1\1\1\6\1\1\1\15\1\3\1\16"+
    "\1\3\1\17\1\20\1\21\1\22\1\23\2\24\3\16"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\15\3\46\2\2\1\47\1\50\1\51\1\52"+
    "\1\53\2\3\1\54\1\3\1\55\1\0\1\56\1\0"+
    "\1\57\20\14\1\57\2\0\3\24\3\0\4\16\2\15"+
    "\1\0\1\60\5\0\6\14\1\61\12\14\1\62\1\63"+
    "\1\24\1\0\2\24\1\16\1\64\2\16\3\15\1\0"+
    "\1\65\17\14\1\0\1\24\1\0\1\66\1\16\3\15"+
    "\1\0\1\14\1\67\1\70\2\14\1\71\3\14\1\72"+
    "\3\14\1\73\1\14\1\24\1\16\3\15\1\0\1\74"+
    "\4\14\1\75\1\76\1\77\2\14\1\24\1\100\2\15"+
    "\1\101\1\102\2\14\1\103\1\14\1\104\1\14\1\105"+
    "\1\15\1\106\1\107\1\14\1\110\1\15\1\111\1\112";

  private static int [] zzUnpackAction() {
    int [] result = new int[252];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\u0162\0\u019d"+
    "\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4\0\u02ff\0\u033a\0\u0375"+
    "\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c\0\u04d7\0\u0512\0\u054d"+
    "\0\u054d\0\u0588\0\u054d\0\u05c3\0\u054d\0\u05fe\0\u0639\0\u0674"+
    "\0\u054d\0\u05c3\0\u06af\0\u0674\0\u054d\0\u054d\0\u06ea\0\u0725"+
    "\0\u0760\0\u079b\0\u07d6\0\u0811\0\u084c\0\u0887\0\u08c2\0\u08fd"+
    "\0\u0938\0\u0973\0\u09ae\0\u09e9\0\u0a24\0\u0a5f\0\u0a9a\0\u0ad5"+
    "\0\u0b10\0\u0b4b\0\u0b86\0\u054d\0\u0674\0\u054d\0\u054d\0\u054d"+
    "\0\u0bc1\0\u0bfc\0\u0c37\0\u0c72\0\u0cad\0\u054d\0\u054d\0\u054d"+
    "\0\u054d\0\u054d\0\u054d\0\u054d\0\u054d\0\u054d\0\u0ce8\0\u054d"+
    "\0\u054d\0\u054d\0\u054d\0\u054d\0\u054d\0\u054d\0\u0d23\0\u054d"+
    "\0\u05c3\0\u0674\0\u05c3\0\u0674\0\u0d5e\0\u054d\0\u054d\0\u054d"+
    "\0\u0d99\0\u0dd4\0\u0e0f\0\u0e4a\0\u0e85\0\u054d\0\u0ec0\0\u0639"+
    "\0\u0674\0\u054d\0\u0efb\0\u0f36\0\u0f71\0\u0fac\0\u0fe7\0\u1022"+
    "\0\u105d\0\u1098\0\u10d3\0\u110e\0\u1149\0\u1184\0\u11bf\0\u11fa"+
    "\0\u1235\0\u1270\0\u0a24\0\u12ab\0\u12e6\0\u1321\0\u135c\0\u1397"+
    "\0\u13d2\0\u140d\0\u1448\0\u1483\0\u14be\0\u14f9\0\u1534\0\u156f"+
    "\0\u15aa\0\u0dd4\0\u054d\0\u15e5\0\u0e0f\0\u1620\0\u0e85\0\u165b"+
    "\0\u1696\0\u16d1\0\u170c\0\u1747\0\u1782\0\u17bd\0\u0725\0\u17f8"+
    "\0\u1833\0\u186e\0\u18a9\0\u18e4\0\u191f\0\u195a\0\u1995\0\u19d0"+
    "\0\u1a0b\0\u054d\0\u054d\0\u1a46\0\u1321\0\u054d\0\u1a81\0\u1abc"+
    "\0\u0b4b\0\u1af7\0\u1b32\0\u1b6d\0\u1ba8\0\u1be3\0\u1c1e\0\u0725"+
    "\0\u1c59\0\u1c94\0\u1ccf\0\u1d0a\0\u1d45\0\u1d80\0\u1dbb\0\u1df6"+
    "\0\u1e31\0\u1e6c\0\u1ea7\0\u1ee2\0\u1f1d\0\u1f58\0\u1f93\0\u1fce"+
    "\0\u2009\0\u2044\0\u0b4b\0\u207f\0\u20ba\0\u20f5\0\u2130\0\u216b"+
    "\0\u21a6\0\u0725\0\u0725\0\u21e1\0\u221c\0\u0725\0\u2257\0\u2292"+
    "\0\u22cd\0\u0725\0\u2308\0\u2343\0\u237e\0\u0725\0\u23b9\0\u23f4"+
    "\0\u242f\0\u246a\0\u24a5\0\u24e0\0\u251b\0\u0725\0\u2556\0\u2591"+
    "\0\u25cc\0\u2607\0\u0725\0\u0725\0\u0725\0\u2642\0\u267d\0\u26b8"+
    "\0\u0b4b\0\u26f3\0\u272e\0\u0ad5\0\u251b\0\u2769\0\u27a4\0\u0725"+
    "\0\u27df\0\u0725\0\u281a\0\u0ad5\0\u2855\0\u0725\0\u0725\0\u2890"+
    "\0\u0725\0\u28cb\0\u0725\0\u0ad5";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[252];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\30\2\31\2\30\1\31\1\30\1\32\32\30\2\31"+
    "\27\30\1\33\1\34\1\35\1\36\1\33\1\31\1\33"+
    "\1\37\2\33\1\40\27\33\1\31\1\36\1\41\26\33"+
    "\1\31\1\42\1\31\1\36\1\43\5\31\1\44\7\31"+
    "\2\43\1\31\1\43\1\31\13\43\1\31\1\36\1\45"+
    "\14\43\11\31\1\46\1\31\1\34\1\35\1\36\1\47"+
    "\5\31\1\44\7\31\2\47\1\31\1\47\1\31\13\47"+
    "\1\31\1\36\1\31\14\47\13\31\1\42\1\31\1\36"+
    "\1\50\5\31\1\44\7\31\2\50\1\31\1\50\1\31"+
    "\3\50\1\51\1\52\2\50\1\53\1\54\1\55\1\56"+
    "\1\31\1\36\1\31\2\50\1\57\1\60\1\61\1\62"+
    "\1\63\1\50\1\64\3\50\12\31\1\65\1\34\1\35"+
    "\1\66\6\65\1\67\30\65\1\66\27\65\1\31\1\34"+
    "\1\35\1\36\1\70\1\31\1\71\3\31\1\44\7\31"+
    "\2\70\1\31\1\70\1\31\13\70\1\31\1\36\1\31"+
    "\14\70\13\31\1\34\1\35\1\36\1\72\1\31\1\73"+
    "\1\31\1\74\1\31\1\75\1\76\3\31\1\77\1\100"+
    "\1\101\2\72\1\31\1\72\1\102\3\72\1\103\3\72"+
    "\1\104\3\72\1\31\1\36\1\45\4\72\1\105\7\72"+
    "\1\106\1\107\1\110\1\111\1\112\1\113\1\114\1\115"+
    "\1\116\2\31\1\34\1\35\1\36\1\117\5\31\1\44"+
    "\7\31\2\117\1\31\1\117\1\31\13\117\1\31\1\36"+
    "\1\31\14\117\12\31\62\120\1\121\10\120\3\31\1\36"+
    "\1\43\5\31\1\44\7\31\2\43\1\31\1\43\1\31"+
    "\13\43\1\31\1\36\1\31\14\43\1\122\1\31\1\123"+
    "\1\124\7\31\1\34\1\35\1\36\6\31\1\44\30\31"+
    "\1\36\17\31\1\125\10\31\1\34\1\35\1\36\1\70"+
    "\3\31\1\126\1\31\1\44\7\31\2\70\1\31\1\70"+
    "\1\31\13\70\1\31\1\36\1\31\2\70\1\127\11\70"+
    "\13\31\1\34\1\35\1\36\1\70\3\31\1\126\1\31"+
    "\1\44\7\31\2\70\1\31\1\70\1\31\13\70\1\31"+
    "\1\36\1\31\14\70\12\31\1\130\1\131\1\130\1\36"+
    "\6\130\1\132\30\130\1\36\27\130\1\30\1\133\1\30"+
    "\1\36\1\43\5\30\1\134\7\30\2\43\1\30\1\43"+
    "\1\30\13\43\1\30\1\36\1\30\14\43\1\122\1\30"+
    "\1\125\7\30\1\31\1\34\1\35\1\36\1\135\5\31"+
    "\1\44\7\31\2\135\1\31\1\135\1\31\13\135\1\31"+
    "\1\36\1\31\14\135\12\31\62\130\1\136\10\130\3\31"+
    "\1\36\1\43\5\31\1\44\7\31\2\43\1\31\1\43"+
    "\1\31\13\43\1\31\1\36\1\31\14\43\1\122\1\31"+
    "\1\137\1\140\6\31\1\30\1\133\1\30\1\36\1\141"+
    "\5\30\1\134\7\30\2\141\1\30\1\141\1\30\13\141"+
    "\1\30\1\36\1\30\14\141\1\122\11\30\13\31\1\142"+
    "\76\31\1\143\53\31\14\144\1\145\3\144\1\146\52\144"+
    "\102\0\1\147\65\0\1\35\73\0\1\36\37\0\1\36"+
    "\36\0\1\150\74\0\1\151\1\152\64\0\2\43\10\0"+
    "\1\43\2\0\3\43\1\0\15\43\3\0\14\43\16\0"+
    "\3\47\7\0\1\47\2\0\3\47\1\0\15\47\3\0"+
    "\14\47\16\0\2\50\10\0\1\50\2\0\3\50\1\0"+
    "\15\50\3\0\14\50\16\0\2\50\10\0\1\50\2\0"+
    "\3\50\1\0\15\50\3\0\12\50\1\153\1\50\16\0"+
    "\2\50\10\0\1\50\2\0\3\50\1\0\10\50\1\154"+
    "\4\50\3\0\14\50\16\0\2\50\10\0\1\50\2\0"+
    "\3\50\1\0\15\50\3\0\1\155\13\50\16\0\2\50"+
    "\10\0\1\50\2\0\3\50\1\0\13\50\1\156\1\50"+
    "\3\0\14\50\16\0\2\50\10\0\1\50\2\0\3\50"+
    "\1\0\12\50\1\157\2\50\3\0\14\50\16\0\2\50"+
    "\10\0\1\50\2\0\3\50\1\0\7\50\1\160\1\161"+
    "\4\50\3\0\7\50\1\162\4\50\16\0\2\50\10\0"+
    "\1\50\2\0\3\50\1\0\6\50\1\163\1\164\2\50"+
    "\1\165\2\50\3\0\14\50\16\0\2\50\10\0\1\50"+
    "\2\0\3\50\1\0\15\50\3\0\10\50\1\166\3\50"+
    "\16\0\2\50\10\0\1\50\2\0\3\50\1\0\12\50"+
    "\1\167\2\50\3\0\14\50\16\0\2\50\10\0\1\50"+
    "\2\0\3\50\1\0\10\50\1\170\4\50\3\0\14\50"+
    "\16\0\2\50\10\0\1\50\2\0\3\50\1\0\13\50"+
    "\1\171\1\50\3\0\14\50\16\0\2\50\10\0\1\50"+
    "\2\0\3\50\1\0\15\50\3\0\4\50\1\172\7\50"+
    "\12\0\1\65\2\0\71\65\2\0\1\66\37\65\1\66"+
    "\30\65\2\0\6\65\1\67\1\173\60\65\4\0\2\70"+
    "\10\0\1\70\2\0\3\70\1\0\15\70\3\0\14\70"+
    "\20\0\1\174\70\0\2\72\10\0\1\72\2\0\3\72"+
    "\1\0\15\72\3\0\14\72\20\0\1\175\12\0\1\176"+
    "\4\0\1\176\52\0\1\177\12\0\1\101\1\0\1\200"+
    "\2\0\1\101\1\0\1\201\1\202\3\0\1\200\43\0"+
    "\1\177\12\0\1\101\1\0\1\200\2\0\1\101\1\203"+
    "\1\201\1\202\3\0\1\200\41\0\2\72\10\0\1\72"+
    "\2\0\3\72\1\0\6\72\1\204\6\72\3\0\14\72"+
    "\16\0\2\72\10\0\1\72\2\0\3\72\1\0\7\72"+
    "\1\205\2\72\1\206\2\72\3\0\14\72\16\0\2\72"+
    "\10\0\1\72\2\0\3\72\1\0\12\72\1\207\2\72"+
    "\3\0\14\72\16\0\2\117\10\0\1\117\2\0\3\117"+
    "\1\0\15\117\3\0\14\117\16\0\2\70\10\0\1\70"+
    "\2\0\3\70\1\0\6\70\1\210\1\211\5\70\3\0"+
    "\14\70\16\0\2\135\10\0\1\135\2\0\3\135\1\0"+
    "\15\135\3\0\14\135\16\0\3\141\7\0\1\141\2\0"+
    "\3\141\1\0\15\141\3\0\14\141\12\0\13\212\1\213"+
    "\1\214\56\212\14\215\1\216\2\215\1\213\53\215\14\144"+
    "\1\217\3\144\1\0\52\144\1\0\2\144\1\0\1\144"+
    "\1\0\34\144\2\0\27\144\10\0\1\220\66\0\2\50"+
    "\10\0\1\50\2\0\3\50\1\0\15\50\3\0\2\50"+
    "\1\221\11\50\16\0\2\50\10\0\1\50\2\0\3\50"+
    "\1\0\5\50\1\222\7\50\3\0\14\50\16\0\2\50"+
    "\10\0\1\50\2\0\3\50\1\0\10\50\1\223\4\50"+
    "\3\0\14\50\16\0\2\50\10\0\1\50\2\0\3\50"+
    "\1\0\15\50\3\0\1\224\13\50\16\0\2\50\10\0"+
    "\1\50\2\0\3\50\1\0\15\50\3\0\11\50\1\225"+
    "\2\50\16\0\2\50\10\0\1\50\2\0\3\50\1\0"+
    "\15\50\3\0\2\50\1\226\11\50\16\0\2\50\10\0"+
    "\1\50\2\0\3\50\1\0\10\50\1\227\4\50\3\0"+
    "\14\50\16\0\2\50\10\0\1\50\2\0\3\50\1\0"+
    "\12\50\1\230\2\50\3\0\14\50\16\0\2\50\10\0"+
    "\1\50\2\0\3\50\1\0\15\50\3\0\1\231\7\50"+
    "\1\232\3\50\16\0\2\50\10\0\1\50\2\0\3\50"+
    "\1\0\15\50\3\0\13\50\1\233\16\0\2\50\10\0"+
    "\1\50\2\0\3\50\1\0\6\50\1\234\6\50\3\0"+
    "\14\50\16\0\2\50\10\0\1\50\2\0\3\50\1\0"+
    "\15\50\3\0\1\50\1\235\12\50\16\0\2\50\10\0"+
    "\1\50\2\0\3\50\1\0\6\50\1\236\6\50\3\0"+
    "\14\50\16\0\2\50\10\0\1\50\2\0\3\50\1\0"+
    "\15\50\3\0\11\50\1\237\2\50\16\0\2\50\10\0"+
    "\1\50\2\0\3\50\1\0\12\50\1\240\2\50\3\0"+
    "\14\50\16\0\2\50\10\0\1\50\2\0\3\50\1\0"+
    "\10\50\1\241\4\50\3\0\14\50\20\0\1\242\72\0"+
    "\1\243\105\0\1\176\4\0\1\176\65\0\1\244\4\0"+
    "\1\244\53\0\1\245\11\0\1\176\2\0\1\245\1\0"+
    "\1\176\75\0\1\202\72\0\1\246\62\0\3\247\2\0"+
    "\1\247\6\0\3\247\6\0\1\247\4\0\1\247\4\0"+
    "\1\247\16\0\2\72\10\0\1\72\2\0\3\72\1\0"+
    "\7\72\1\250\5\72\3\0\14\72\16\0\2\72\10\0"+
    "\1\72\2\0\3\72\1\0\15\72\3\0\11\72\1\251"+
    "\2\72\16\0\2\72\10\0\1\72\2\0\3\72\1\0"+
    "\13\72\1\252\1\72\3\0\14\72\16\0\2\72\10\0"+
    "\1\72\2\0\3\72\1\0\6\72\1\253\6\72\3\0"+
    "\14\72\16\0\2\70\10\0\1\70\2\0\3\70\1\0"+
    "\15\70\3\0\1\254\7\70\1\255\3\70\16\0\2\70"+
    "\10\0\1\70\2\0\3\70\1\0\15\70\3\0\13\70"+
    "\1\256\13\0\2\212\1\0\1\212\1\0\34\212\2\0"+
    "\27\212\1\0\2\215\1\0\1\215\1\0\34\215\2\0"+
    "\27\215\10\0\1\257\1\220\65\0\2\50\10\0\1\50"+
    "\2\0\3\50\1\0\10\50\1\260\4\50\3\0\14\50"+
    "\16\0\2\50\10\0\1\50\2\0\3\50\1\0\7\50"+
    "\1\261\5\50\3\0\14\50\16\0\2\50\10\0\1\50"+
    "\2\0\3\50\1\0\13\50\1\262\1\50\3\0\14\50"+
    "\16\0\2\50\10\0\1\50\2\0\3\50\1\0\12\50"+
    "\1\263\2\50\3\0\14\50\16\0\2\50\10\0\1\50"+
    "\2\0\3\50\1\0\15\50\3\0\5\50\1\264\6\50"+
    "\16\0\2\50\10\0\1\50\2\0\3\50\1\0\15\50"+
    "\3\0\2\50\1\265\11\50\16\0\2\50\10\0\1\50"+
    "\2\0\3\50\1\0\15\50\3\0\2\50\1\266\11\50"+
    "\16\0\2\50\10\0\1\50\2\0\3\50\1\0\15\50"+
    "\3\0\4\50\1\267\7\50\16\0\2\50\10\0\1\50"+
    "\2\0\3\50\1\0\5\50\1\270\7\50\3\0\14\50"+
    "\16\0\2\50\10\0\1\50\2\0\3\50\1\0\13\50"+
    "\1\271\1\50\3\0\14\50\16\0\2\50\10\0\1\50"+
    "\2\0\3\50\1\0\12\50\1\272\2\50\3\0\14\50"+
    "\16\0\2\50\10\0\1\50\2\0\3\50\1\0\7\50"+
    "\1\273\5\50\3\0\14\50\16\0\2\50\10\0\1\50"+
    "\2\0\3\50\1\0\12\50\1\274\2\50\3\0\14\50"+
    "\16\0\2\50\10\0\1\50\2\0\3\50\1\0\10\50"+
    "\1\275\4\50\3\0\14\50\16\0\2\50\10\0\1\50"+
    "\2\0\3\50\1\0\14\50\1\276\3\0\14\50\16\0"+
    "\2\50\10\0\1\50\2\0\3\50\1\0\6\50\1\277"+
    "\6\50\3\0\14\50\33\0\1\244\1\0\1\200\2\0"+
    "\1\244\6\0\1\200\43\0\1\300\12\0\2\247\1\301"+
    "\1\0\1\302\1\247\1\0\1\201\1\202\3\0\1\301"+
    "\2\247\6\0\1\247\1\302\3\0\1\247\4\0\1\247"+
    "\16\0\2\72\10\0\1\72\2\0\3\72\1\0\10\72"+
    "\1\303\4\72\3\0\14\72\16\0\2\72\10\0\1\72"+
    "\2\0\3\72\1\0\14\72\1\250\3\0\14\72\16\0"+
    "\2\72\10\0\1\72\2\0\3\72\1\0\12\72\1\304"+
    "\2\72\3\0\14\72\16\0\2\70\10\0\1\70\2\0"+
    "\3\70\1\0\15\70\3\0\4\70\1\305\7\70\16\0"+
    "\2\70\10\0\1\70\2\0\3\70\1\0\5\70\1\306"+
    "\7\70\3\0\14\70\16\0\2\70\10\0\1\70\2\0"+
    "\3\70\1\0\13\70\1\307\1\70\3\0\14\70\21\0"+
    "\1\310\67\0\2\50\10\0\1\50\2\0\3\50\1\0"+
    "\6\50\1\311\6\50\3\0\14\50\16\0\2\50\10\0"+
    "\1\50\2\0\3\50\1\0\15\50\3\0\1\50\1\312"+
    "\12\50\16\0\2\50\10\0\1\50\2\0\3\50\1\0"+
    "\14\50\1\313\3\0\14\50\16\0\2\50\10\0\1\50"+
    "\2\0\3\50\1\0\7\50\1\314\5\50\3\0\14\50"+
    "\16\0\2\50\10\0\1\50\2\0\3\50\1\0\6\50"+
    "\1\315\6\50\3\0\14\50\16\0\2\50\10\0\1\50"+
    "\2\0\3\50\1\0\10\50\1\316\4\50\3\0\14\50"+
    "\16\0\2\50\10\0\1\50\2\0\3\50\1\0\12\50"+
    "\1\317\2\50\3\0\14\50\16\0\2\50\10\0\1\50"+
    "\2\0\3\50\1\0\10\50\1\320\4\50\3\0\14\50"+
    "\16\0\2\50\10\0\1\50\2\0\3\50\1\0\15\50"+
    "\3\0\1\321\13\50\16\0\2\50\10\0\1\50\2\0"+
    "\3\50\1\0\15\50\3\0\3\50\1\322\10\50\16\0"+
    "\2\50\10\0\1\50\2\0\3\50\1\0\13\50\1\323"+
    "\1\50\3\0\14\50\16\0\2\50\10\0\1\50\2\0"+
    "\3\50\1\0\6\50\1\324\6\50\3\0\14\50\16\0"+
    "\2\50\10\0\1\50\2\0\3\50\1\0\6\50\1\325"+
    "\6\50\3\0\14\50\16\0\2\50\10\0\1\50\2\0"+
    "\3\50\1\0\14\50\1\326\3\0\14\50\16\0\2\50"+
    "\10\0\1\50\2\0\3\50\1\0\13\50\1\327\1\50"+
    "\3\0\14\50\33\0\3\330\2\0\1\330\6\0\3\330"+
    "\6\0\1\330\4\0\1\330\4\0\1\330\20\0\1\300"+
    "\1\245\11\0\2\247\1\301\1\245\1\302\1\247\1\0"+
    "\1\201\1\202\3\0\1\301\2\247\6\0\1\247\1\302"+
    "\3\0\1\247\4\0\1\247\21\0\1\245\14\0\1\245"+
    "\52\0\2\72\10\0\1\72\2\0\3\72\1\0\6\72"+
    "\1\331\6\72\3\0\14\72\16\0\2\70\10\0\1\70"+
    "\2\0\3\70\1\0\12\70\1\332\2\70\3\0\14\70"+
    "\16\0\2\70\10\0\1\70\2\0\3\70\1\0\10\70"+
    "\1\333\4\70\3\0\14\70\16\0\2\70\10\0\1\70"+
    "\2\0\3\70\1\0\15\70\3\0\1\334\13\70\21\0"+
    "\1\335\67\0\2\50\10\0\1\50\2\0\3\50\1\0"+
    "\15\50\3\0\11\50\1\336\2\50\16\0\2\50\10\0"+
    "\1\50\2\0\3\50\1\0\12\50\1\337\2\50\3\0"+
    "\14\50\16\0\2\50\10\0\1\50\2\0\3\50\1\0"+
    "\10\50\1\340\4\50\3\0\14\50\16\0\2\50\10\0"+
    "\1\50\2\0\3\50\1\0\5\50\1\341\7\50\3\0"+
    "\14\50\16\0\2\50\10\0\1\50\2\0\3\50\1\0"+
    "\15\50\3\0\6\50\1\342\5\50\16\0\2\50\10\0"+
    "\1\50\2\0\3\50\1\0\15\50\3\0\6\50\1\343"+
    "\5\50\16\0\2\50\10\0\1\50\2\0\3\50\1\0"+
    "\10\50\1\344\4\50\3\0\14\50\16\0\2\50\10\0"+
    "\1\50\2\0\3\50\1\0\15\50\3\0\5\50\1\345"+
    "\6\50\16\0\2\50\10\0\1\50\2\0\3\50\1\0"+
    "\15\50\3\0\1\346\13\50\16\0\2\50\10\0\1\50"+
    "\2\0\3\50\1\0\15\50\3\0\10\50\1\347\3\50"+
    "\33\0\2\330\1\350\1\0\1\302\1\330\6\0\1\350"+
    "\2\330\6\0\1\330\1\302\3\0\1\330\4\0\1\330"+
    "\16\0\2\72\10\0\1\72\2\0\3\72\1\0\15\72"+
    "\3\0\5\72\1\351\6\72\16\0\2\70\10\0\1\70"+
    "\2\0\3\70\1\0\5\70\1\352\7\70\3\0\14\70"+
    "\16\0\2\70\10\0\1\70\2\0\3\70\1\0\15\70"+
    "\3\0\6\70\1\353\5\70\16\0\2\70\10\0\1\70"+
    "\2\0\3\70\1\0\15\70\3\0\6\70\1\354\5\70"+
    "\21\0\1\355\67\0\2\50\10\0\1\50\2\0\3\50"+
    "\1\0\15\50\3\0\5\50\1\356\6\50\16\0\2\50"+
    "\10\0\1\50\2\0\3\50\1\0\14\50\1\357\3\0"+
    "\14\50\16\0\2\50\10\0\1\50\2\0\3\50\1\0"+
    "\10\50\1\360\4\50\3\0\14\50\16\0\2\50\10\0"+
    "\1\50\2\0\3\50\1\0\5\50\1\361\7\50\3\0"+
    "\14\50\16\0\2\50\10\0\1\50\2\0\3\50\1\0"+
    "\15\50\3\0\6\50\1\362\5\50\16\0\2\50\10\0"+
    "\1\50\2\0\3\50\1\0\12\50\1\363\2\50\3\0"+
    "\14\50\21\0\1\245\11\0\2\330\1\350\1\245\1\302"+
    "\1\330\6\0\1\350\2\330\6\0\1\330\1\302\3\0"+
    "\1\330\4\0\1\330\16\0\2\70\10\0\1\70\2\0"+
    "\3\70\1\0\10\70\1\364\4\70\3\0\14\70\16\0"+
    "\2\70\10\0\1\70\2\0\3\70\1\0\5\70\1\365"+
    "\7\70\3\0\14\70\16\0\2\50\10\0\1\50\2\0"+
    "\3\50\1\0\10\50\1\366\4\50\3\0\14\50\16\0"+
    "\2\50\10\0\1\50\2\0\3\50\1\0\14\50\1\367"+
    "\3\0\14\50\16\0\2\50\10\0\1\50\2\0\3\50"+
    "\1\0\10\50\1\370\4\50\3\0\14\50\16\0\2\50"+
    "\10\0\1\50\2\0\3\50\1\0\15\50\3\0\1\50"+
    "\1\371\12\50\16\0\2\70\10\0\1\70\2\0\3\70"+
    "\1\0\10\70\1\372\4\70\3\0\14\70\16\0\2\50"+
    "\10\0\1\50\2\0\3\50\1\0\15\50\3\0\1\50"+
    "\1\373\12\50\16\0\2\70\10\0\1\70\2\0\3\70"+
    "\1\0\15\70\3\0\1\70\1\374\12\70\12\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10502];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\1\21\0\2\11\1\1\1\11\1\1\1\11"+
    "\3\1\1\11\3\1\2\11\25\1\1\11\1\1\3\11"+
    "\5\1\11\11\1\1\7\11\1\1\1\11\5\1\3\11"+
    "\5\1\1\11\1\0\1\1\1\0\1\11\21\1\2\0"+
    "\3\1\3\0\6\1\1\0\1\11\5\0\21\1\2\11"+
    "\1\1\1\0\1\11\10\1\1\0\20\1\1\0\1\1"+
    "\1\0\5\1\1\0\24\1\1\0\37\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[252];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private int _typeLevel = 0;
    private boolean _typeReq = false;
    private int _nextState;

    public _LuaDocLexer() {
        this((java.io.Reader) null);
    }

    private void beginType(int nextState) {
        yybegin(xTYPE_REF);
        _typeLevel = 0;
        _typeReq = true;
        _nextState = nextState;
    }

    private void beginType() {
        beginType(xBODY);
    }

    private int nBrackets = -1;

    private boolean checkAhead(char c, int offset) {
        return this.zzMarkedPos + offset < this.zzBuffer.length() && this.zzBuffer.charAt(this.zzMarkedPos + offset) == c;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _LuaDocLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(xBODY); return STRING;
            } 
            // fall through
          case 75: break;
          case 2: 
            { yybegin(xBODY); yypushback(yylength());
            } 
            // fall through
          case 76: break;
          case 3: 
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 77: break;
          case 4: 
            { yybegin(xCOMMENT_STRING); yypushback(yylength());
            } 
            // fall through
          case 78: break;
          case 5: 
            { yybegin(xBODY); return EOL;
            } 
            // fall through
          case 79: break;
          case 6: 
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            } 
            // fall through
          case 80: break;
          case 7: 
            { yybegin(xTAG_NAME); return AT;
            } 
            // fall through
          case 81: break;
          case 8: 
            { return ID;
            } 
            // fall through
          case 82: break;
          case 9: 
            { yybegin(xCOMMENT_STRING); return STRING_BEGIN;
            } 
            // fall through
          case 83: break;
          case 10: 
            { return SHARP;
            } 
            // fall through
          case 84: break;
          case 11: 
            { yybegin(xCOMMENT_STRING); return PROPERTY;
            } 
            // fall through
          case 85: break;
          case 12: 
            { yybegin(xCOMMENT_STRING); return TAG_NAME;
            } 
            // fall through
          case 86: break;
          case 13: 
            { beginType(); return ID;
            } 
            // fall through
          case 87: break;
          case 14: 
            { if (_typeReq || _typeLevel > 0) { _typeReq = false; return ID; } else { yybegin(_nextState); yypushback(yylength()); }
            } 
            // fall through
          case 88: break;
          case 15: 
            { if (checkAhead(']', 0)) {
            _typeReq = false;
            zzMarkedPos += 1;
            return ARR;
        } else {
            _typeLevel++;
            return LBRACK;
        }
            } 
            // fall through
          case 89: break;
          case 16: 
            { _typeLevel--; _typeReq = false; return RBRACK;
            } 
            // fall through
          case 90: break;
          case 17: 
            { yybegin(xDOUBLE_QUOTED_STRING); yypushback(yylength());
            } 
            // fall through
          case 91: break;
          case 18: 
            { yybegin(xSINGLE_QUOTED_STRING); yypushback(yylength());
            } 
            // fall through
          case 92: break;
          case 19: 
            { yybegin(xBACKTICK_QUOTED_STRING); return BACKTICK;
            } 
            // fall through
          case 93: break;
          case 20: 
            { return NUMBER_LITERAL;
            } 
            // fall through
          case 94: break;
          case 21: 
            { _typeReq = true; return COMMA;
            } 
            // fall through
          case 95: break;
          case 22: 
            { _typeLevel++; return LT;
            } 
            // fall through
          case 96: break;
          case 23: 
            { _typeReq = true; return EXTENDS;
            } 
            // fall through
          case 97: break;
          case 24: 
            { _typeLevel--; _typeReq = false; return GT;
            } 
            // fall through
          case 98: break;
          case 25: 
            { _typeReq = true; return OR;
            } 
            // fall through
          case 99: break;
          case 26: 
            { _typeLevel++; return LPAREN;
            } 
            // fall through
          case 100: break;
          case 27: 
            { _typeLevel--; _typeReq = false; return RPAREN;
            } 
            // fall through
          case 101: break;
          case 28: 
            { _typeLevel++; return LCURLY;
            } 
            // fall through
          case 102: break;
          case 29: 
            { _typeLevel--; _typeReq = false; return RCURLY;
            } 
            // fall through
          case 103: break;
          case 30: 
            { yybegin(xCLASS_PARAMS); return ID;
            } 
            // fall through
          case 104: break;
          case 31: 
            { yybegin(xCLASS_EXTEND); yypushback(yylength());
            } 
            // fall through
          case 105: break;
          case 32: 
            { yybegin(xCLASS_PARAM_LIST); return LT;
            } 
            // fall through
          case 106: break;
          case 33: 
            { return COMMA;
            } 
            // fall through
          case 107: break;
          case 34: 
            { beginType(xCLASS_PARAM_LIST); return EXTENDS;
            } 
            // fall through
          case 108: break;
          case 35: 
            { yybegin(xCLASS_EXTEND); return GT;
            } 
            // fall through
          case 109: break;
          case 36: 
            { beginType(); return EXTENDS;
            } 
            // fall through
          case 110: break;
          case 37: 
            { beginType(xFIELD_VALUE); yypushback(yylength());
            } 
            // fall through
          case 111: break;
          case 38: 
            { beginType(); yypushback(yylength());
            } 
            // fall through
          case 112: break;
          case 39: 
            { yybegin(xALIAS_PARAMS); return ID;
            } 
            // fall through
          case 113: break;
          case 40: 
            { yybegin(xALIAS_PARAM_LIST); return LT;
            } 
            // fall through
          case 114: break;
          case 41: 
            { beginType(xALIAS_PARAM_LIST); return EXTENDS;
            } 
            // fall through
          case 115: break;
          case 42: 
            { beginType(); return GT;
            } 
            // fall through
          case 116: break;
          case 43: 
            { return PROPERTY;
            } 
            // fall through
          case 117: break;
          case 44: 
            { return SNIPPET;
            } 
            // fall through
          case 118: break;
          case 45: 
            { yybegin(xTYPE_REF); return BACKTICK;
            } 
            // fall through
          case 119: break;
          case 46: 
            { if (nBrackets == -1) return DASHES;
            } 
            // fall through
          case 120: break;
          case 47: 
            { if (yylength() - 2 == nBrackets) {
            nBrackets = -1;
            return BLOCK_END;
        }
            } 
            // fall through
          case 121: break;
          case 48: 
            { yybegin(xTYPE_REF); return STRING_LITERAL;
            } 
            // fall through
          case 122: break;
          case 49: 
            { yybegin(xTAG); return TAG_NAME_SEE;
            } 
            // fall through
          case 123: break;
          case 50: 
            { beginType(); return ELLIPSIS;
            } 
            // fall through
          case 124: break;
          case 51: 
            { return ELLIPSIS;
            } 
            // fall through
          case 125: break;
          case 52: 
            { return FUN;
            } 
            // fall through
          case 126: break;
          case 53: 
            { beginType(); return TAG_NAME_TYPE;
            } 
            // fall through
          case 127: break;
          case 54: 
            { return BOOLEAN_LITERAL;
            } 
            // fall through
          case 128: break;
          case 55: 
            { yybegin(xFIELD); return TAG_NAME_FIELD;
            } 
            // fall through
          case 129: break;
          case 56: 
            { yybegin(xALIAS); return TAG_NAME_ALIAS;
            } 
            // fall through
          case 130: break;
          case 57: 
            { yybegin(xCLASS); return TAG_NAME_SHAPE;
            } 
            // fall through
          case 131: break;
          case 58: 
            { yybegin(xPARAM); return TAG_NAME_PARAM;
            } 
            // fall through
          case 132: break;
          case 59: 
            { yybegin(xCLASS); return TAG_NAME_CLASS;
            } 
            // fall through
          case 133: break;
          case 60: 
            { beginType(); return TAG_NAME_RETURN;
            } 
            // fall through
          case 134: break;
          case 61: 
            { return TAG_NAME_PUBLIC;
            } 
            // fall through
          case 135: break;
          case 62: 
            { yybegin(xCLASS); return TAG_NAME_MODULE;
            } 
            // fall through
          case 136: break;
          case 63: 
            { yybegin(xPARAM); return TAG_NAME_VARARG;
            } 
            // fall through
          case 137: break;
          case 64: 
            { _typeReq = true; return VARARG;
            } 
            // fall through
          case 138: break;
          case 65: 
            { yybegin(xFIELD_ID); return PUBLIC;
            } 
            // fall through
          case 139: break;
          case 66: 
            { nBrackets = yylength() - 7; yybegin(xBODY); return BLOCK_BEGIN;
            } 
            // fall through
          case 140: break;
          case 67: 
            { return TAG_NAME_PRIVATE;
            } 
            // fall through
          case 141: break;
          case 68: 
            { yybegin(xGENERIC); return TAG_NAME_GENERIC;
            } 
            // fall through
          case 142: break;
          case 69: 
            { yybegin(xFIELD_ID); return PRIVATE;
            } 
            // fall through
          case 143: break;
          case 70: 
            { yybegin(xTAG_WITH_ID); return TAG_NAME_LANGUAGE;
            } 
            // fall through
          case 144: break;
          case 71: 
            { yybegin(xSUPPRESS); return TAG_NAME_SUPPRESS;
            } 
            // fall through
          case 145: break;
          case 72: 
            { beginType(); return TAG_NAME_OVERLOAD;
            } 
            // fall through
          case 146: break;
          case 73: 
            { return TAG_NAME_PROTECTED;
            } 
            // fall through
          case 147: break;
          case 74: 
            { yybegin(xFIELD_ID); return PROTECTED;
            } 
            // fall through
          case 148: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
