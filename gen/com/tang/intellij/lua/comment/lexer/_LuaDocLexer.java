/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.tang.intellij.lua.comment.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.tang.intellij.lua.comment.psi.LuaDocTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>doc.flex</tt>
 */
public class _LuaDocLexer implements FlexLexer, LuaDocTypes {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int xBODY = 2;
  public static final int xTAG = 4;
  public static final int xTAG_WITH_ID = 6;
  public static final int xTAG_NAME = 8;
  public static final int xCOMMENT_STRING = 10;
  public static final int xPARAM = 12;
  public static final int xTYPE_REF = 14;
  public static final int xCLASS = 16;
  public static final int xCLASS_EXTEND = 18;
  public static final int xFIELD = 20;
  public static final int xFIELD_ID = 22;
  public static final int xGENERIC = 24;
  public static final int xALIAS = 26;
  public static final int xSUPPRESS = 28;
  public static final int xDOUBLE_QUOTED_STRING = 30;
  public static final int xSINGLE_QUOTED_STRING = 32;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 17456 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1"+
    "\21\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\21\1\25\1\57\1\60\5\21\2\25\1\61"+
    "\7\21\1\25\1\62\20\21\1\25\1\63\1\21\1\64\13\25\1\65\1\25\1\66\22\21\1\67"+
    "\1\70\4\21\1\71\11\21\1\72\1\73\1\74\1\75\1\21\1\76\2\21\1\77\3\21\1\100\2"+
    "\21\1\101\10\21\123\25\1\102\7\25\1\103\1\104\12\25\1\105\15\25\1\106\6\21"+
    "\1\25\1\107\u0582\21\1\110\u017f\21");

  /* The ZZ_CMAP_Y table has 4672 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\0\1\5\1\6\2\7\1\10\1\11\1\12\1\13\1\14\1\15\3\0"+
    "\1\16\1\17\1\20\1\21\2\7\1\22\3\7\1\22\71\7\1\23\1\7\1\24\1\25\1\26\1\27\2"+
    "\25\16\0\1\30\1\31\1\32\1\33\2\7\1\34\11\7\1\35\21\7\1\36\1\37\24\7\1\40\3"+
    "\7\1\22\1\41\1\40\4\7\1\42\1\43\4\0\1\44\1\45\1\25\3\7\2\46\1\25\1\47\1\50"+
    "\1\0\1\51\5\7\1\52\3\0\1\53\1\54\13\7\1\55\1\44\1\56\1\57\1\0\1\60\1\25\1"+
    "\61\1\62\3\7\3\0\1\63\12\7\1\64\1\0\1\65\1\25\1\0\1\66\3\7\1\52\1\67\1\21"+
    "\2\7\1\64\1\70\1\71\1\72\2\25\3\7\1\73\1\7\1\46\6\25\2\7\1\30\1\74\2\25\1"+
    "\75\5\0\1\76\6\7\1\77\2\0\1\100\1\7\1\101\1\0\1\40\1\7\1\102\1\103\1\104\2"+
    "\7\1\105\1\106\1\107\1\110\1\111\1\61\1\112\1\101\1\0\1\113\1\114\1\115\1"+
    "\116\1\104\2\7\1\105\1\117\1\120\1\121\1\122\1\123\1\124\1\125\1\0\1\126\1"+
    "\25\1\115\1\35\1\34\2\7\1\105\1\127\1\107\1\44\1\130\1\131\1\25\1\101\1\0"+
    "\1\41\1\132\1\115\1\103\1\104\2\7\1\105\1\127\1\107\1\110\1\122\1\125\1\112"+
    "\1\101\1\0\1\41\1\25\1\133\1\134\1\135\1\136\1\114\1\134\1\7\1\137\1\140\1"+
    "\141\1\142\1\25\1\125\1\0\1\25\1\41\1\143\1\30\1\105\2\7\1\105\1\7\1\144\1"+
    "\145\1\141\1\146\1\46\1\101\1\0\2\25\1\102\1\30\1\105\2\7\1\105\1\147\1\107"+
    "\1\145\1\141\1\146\1\32\1\101\1\0\1\150\1\25\1\143\1\30\1\105\4\7\1\151\1"+
    "\145\1\152\1\153\1\42\1\101\1\0\1\25\1\37\1\154\1\7\1\22\1\37\2\7\1\34\1\155"+
    "\1\22\1\156\1\157\1\0\1\125\1\0\1\160\1\25\1\40\5\7\1\161\1\162\1\163\1\164"+
    "\1\0\1\165\4\25\1\166\1\167\1\170\1\40\1\171\1\172\1\161\1\173\1\174\1\47"+
    "\1\0\1\175\4\25\1\131\2\25\1\165\1\0\1\165\1\176\1\177\1\7\1\40\3\7\1\26\1"+
    "\43\1\0\1\145\1\200\1\0\1\43\3\0\1\201\1\202\7\25\5\7\1\52\1\0\1\203\1\0\1"+
    "\165\1\64\1\204\1\205\1\206\1\207\1\7\1\210\1\211\1\0\1\47\4\7\1\35\1\20\5"+
    "\7\1\212\51\7\1\135\1\22\1\135\5\7\1\135\4\7\1\135\1\22\1\135\1\7\1\22\7\7"+
    "\1\135\10\7\1\213\4\25\2\7\2\25\12\7\2\74\1\40\114\7\1\103\2\7\1\214\2\7\1"+
    "\46\11\7\1\134\1\7\1\131\1\7\1\30\1\215\1\25\2\7\1\215\1\25\2\7\1\216\1\25"+
    "\1\7\1\30\1\217\1\25\6\7\1\220\3\0\1\221\1\222\1\0\1\165\3\25\1\223\1\0\1"+
    "\165\13\7\1\25\1\224\4\7\1\225\10\7\1\74\1\25\3\7\1\22\1\0\1\2\1\0\1\2\1\125"+
    "\1\0\3\7\1\74\1\26\1\25\5\7\1\113\3\7\1\24\1\0\1\165\4\25\2\7\1\163\1\2\6"+
    "\7\1\200\1\164\3\0\1\110\1\0\1\165\1\0\1\165\1\42\1\25\1\0\1\47\10\25\1\226"+
    "\5\7\1\220\1\0\1\226\1\113\1\0\1\165\1\25\1\227\1\2\1\25\1\230\3\7\1\100\1"+
    "\206\1\0\1\66\4\7\1\64\1\0\1\2\1\25\4\7\1\220\2\0\1\25\1\0\1\231\1\0\1\66"+
    "\3\7\1\74\1\7\1\131\10\25\1\232\2\0\1\233\1\234\1\165\30\7\7\0\1\235\42\7"+
    "\2\74\4\7\2\74\1\7\1\236\3\7\1\74\6\7\1\30\1\174\1\237\1\26\1\240\1\113\1"+
    "\7\1\26\1\237\1\26\1\241\1\242\3\25\1\243\1\25\1\42\1\131\1\25\1\244\1\245"+
    "\1\145\1\0\1\41\1\42\2\25\1\7\1\26\4\7\2\25\1\0\1\201\1\246\1\0\1\247\1\25"+
    "\1\250\1\37\1\155\1\251\1\27\1\252\1\7\1\253\1\254\1\255\2\25\5\7\1\131\116"+
    "\25\5\7\1\22\5\7\1\22\20\7\1\26\1\256\1\257\1\25\4\7\1\35\1\20\7\7\1\42\1"+
    "\25\1\61\2\7\1\22\1\25\10\22\4\0\5\25\1\42\72\25\1\260\3\25\1\40\1\210\1\251"+
    "\1\26\1\40\11\7\1\22\1\261\1\40\12\7\1\212\1\254\4\7\1\22\1\40\12\7\1\22\2"+
    "\25\3\7\1\46\6\25\170\7\1\74\11\25\75\7\1\46\2\25\21\7\1\26\10\25\5\7\1\74"+
    "\41\7\1\26\2\7\1\0\1\257\2\25\5\7\1\163\1\75\1\262\3\7\1\64\12\7\1\165\3\25"+
    "\1\42\1\7\1\37\14\7\1\104\3\7\1\22\1\7\7\25\1\42\1\7\1\263\1\264\2\7\1\52"+
    "\2\25\1\131\6\7\1\113\1\25\1\66\5\7\1\220\1\0\1\47\1\25\1\0\1\165\2\0\1\66"+
    "\1\265\1\0\1\66\2\7\1\64\1\47\2\7\1\163\1\0\1\2\1\25\3\7\1\26\1\76\5\7\1\52"+
    "\1\0\1\247\1\42\1\0\1\165\1\266\1\7\1\0\1\267\5\7\1\100\1\164\1\25\1\264\1"+
    "\270\1\0\1\165\2\7\1\22\1\271\6\7\1\205\1\272\1\225\2\25\1\273\1\7\1\52\1"+
    "\274\1\25\3\275\1\25\2\22\5\7\1\212\1\74\1\25\16\7\1\52\1\276\1\0\1\165\64"+
    "\7\1\113\1\25\2\7\1\22\1\277\5\7\1\113\40\25\55\7\1\74\15\7\1\24\4\25\1\22"+
    "\1\25\1\277\1\300\1\7\1\105\1\22\1\174\1\301\15\7\1\24\3\25\1\277\54\7\1\74"+
    "\2\25\10\7\1\37\6\7\5\25\1\7\1\26\2\0\2\25\2\0\1\114\2\25\1\254\3\25\1\41"+
    "\1\30\20\7\1\302\1\244\1\25\1\0\1\165\1\40\2\7\1\116\1\40\2\7\1\46\1\303\12"+
    "\7\1\22\3\37\1\304\1\305\2\25\1\306\1\7\1\147\2\7\1\22\2\7\1\307\1\7\1\74"+
    "\1\7\1\74\4\25\17\7\1\46\10\25\6\7\1\26\20\25\1\310\20\25\3\7\1\26\6\7\1\131"+
    "\1\25\1\247\3\25\4\7\1\25\1\254\3\7\1\46\4\7\1\64\1\311\3\7\1\74\4\7\1\113"+
    "\1\7\1\251\5\25\23\7\1\74\1\0\1\165\4\7\1\113\4\7\1\113\5\7\1\25\6\7\1\113"+
    "\23\25\46\7\1\22\1\25\2\7\1\74\1\25\1\7\23\25\1\74\1\105\4\7\1\35\1\312\2"+
    "\7\1\74\1\25\2\7\1\22\1\25\3\7\1\22\10\25\2\7\1\313\1\25\2\7\1\74\1\25\3\7"+
    "\1\24\10\25\7\7\1\303\10\25\1\314\1\75\1\147\1\40\2\7\1\113\1\121\4\25\3\7"+
    "\1\26\3\7\1\26\4\25\1\7\1\40\2\7\1\315\3\25\6\7\1\74\1\25\2\7\1\74\1\25\2"+
    "\7\1\46\1\25\2\7\1\24\15\25\11\7\1\131\6\25\6\7\1\46\1\25\6\7\1\46\41\25\1"+
    "\230\6\7\1\0\1\164\3\25\1\125\1\0\1\25\1\61\1\230\5\7\1\0\1\316\2\25\3\7\1"+
    "\131\1\0\1\165\1\230\3\7\1\163\1\0\1\145\1\0\2\25\4\7\1\317\1\25\1\230\5\7"+
    "\1\52\1\0\1\320\1\321\1\0\1\322\4\25\2\7\1\34\2\7\1\220\1\0\1\202\10\25\1"+
    "\22\1\252\1\7\1\35\1\7\1\131\5\7\1\163\1\0\1\311\1\0\1\165\1\143\1\103\1\104"+
    "\2\7\1\105\1\127\1\107\1\110\1\122\1\142\1\254\1\101\2\201\21\25\6\7\1\200"+
    "\1\0\1\203\1\46\1\0\1\165\4\25\6\7\2\0\1\323\1\25\1\0\1\165\24\25\5\7\1\163"+
    "\1\47\1\0\1\247\2\25\1\270\4\25\6\7\2\0\1\324\1\25\1\0\1\165\4\25\5\7\1\52"+
    "\1\0\1\25\1\0\1\165\6\25\3\7\1\325\1\0\1\2\1\0\1\165\54\25\10\7\1\0\1\165"+
    "\1\25\1\42\40\25\1\100\1\230\4\7\1\52\1\326\1\61\1\25\1\100\1\76\4\7\1\240"+
    "\1\210\1\0\1\165\4\25\7\7\1\131\40\25\1\7\1\105\3\7\1\163\1\164\1\0\1\131"+
    "\1\25\1\0\1\165\2\25\1\37\3\7\1\327\2\0\1\43\1\164\11\25\1\22\1\34\4\7\1\330"+
    "\1\331\1\211\1\25\1\0\1\165\24\25\63\7\1\24\14\25\15\7\1\22\2\25\30\7\1\113"+
    "\27\25\5\7\1\22\72\25\10\7\1\22\67\25\7\7\1\131\3\7\1\22\1\0\1\165\14\25\3"+
    "\7\1\74\1\201\1\25\6\7\1\164\1\25\1\113\1\25\1\0\1\165\1\277\2\7\1\254\2\7"+
    "\56\25\10\7\1\26\1\25\1\100\4\0\1\164\1\25\1\61\1\230\1\7\10\25\1\24\3\25"+
    "\75\7\1\26\2\25\36\7\1\46\41\25\43\7\1\22\12\25\61\7\1\113\40\25\15\7\1\46"+
    "\1\7\1\26\1\7\1\131\1\7\1\332\1\2\127\25\1\333\1\334\2\0\1\335\1\2\3\25\1"+
    "\336\22\25\1\321\67\25\12\7\1\30\10\7\1\30\1\337\1\340\1\7\1\341\1\147\7\7"+
    "\1\35\1\342\2\30\3\7\1\343\1\174\1\37\1\105\51\7\1\74\3\7\1\105\2\7\1\212"+
    "\3\7\1\212\2\7\1\30\3\7\1\30\2\7\1\22\3\7\1\22\3\7\1\105\3\7\1\105\2\7\1\212"+
    "\1\344\14\0\1\164\1\227\5\0\1\201\1\310\1\25\1\345\2\25\1\227\1\43\1\0\52"+
    "\25\1\164\2\0\1\346\1\347\1\311\72\25\30\7\1\26\1\25\1\164\5\25\10\7\1\220"+
    "\1\311\1\0\1\165\24\25\1\147\3\7\1\166\1\40\1\212\1\350\1\250\1\351\1\166"+
    "\1\236\1\166\2\212\1\124\1\7\1\34\1\7\1\113\1\352\1\34\1\7\1\113\50\25\32"+
    "\7\1\22\5\25\106\7\1\26\1\25\33\7\1\74\120\7\1\24\1\25\146\7\1\131\3\25\3"+
    "\7\1\74\74\25\1\123\3\25\14\0\20\25\36\0\2\25");

  /* The ZZ_CMAP_A table has 1880 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\20\1\5\1\2\1\22\1\23\1\1\6\20\4\17\1\3\1\17\1\15\1\60\1\7\2\17\1\21\1"+
    "\54\1\55\2\17\1\47\1\13\1\11\1\17\2\20\1\50\1\17\1\52\1\6\1\53\1\17\1\12\22"+
    "\7\1\14\1\16\1\4\1\17\1\7\1\17\1\32\1\46\1\37\1\30\1\26\1\24\1\36\1\7\1\25"+
    "\2\7\1\27\1\34\1\44\1\41\1\31\1\7\1\33\1\40\1\43\1\42\1\35\2\7\1\45\1\7\1"+
    "\56\1\51\1\57\1\17\6\20\1\10\2\20\1\0\1\17\4\7\4\17\1\7\2\17\1\20\7\17\1\7"+
    "\4\17\1\7\5\17\7\7\1\17\2\7\4\17\4\7\16\17\5\7\7\17\1\7\1\17\1\7\1\17\5\7"+
    "\1\17\2\7\2\17\4\7\1\17\1\7\6\17\1\7\1\17\3\7\1\17\1\7\1\17\4\7\1\17\13\7"+
    "\1\17\3\7\1\17\5\20\2\17\6\7\1\17\7\7\1\17\1\7\15\17\1\7\1\17\15\20\1\17\1"+
    "\20\1\17\2\20\1\17\2\20\1\17\1\20\3\7\5\17\6\20\5\17\1\7\4\17\3\20\1\17\1"+
    "\20\3\17\3\7\7\20\4\17\2\7\1\20\13\7\1\17\1\7\7\20\2\7\2\20\1\17\4\20\2\7"+
    "\2\20\3\7\2\17\1\7\7\17\1\20\1\7\1\20\6\7\3\20\2\17\11\7\3\20\1\7\6\17\2\20"+
    "\6\7\4\20\2\7\2\17\2\20\1\7\11\20\1\7\3\20\1\7\5\20\2\17\1\7\3\20\4\17\6\7"+
    "\6\17\10\20\6\7\3\20\1\7\2\20\1\7\7\20\2\7\2\20\2\17\2\20\1\7\3\20\1\17\10"+
    "\7\2\17\2\7\2\17\6\7\1\17\7\7\1\17\1\7\3\17\4\7\2\17\1\20\1\7\7\20\2\17\2"+
    "\20\2\17\3\20\1\7\5\17\2\7\1\17\5\7\7\17\2\7\4\17\3\20\1\17\6\7\4\17\2\7\1"+
    "\17\2\7\1\17\2\7\1\17\2\7\2\17\1\20\1\17\5\20\4\17\2\20\2\17\3\20\3\17\1\20"+
    "\7\17\4\7\1\17\1\7\7\17\4\20\3\7\1\20\2\17\1\7\1\17\2\7\1\17\3\7\2\20\1\17"+
    "\3\20\2\17\1\7\10\17\1\7\6\20\2\17\1\20\1\7\1\17\6\7\3\17\3\7\1\17\4\7\3\17"+
    "\2\7\1\17\1\7\1\17\4\7\4\17\5\20\3\17\3\20\1\17\4\20\2\17\1\7\6\17\5\20\1"+
    "\17\5\7\3\17\1\7\7\20\1\17\2\20\5\17\2\20\1\17\4\7\1\17\3\7\1\17\2\7\5\17"+
    "\3\7\2\20\1\7\3\20\1\17\4\20\1\7\5\17\3\7\1\20\2\17\2\20\1\17\7\7\1\17\1\7"+
    "\4\17\1\20\4\17\6\20\1\17\1\20\3\17\2\20\4\17\1\7\1\20\2\7\7\20\4\17\10\7"+
    "\10\20\1\17\2\20\7\17\2\7\1\17\1\7\2\17\2\7\1\17\1\7\2\17\1\7\6\17\4\7\1\17"+
    "\3\7\1\17\1\7\1\17\1\7\2\17\2\7\1\17\3\7\2\20\1\17\2\20\1\7\2\17\5\7\1\17"+
    "\1\7\1\17\2\20\2\17\4\7\5\17\1\20\1\17\1\20\1\17\1\20\4\17\2\20\5\7\10\20"+
    "\11\17\1\20\1\17\7\20\1\7\2\20\4\7\3\20\1\7\3\20\2\7\7\20\3\7\4\20\5\7\14"+
    "\20\1\7\1\20\3\7\1\17\7\7\2\17\3\20\1\0\11\7\3\20\3\17\2\7\2\20\4\17\1\7\1"+
    "\17\2\20\4\17\4\7\10\20\3\17\1\7\3\17\2\7\1\20\5\17\4\20\1\17\5\7\2\20\2\7"+
    "\1\20\1\7\5\17\5\20\3\7\3\17\10\20\5\7\2\20\3\17\3\7\3\20\1\17\5\20\4\7\1"+
    "\20\4\7\3\20\2\7\3\20\1\17\5\20\1\17\1\7\1\17\1\7\1\17\1\7\1\17\1\7\2\17\3"+
    "\7\1\17\6\7\2\17\2\7\13\0\5\20\2\22\5\20\1\0\4\17\1\7\12\17\1\0\1\17\1\20"+
    "\3\17\4\20\11\17\1\7\4\17\1\7\1\17\5\7\2\17\1\7\1\17\4\7\1\17\3\7\2\17\4\7"+
    "\5\17\5\7\4\17\1\7\4\17\4\7\3\20\2\7\4\17\1\0\4\17\3\7\1\17\2\20\2\17\3\7"+
    "\6\20\1\17\3\7\1\20\3\7\1\20\4\7\1\20\4\7\3\17\1\7\1\17\1\7\2\17\5\7\1\20"+
    "\2\7\2\20\5\7\1\17\4\7\2\20\4\17\1\7\3\20\2\7\1\20\5\7\2\20\3\17\3\7\4\17"+
    "\3\7\2\20\2\17\6\7\1\17\3\20\1\17\2\20\5\17\5\7\5\17\1\7\1\20\3\7\1\17\2\7"+
    "\1\17\7\7\2\17\1\20\6\17\2\7\2\17\3\7\3\17\2\7\3\17\2\7\2\17\3\20\4\17\3\7"+
    "\1\17\2\7\1\17\1\7\5\17\1\20\2\17\3\20\5\17\1\7\3\17\1\7\2\17\4\7\1\17\2\7"+
    "\2\17\1\7\3\20\1\17\2\20\1\17\5\7\2\20\1\17\3\20\2\17\1\20\2\17\3\7\1\20\2"+
    "\17\1\7\1\17\1\20\4\7\5\17\3\20\3\17\2\20\1\7\1\17\1\7\3\17\4\20\2\7\1\17"+
    "\1\7\1\20\3\17\1\7\3\17\2\7\3\17\5\20\1\7\4\20\3\17\6\20\1\7\6\20\3\17\1\20"+
    "\1\17\2\20\1\17\1\20\2\7\3\17\2\20\6\17\5\20\3\17\6\20\2\17\3\20\2\17\4\20"+
    "\4\17\1\7\2\17\2\7\2\17\4\7\1\17\4\7\1\17\1\7\1\17\6\7\2\17\5\7\1\17\4\7\1"+
    "\17\4\7\2\17\2\20\4\17\1\20\3\17\1\20\2\17\7\20\1\17\2\20\1\17\2\20\1\17\1"+
    "\7\1\17\1\7\5\17\1\7\1\17\1\7\1\17\3\7\1\17\3\7\1\17\3\7");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\13\0\1\2\1\3\1\2\1\4\2\5"+
    "\1\6\1\4\1\7\1\4\2\3\1\10\1\11\1\12"+
    "\1\13\15\14\1\1\1\6\1\3\1\15\1\3\1\16"+
    "\2\3\1\17\1\20\2\16\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\4\1\33"+
    "\1\15\2\2\1\34\1\35\2\36\1\0\1\37\1\0"+
    "\1\40\17\14\1\0\1\1\2\0\1\41\2\16\2\15"+
    "\1\36\3\0\14\14\1\42\3\14\1\1\1\37\1\15"+
    "\1\16\1\43\1\16\3\15\1\0\16\14\1\44\1\16"+
    "\3\15\1\0\1\45\1\14\1\46\3\14\1\47\4\14"+
    "\1\50\2\14\1\16\3\15\1\0\3\14\1\51\1\52"+
    "\1\53\1\54\3\14\1\55\2\15\1\56\1\57\1\14"+
    "\1\60\1\14\1\61\2\14\1\62\1\15\1\63\1\14"+
    "\1\64\1\65\1\15\1\66\1\67";

  private static int [] zzUnpackAction() {
    int [] result = new int[204];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\u0157"+
    "\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae\0\u02df"+
    "\0\u0310\0\u0341\0\u0341\0\u0372\0\u0341\0\u03a3\0\u0341\0\u03d4"+
    "\0\u0405\0\u0341\0\u0436\0\u03a3\0\u0405\0\u0467\0\u0341\0\u0341"+
    "\0\u0498\0\u04c9\0\u04fa\0\u052b\0\u055c\0\u058d\0\u05be\0\u05ef"+
    "\0\u0620\0\u0651\0\u0682\0\u06b3\0\u06e4\0\u0715\0\u0746\0\u0777"+
    "\0\u07a8\0\u07d9\0\u080a\0\u083b\0\u086c\0\u089d\0\u0341\0\u0341"+
    "\0\u08ce\0\u08ff\0\u0341\0\u0341\0\u0341\0\u0341\0\u0341\0\u0341"+
    "\0\u0341\0\u0341\0\u0341\0\u0930\0\u03a3\0\u0341\0\u0961\0\u03a3"+
    "\0\u0405\0\u0341\0\u0341\0\u0992\0\u09c3\0\u09f4\0\u0341\0\u0405"+
    "\0\u0436\0\u0a25\0\u0a56\0\u0a87\0\u0ab8\0\u0ae9\0\u0b1a\0\u0b4b"+
    "\0\u0b7c\0\u0bad\0\u0bde\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2\0\u0cd3"+
    "\0\u0d04\0\u0d35\0\u0d66\0\u0d97\0\u0341\0\u0dc8\0\u0df9\0\u0e2a"+
    "\0\u0e5b\0\u0341\0\u0e8c\0\u0ebd\0\u0eee\0\u0f1f\0\u0f50\0\u0f81"+
    "\0\u0fb2\0\u0fe3\0\u1014\0\u1045\0\u1076\0\u10a7\0\u10d8\0\u1109"+
    "\0\u113a\0\u04c9\0\u116b\0\u119c\0\u11cd\0\u11fe\0\u0d04\0\u0341"+
    "\0\u0341\0\u083b\0\u122f\0\u1260\0\u1291\0\u12c2\0\u12f3\0\u1324"+
    "\0\u1355\0\u1386\0\u13b7\0\u13e8\0\u1419\0\u144a\0\u147b\0\u14ac"+
    "\0\u14dd\0\u150e\0\u153f\0\u1570\0\u15a1\0\u04c9\0\u15d2\0\u1603"+
    "\0\u1634\0\u1665\0\u1696\0\u04c9\0\u16c7\0\u04c9\0\u16f8\0\u1729"+
    "\0\u175a\0\u04c9\0\u178b\0\u17bc\0\u17ed\0\u181e\0\u04c9\0\u184f"+
    "\0\u1880\0\u18b1\0\u18e2\0\u1913\0\u1944\0\u1975\0\u19a6\0\u19d7"+
    "\0\u1a08\0\u04c9\0\u04c9\0\u04c9\0\u04c9\0\u1a39\0\u1a6a\0\u1a9b"+
    "\0\u083b\0\u1acc\0\u1afd\0\u07d9\0\u1975\0\u1b2e\0\u04c9\0\u1b5f"+
    "\0\u04c9\0\u1b90\0\u1bc1\0\u07d9\0\u1bf2\0\u04c9\0\u1c23\0\u04c9"+
    "\0\u04c9\0\u1c54\0\u04c9\0\u07d9";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[204];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\22\2\23\5\22\1\23\2\22\1\24\6\22\2\23"+
    "\35\22\1\25\1\26\1\27\1\30\1\31\1\30\2\25"+
    "\1\23\1\25\1\32\1\33\6\25\1\23\1\30\35\25"+
    "\1\23\1\34\1\23\1\30\1\35\1\30\1\23\1\36"+
    "\2\23\1\37\10\23\1\30\23\36\11\23\1\40\1\23"+
    "\1\26\1\27\1\30\1\35\1\30\1\23\1\41\13\23"+
    "\1\30\23\41\13\23\1\34\1\23\1\30\1\35\1\30"+
    "\1\23\1\42\13\23\1\30\1\43\2\42\1\44\1\42"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\42\1\56\3\42\12\23\1\57\1\26\1\27"+
    "\1\60\1\61\1\30\15\57\1\30\35\57\1\23\1\26"+
    "\1\27\1\30\1\35\1\30\1\23\1\62\1\23\1\63"+
    "\11\23\1\30\23\62\13\23\1\26\1\27\1\30\1\35"+
    "\1\30\1\23\1\64\1\23\1\65\1\37\1\23\1\66"+
    "\1\67\3\23\1\70\1\23\1\30\1\71\10\64\1\72"+
    "\11\64\1\73\1\74\1\75\1\76\1\77\1\100\1\101"+
    "\1\102\1\103\2\23\1\26\1\27\1\30\1\35\1\30"+
    "\1\23\1\104\13\23\1\30\23\104\12\23\1\25\1\105"+
    "\1\25\1\30\1\31\1\30\15\25\1\30\24\25\1\106"+
    "\10\25\1\23\1\26\1\27\1\30\1\35\1\30\1\23"+
    "\1\62\13\23\1\30\5\62\1\107\15\62\13\23\1\26"+
    "\1\27\1\30\1\35\1\30\1\23\1\62\13\23\1\30"+
    "\23\62\12\23\1\22\1\110\1\22\1\30\1\111\1\30"+
    "\1\22\1\36\13\22\1\30\23\36\1\112\1\113\11\22"+
    "\1\110\1\22\1\30\1\111\1\30\1\22\1\62\13\22"+
    "\1\30\23\62\13\22\1\110\1\22\1\30\1\111\1\30"+
    "\1\22\1\36\13\22\1\30\23\36\1\112\11\22\15\23"+
    "\1\114\64\23\1\115\37\23\74\0\1\116\47\0\1\27"+
    "\61\0\1\30\1\0\1\30\15\0\1\30\41\0\1\117"+
    "\1\0\1\120\65\0\1\121\54\0\3\36\6\0\1\36"+
    "\3\0\23\36\21\0\3\41\6\0\1\41\3\0\23\41"+
    "\21\0\3\42\6\0\1\42\3\0\23\42\21\0\3\42"+
    "\6\0\1\42\3\0\1\42\1\122\21\42\21\0\3\42"+
    "\6\0\1\42\3\0\6\42\1\123\14\42\21\0\3\42"+
    "\6\0\1\42\3\0\6\42\1\124\1\125\6\42\1\126"+
    "\4\42\21\0\3\42\6\0\1\42\3\0\3\42\1\127"+
    "\17\42\21\0\3\42\6\0\1\42\3\0\2\42\1\130"+
    "\20\42\21\0\3\42\6\0\1\42\3\0\15\42\1\131"+
    "\5\42\21\0\3\42\6\0\1\42\3\0\6\42\1\132"+
    "\14\42\21\0\3\42\6\0\1\42\3\0\2\42\1\133"+
    "\20\42\21\0\3\42\6\0\1\42\3\0\3\42\1\134"+
    "\17\42\21\0\3\42\6\0\1\42\3\0\2\42\1\135"+
    "\13\42\1\136\4\42\21\0\3\42\6\0\1\42\3\0"+
    "\11\42\1\137\11\42\21\0\3\42\6\0\1\42\3\0"+
    "\21\42\1\140\1\42\12\0\1\57\2\0\1\57\1\141"+
    "\1\0\15\57\1\0\36\57\2\0\1\60\1\141\1\30"+
    "\15\57\1\30\41\57\1\117\1\57\1\142\52\57\7\0"+
    "\3\62\6\0\1\62\3\0\23\62\23\0\1\143\56\0"+
    "\3\64\6\0\1\64\3\0\23\64\23\0\1\144\53\0"+
    "\1\145\63\0\3\64\6\0\1\64\3\0\16\64\1\146"+
    "\4\64\21\0\3\64\6\0\1\64\3\0\6\64\1\147"+
    "\14\64\21\0\3\104\6\0\1\104\3\0\23\104\21\0"+
    "\3\62\6\0\1\62\3\0\7\62\1\150\6\62\1\151"+
    "\4\62\12\0\15\114\1\152\1\153\42\114\16\115\1\154"+
    "\2\115\1\152\37\115\14\0\1\155\53\0\3\42\6\0"+
    "\1\42\3\0\2\42\1\156\20\42\21\0\3\42\6\0"+
    "\1\42\3\0\20\42\1\157\2\42\21\0\3\42\6\0"+
    "\1\42\3\0\7\42\1\160\13\42\21\0\3\42\6\0"+
    "\1\42\3\0\1\42\1\161\13\42\1\162\5\42\21\0"+
    "\3\42\6\0\1\42\3\0\22\42\1\163\21\0\3\42"+
    "\6\0\1\42\3\0\1\42\1\164\21\42\21\0\3\42"+
    "\6\0\1\42\3\0\17\42\1\165\3\42\21\0\3\42"+
    "\6\0\1\42\3\0\4\42\1\166\16\42\21\0\3\42"+
    "\6\0\1\42\3\0\7\42\1\167\13\42\21\0\3\42"+
    "\6\0\1\42\3\0\20\42\1\170\2\42\21\0\3\42"+
    "\6\0\1\42\3\0\6\42\1\171\14\42\21\0\3\42"+
    "\6\0\1\42\3\0\2\42\1\172\20\42\21\0\3\42"+
    "\6\0\1\42\3\0\5\42\1\173\15\42\21\0\3\42"+
    "\6\0\1\42\3\0\2\42\1\174\20\42\21\0\3\42"+
    "\6\0\1\42\3\0\5\42\1\175\15\42\12\0\4\57"+
    "\1\0\1\57\1\176\56\57\1\177\1\57\1\142\52\57"+
    "\11\0\1\200\60\0\1\201\56\0\3\64\6\0\1\64"+
    "\3\0\20\64\1\202\2\64\21\0\3\64\6\0\1\64"+
    "\3\0\7\64\1\203\13\64\21\0\3\62\6\0\1\62"+
    "\3\0\1\62\1\204\13\62\1\205\5\62\21\0\3\62"+
    "\6\0\1\62\3\0\22\62\1\206\13\0\2\114\1\0"+
    "\1\114\1\0\2\114\1\0\11\114\2\0\35\114\1\0"+
    "\2\115\1\0\1\115\1\0\2\115\1\0\11\115\2\0"+
    "\35\115\6\0\1\155\5\0\1\207\53\0\3\42\6\0"+
    "\1\42\3\0\3\42\1\210\17\42\21\0\3\42\6\0"+
    "\1\42\3\0\12\42\1\211\10\42\21\0\3\42\6\0"+
    "\1\42\3\0\6\42\1\212\14\42\21\0\3\42\6\0"+
    "\1\42\3\0\11\42\1\213\11\42\21\0\3\42\6\0"+
    "\1\42\3\0\17\42\1\214\3\42\21\0\3\42\6\0"+
    "\1\42\3\0\3\42\1\215\17\42\21\0\3\42\6\0"+
    "\1\42\3\0\6\42\1\216\14\42\21\0\3\42\6\0"+
    "\1\42\3\0\16\42\1\217\4\42\21\0\3\42\6\0"+
    "\1\42\3\0\16\42\1\220\4\42\21\0\3\42\6\0"+
    "\1\42\3\0\6\42\1\221\14\42\21\0\3\42\6\0"+
    "\1\42\3\0\2\42\1\222\20\42\21\0\3\42\6\0"+
    "\1\42\3\0\14\42\1\223\6\42\21\0\3\42\6\0"+
    "\1\42\3\0\5\42\1\224\15\42\21\0\3\42\6\0"+
    "\1\42\3\0\7\42\1\225\13\42\21\0\3\42\6\0"+
    "\1\42\3\0\2\42\1\226\20\42\12\0\4\57\1\141"+
    "\1\57\1\176\52\57\7\0\3\64\6\0\1\64\3\0"+
    "\6\64\1\227\14\64\21\0\3\62\6\0\1\62\3\0"+
    "\11\62\1\230\11\62\21\0\3\62\6\0\1\62\3\0"+
    "\17\62\1\231\3\62\21\0\3\62\6\0\1\62\3\0"+
    "\3\62\1\232\17\62\25\0\1\233\54\0\3\42\6\0"+
    "\1\42\3\0\4\42\1\234\16\42\21\0\3\42\6\0"+
    "\1\42\3\0\16\42\1\235\4\42\21\0\3\42\6\0"+
    "\1\42\3\0\10\42\1\236\12\42\21\0\3\42\6\0"+
    "\1\42\3\0\6\42\1\237\14\42\21\0\3\42\6\0"+
    "\1\42\3\0\2\42\1\240\20\42\21\0\3\42\6\0"+
    "\1\42\3\0\1\42\1\241\21\42\21\0\3\42\6\0"+
    "\1\42\3\0\14\42\1\242\6\42\21\0\3\42\6\0"+
    "\1\42\3\0\7\42\1\243\13\42\21\0\3\42\6\0"+
    "\1\42\3\0\3\42\1\244\17\42\21\0\3\42\6\0"+
    "\1\42\3\0\7\42\1\245\13\42\21\0\3\42\6\0"+
    "\1\42\3\0\7\42\1\246\13\42\21\0\3\42\6\0"+
    "\1\42\3\0\14\42\1\247\6\42\21\0\3\42\6\0"+
    "\1\42\3\0\7\42\1\250\13\42\21\0\3\42\6\0"+
    "\1\42\3\0\3\42\1\251\17\42\21\0\3\64\6\0"+
    "\1\64\3\0\7\64\1\252\13\64\21\0\3\62\6\0"+
    "\1\62\3\0\6\62\1\253\14\62\21\0\3\62\6\0"+
    "\1\62\3\0\2\62\1\254\20\62\21\0\3\62\6\0"+
    "\1\62\3\0\1\62\1\255\21\62\25\0\1\256\54\0"+
    "\3\42\6\0\1\42\3\0\6\42\1\257\14\42\21\0"+
    "\3\42\6\0\1\42\3\0\17\42\1\260\3\42\21\0"+
    "\3\42\6\0\1\42\3\0\13\42\1\261\7\42\21\0"+
    "\3\42\6\0\1\42\3\0\13\42\1\262\7\42\21\0"+
    "\3\42\6\0\1\42\3\0\20\42\1\263\2\42\21\0"+
    "\3\42\6\0\1\42\3\0\2\42\1\264\20\42\21\0"+
    "\3\42\6\0\1\42\3\0\12\42\1\265\10\42\21\0"+
    "\3\42\6\0\1\42\3\0\1\42\1\266\21\42\21\0"+
    "\3\42\6\0\1\42\3\0\2\42\1\267\20\42\21\0"+
    "\3\42\6\0\1\42\3\0\15\42\1\270\5\42\21\0"+
    "\3\64\6\0\1\64\3\0\12\64\1\271\10\64\21\0"+
    "\3\62\6\0\1\62\3\0\17\62\1\272\3\62\21\0"+
    "\3\62\6\0\1\62\3\0\13\62\1\273\7\62\21\0"+
    "\3\62\6\0\1\62\3\0\13\62\1\274\7\62\25\0"+
    "\1\275\54\0\3\42\6\0\1\42\3\0\12\42\1\276"+
    "\10\42\21\0\3\42\6\0\1\42\3\0\2\42\1\277"+
    "\20\42\21\0\3\42\6\0\1\42\3\0\17\42\1\300"+
    "\3\42\21\0\3\42\6\0\1\42\3\0\13\42\1\301"+
    "\7\42\21\0\3\42\6\0\1\42\3\0\14\42\1\302"+
    "\6\42\21\0\3\42\6\0\1\42\3\0\6\42\1\303"+
    "\14\42\21\0\3\62\6\0\1\62\3\0\2\62\1\304"+
    "\20\62\21\0\3\62\6\0\1\62\3\0\17\62\1\305"+
    "\3\62\21\0\3\42\6\0\1\42\3\0\2\42\1\306"+
    "\20\42\21\0\3\42\6\0\1\42\3\0\2\42\1\307"+
    "\20\42\21\0\3\42\6\0\1\42\3\0\14\42\1\310"+
    "\6\42\21\0\3\42\6\0\1\42\3\0\4\42\1\311"+
    "\16\42\21\0\3\62\6\0\1\62\3\0\2\62\1\312"+
    "\20\62\21\0\3\42\6\0\1\42\3\0\4\42\1\313"+
    "\16\42\21\0\3\62\6\0\1\62\3\0\4\62\1\314"+
    "\16\62\12\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7301];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\1\13\0\2\11\1\1\1\11\1\1\1\11"+
    "\2\1\1\11\4\1\2\11\26\1\2\11\2\1\11\11"+
    "\2\1\1\11\3\1\2\11\2\1\1\0\1\11\1\0"+
    "\20\1\1\0\1\1\2\0\1\11\4\1\1\11\3\0"+
    "\22\1\2\11\5\1\1\0\23\1\1\0\22\1\1\0"+
    "\36\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[204];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private int _typeLevel = 0;
    private boolean _typeReq = false;
    public _LuaDocLexer() {
        this((java.io.Reader) null);
    }

    private void beginType() {
        yybegin(xTYPE_REF);
        _typeLevel = 0;
        _typeReq = true;
    }

    private int nBrackets = -1;
    private boolean checkAhead(char c, int offset) {
        return this.zzMarkedPos + offset < this.zzBuffer.length() && this.zzBuffer.charAt(this.zzMarkedPos + offset) == c;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _LuaDocLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(xBODY); return STRING;
            } 
            // fall through
          case 56: break;
          case 2: 
            { yybegin(xBODY); yypushback(yylength());
            } 
            // fall through
          case 57: break;
          case 3: 
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 58: break;
          case 4: 
            { yybegin(xCOMMENT_STRING); yypushback(yylength());
            } 
            // fall through
          case 59: break;
          case 5: 
            { yybegin(xBODY); return EOL;
            } 
            // fall through
          case 60: break;
          case 6: 
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            } 
            // fall through
          case 61: break;
          case 7: 
            { yybegin(xTAG_NAME); return AT;
            } 
            // fall through
          case 62: break;
          case 8: 
            { return ID;
            } 
            // fall through
          case 63: break;
          case 9: 
            { yybegin(xCOMMENT_STRING); return STRING_BEGIN;
            } 
            // fall through
          case 64: break;
          case 10: 
            { return SHARP;
            } 
            // fall through
          case 65: break;
          case 11: 
            { yybegin(xCOMMENT_STRING); return ID;
            } 
            // fall through
          case 66: break;
          case 12: 
            { yybegin(xCOMMENT_STRING); return TAG_NAME;
            } 
            // fall through
          case 67: break;
          case 13: 
            { beginType(); return ID;
            } 
            // fall through
          case 68: break;
          case 14: 
            { if (_typeReq || _typeLevel > 0) { _typeReq = false; return ID; } else { yybegin(xCOMMENT_STRING); yypushback(yylength()); }
            } 
            // fall through
          case 69: break;
          case 15: 
            { yybegin(xDOUBLE_QUOTED_STRING); yypushback(yylength());
            } 
            // fall through
          case 70: break;
          case 16: 
            { yybegin(xSINGLE_QUOTED_STRING); yypushback(yylength());
            } 
            // fall through
          case 71: break;
          case 17: 
            { _typeReq = true; return COMMA;
            } 
            // fall through
          case 72: break;
          case 18: 
            { _typeReq = true; return EXTENDS;
            } 
            // fall through
          case 73: break;
          case 19: 
            { _typeReq = true; return OR;
            } 
            // fall through
          case 74: break;
          case 20: 
            { _typeLevel++; return LT;
            } 
            // fall through
          case 75: break;
          case 21: 
            { _typeLevel--; _typeReq = false; return GT;
            } 
            // fall through
          case 76: break;
          case 22: 
            { _typeLevel++; return LPAREN;
            } 
            // fall through
          case 77: break;
          case 23: 
            { _typeLevel--; _typeReq = false; return RPAREN;
            } 
            // fall through
          case 78: break;
          case 24: 
            { _typeLevel++; return LCURLY;
            } 
            // fall through
          case 79: break;
          case 25: 
            { _typeLevel--; _typeReq = false; return RCURLY;
            } 
            // fall through
          case 80: break;
          case 26: 
            { yybegin(xCLASS_EXTEND); return ID;
            } 
            // fall through
          case 81: break;
          case 27: 
            { beginType(); return EXTENDS;
            } 
            // fall through
          case 82: break;
          case 28: 
            { return COMMA;
            } 
            // fall through
          case 83: break;
          case 29: 
            { return EXTENDS;
            } 
            // fall through
          case 84: break;
          case 30: 
            { yybegin(xTYPE_REF); return STRING_LITERAL;
            } 
            // fall through
          case 85: break;
          case 31: 
            { if (yylength() - 2 == nBrackets) {
      	    nBrackets = -1;
            return BLOCK_END;
        }
            } 
            // fall through
          case 86: break;
          case 32: 
            { if (nBrackets == -1) return DASHES;
            } 
            // fall through
          case 87: break;
          case 33: 
            { _typeReq = false; return ARR;
            } 
            // fall through
          case 88: break;
          case 34: 
            { yybegin(xTAG); return TAG_NAME_SEE;
            } 
            // fall through
          case 89: break;
          case 35: 
            { return FUN;
            } 
            // fall through
          case 90: break;
          case 36: 
            { beginType(); return TAG_NAME_TYPE;
            } 
            // fall through
          case 91: break;
          case 37: 
            { yybegin(xFIELD); return TAG_NAME_FIELD;
            } 
            // fall through
          case 92: break;
          case 38: 
            { yybegin(xPARAM); return TAG_NAME_PARAM;
            } 
            // fall through
          case 93: break;
          case 39: 
            { yybegin(xALIAS); return TAG_NAME_ALIAS;
            } 
            // fall through
          case 94: break;
          case 40: 
            { yybegin(xCLASS); return TAG_NAME_CLASS;
            } 
            // fall through
          case 95: break;
          case 41: 
            { return TAG_NAME_PUBLIC;
            } 
            // fall through
          case 96: break;
          case 42: 
            { beginType(); return TAG_NAME_RETURN;
            } 
            // fall through
          case 97: break;
          case 43: 
            { yybegin(xCLASS); return TAG_NAME_MODULE;
            } 
            // fall through
          case 98: break;
          case 44: 
            { yybegin(xPARAM); return TAG_NAME_VARARG;
            } 
            // fall through
          case 99: break;
          case 45: 
            { _typeReq = true; return VARARG;
            } 
            // fall through
          case 100: break;
          case 46: 
            { yybegin(xFIELD_ID); return PUBLIC;
            } 
            // fall through
          case 101: break;
          case 47: 
            { nBrackets = yylength() - 7; yybegin(xBODY); return BLOCK_BEGIN;
            } 
            // fall through
          case 102: break;
          case 48: 
            { return TAG_NAME_PRIVATE;
            } 
            // fall through
          case 103: break;
          case 49: 
            { yybegin(xGENERIC); return TAG_NAME_GENERIC;
            } 
            // fall through
          case 104: break;
          case 50: 
            { yybegin(xFIELD_ID); return PRIVATE;
            } 
            // fall through
          case 105: break;
          case 51: 
            { yybegin(xTAG_WITH_ID); return TAG_NAME_LANGUAGE;
            } 
            // fall through
          case 106: break;
          case 52: 
            { yybegin(xSUPPRESS); return TAG_NAME_SUPPRESS;
            } 
            // fall through
          case 107: break;
          case 53: 
            { beginType(); return TAG_NAME_OVERLOAD;
            } 
            // fall through
          case 108: break;
          case 54: 
            { return TAG_NAME_PROTECTED;
            } 
            // fall through
          case 109: break;
          case 55: 
            { yybegin(xFIELD_ID); return PROTECTED;
            } 
            // fall through
          case 110: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
