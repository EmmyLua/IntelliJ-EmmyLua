/*
 * Copyright (c) 2017. tangzx(love.tangzx@qq.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id 'org.jetbrains.intellij' version "0.4.18"
    id "org.jetbrains.kotlin.jvm" version "1.3.72"
    id "de.undercouch.download" version "3.4.3"
}

repositories {
    jcenter()
}

dependencies {
    compile fileTree(dir: "libs", includes: ["*.jar"])
}

sourceSets {
    main {
        java.srcDirs 'gen'
        resources {
            exclude "debugger/**"
        }
    }
}
def isWin = Os.isFamily(Os.FAMILY_WINDOWS)
// Appveyor CI
if (System.env['APPVEYOR']) {
    if (System.env['APPVEYOR_REPO_TAG_NAME']) {
        version = System.env['APPVEYOR_REPO_TAG_NAME']
    } else {
        version = System.env['APPVEYOR_BUILD_VERSION']
    }
    exec {
        executable "git"
        args "config", "--global", "user.email", "love.tangzx@qq.com"
    }
    exec {
        executable "git"
        args "config", "--global", "user.name", "tangzx"
    }
}

ext {
    getRev = {
        def os = new ByteArrayOutputStream()
        exec {
            executable "git"
            args "rev-parse"
            args "HEAD"
            standardOutput = os
        }
        return os.toString().substring(0, 7)
    }

    setDefaultProperty = { name, defaultValue ->
        if (!this.hasProperty(name))
            ext[name] = defaultValue
    }
}

setDefaultProperty("IDEA_VER", "193")

version = "${version}-IDEA${IDEA_VER}"

def cfg = [
    ideaSDKVersion: ideaSDKVersion,
    sinceBuild: sinceBuild,
    untilBuild: untilBuild,
    archiveName: archiveName,
    explicitJavaDependency: project.hasProperty('explicitJavaDependency') ? explicitJavaDependency : "true",
]
def rev = getRev()

intellij {
    type 'IU'
    updateSinceUntilBuild false
    downloadSources false
    version = cfg.ideaSDKVersion
    localPath System.env["IDEA_HOME_${IDEA_VER}"]

    if (cfg.explicitJavaDependency != "false") {
        plugins 'java'
    }
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs = ['-Xjvm-default=enable']
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs = ['-Xjvm-default=enable']
    }
}

patchPluginXml {
    sinceBuild cfg.sinceBuild
    untilBuild cfg.untilBuild
}

publishPlugin {
    username System.env['JETBRAINS_USERNAME']
    password System.env['JETBRAINS_PASSWORD']
    channels 'EAP'
}

def RES_DIR = "src/main/resources"

buildPlugin.baseName = cfg.archiveName

task downloadEmmyDebugger(type: Download) {
    src ([
            "https://github.com/EmmyLua/EmmyLuaDebugger/releases/download/${emmyDebuggerVersion}/emmy_core.so",
            "https://github.com/EmmyLua/EmmyLuaDebugger/releases/download/${emmyDebuggerVersion}/emmy_core.dylib",
            "https://github.com/EmmyLua/EmmyLuaDebugger/releases/download/${emmyDebuggerVersion}/emmy_core@x64.zip",
            "https://github.com/EmmyLua/EmmyLuaDebugger/releases/download/${emmyDebuggerVersion}/emmy_core@x86.zip",
    ])
    dest "temp"
}

task unzipEmmyDebugger(type: Copy, dependsOn: downloadEmmyDebugger) {
    from(zipTree("temp/emmy_core@x64.zip")) {
        //include "emmy_core.dll"
        into "x64"
    }
    from(zipTree("temp/emmy_core@x86.zip")) {
        //include "emmy_core.dll"
        into "x86"
    }
    destinationDir file("temp")
}

task installEmmyDebugger(dependsOn: unzipEmmyDebugger, type: Copy) {
    from("temp/x64/") {
        include "emmy_core.dll"
        into "debugger/emmy/windows/x64"
    }
    from("temp/x86/") {
        include "emmy_core.dll"
        into "debugger/emmy/windows/x86"
    }
    from("temp") {
        include "emmy_core.so"
        into "debugger/emmy/linux"
    }
    from("temp") {
        include "emmy_core.dylib"
        into "debugger/emmy/mac"
    }
    destinationDir file("src/main/resources")
}

buildPlugin.dependsOn([installEmmyDebugger])
buildPlugin.from(fileTree(dir: RES_DIR, includes: ['debugger/**'])) {
    into "/${project.name}/classes/"
}
buildPlugin.from(fileTree(dir: RES_DIR, include: '!!DONT_UNZIP_ME!!.txt')) {
    into "/${project.name}"
}

// apply patchs before build plugin
task buildPluginWithBunch() {
    finalizedBy buildPlugin
    doLast {
        // reset
        exec {
            executable "git"
            args "reset", "HEAD", "--hard"
        }
        // clean untracked files
        exec {
            executable "git"
            args "clean", "-d", "-f"
        }
        // switch
        exec {
            executable isWin ? "bunch/bin/bunch.bat" : "bunch/bin/bunch"
            args "switch", ".", IDEA_VER
        }
        // reset to HEAD
        exec {
            executable "git"
            args "reset", rev
        }
    }
}
